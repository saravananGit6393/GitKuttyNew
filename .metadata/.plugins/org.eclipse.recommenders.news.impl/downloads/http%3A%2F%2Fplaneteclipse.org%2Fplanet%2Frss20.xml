<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/</description>
	<atom:link rel="self" href="http://planeteclipse.org/rss20.xml" type="application/rss+xml"/>

<item>
	<title>Eclipse Announcements:  The CRA should support open practices of open source and the development of European Open source to the advantage of small and medium size entreprises (SMEs)</title>
	<guid isPermaLink="true">https://newsroom.eclipse.org/39683</guid>
	<link>https://newsroom.eclipse.org/39683</link>
	<description>&lt;p dir=&quot;ltr&quot;&gt;As the European Union is about to initiate negotiations between co-legislators on the Cyber Resilience Act (CRA), we, the undersigned organisations and contributors to leading European open source software (OSS), herewith express our utmost concerns about the consequences of the proposed CRA, and misconceptions throughout the EU legislative process.&lt;/p&gt;
&lt;p class=&quot;text-align-justify&quot; dir=&quot;ltr&quot;&gt;In this time of increasing awareness of the challenges to European open strategic autonomy, Europe needs a strong open source community supportive of SMEs, startups and scaleups, but also accountability of large corporations in increasing cybersecurity.&lt;/p&gt;
&lt;p class=&quot;text-align-justify&quot; dir=&quot;ltr&quot;&gt;We deeply share the CRA’s aim to improve cybersecurity in the EU and embrace the urgent need to protect citizens and economies by improving software security. &lt;/p&gt;
&lt;p class=&quot;text-align-justify&quot; dir=&quot;ltr&quot;&gt;We welcome some recent positive changes brought by the co-legislators, such as the manufacturers’ obligation to report vulnerabilities to the entity maintaining OSS.&lt;/p&gt;
&lt;p class=&quot;text-align-justify&quot; dir=&quot;ltr&quot;&gt;However, should the proposal or the position of the European Parliament be adopted as it stands, the CRA would: decrease the number of OSS projects available to European SMEs; increase the control over OSS initiatives by large corporations; jeopardise the fragile equilibrium that benefits SMEs which contributes to European innovation; and reduce the security of products available to consumers.&lt;/p&gt;
&lt;p class=&quot;text-align-justify&quot; dir=&quot;ltr&quot;&gt;Thus, in order to not harm European innovation we urge co-legislators to consider the following:&lt;/p&gt;
&lt;ul&gt;&lt;li dir=&quot;ltr&quot;&gt;Clearly state that if open source software under the governance of a non-profit falls within the scope of the legislation, legal responsibility should only be on commercial entities supplying the software in the course of a commercial activity, and not the governing non-profit which makes the software available free of charge;&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;Recognise for open source software that is under the governance of non-profits that are acting as neutral spaces, those non-profits may accept to collaborate with for-profit entities by coordinating the compliance of the software;&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;Allow the CE marking and overall compliance managed by commercial entities, to be reusable by the OS community.&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;text-align-justify&quot; dir=&quot;ltr&quot;&gt;With these elements the CRA could achieve one of its objectives to regulate and improve the cybersecurity practices of OSS used in commercial activities without altering the equilibrium of OSS development, research and collaboration, which currently plays to the advantage of European SMEs and innovation.&lt;/p&gt;
&lt;p class=&quot;text-align-justify&quot; dir=&quot;ltr&quot;&gt;The undersigned organisations collectively represent a large part of the open-source ecosystem in Europe. We offer our collective expertise, and support an increased dialogue towards the CRA’s successful implementation in this new regulatory paradigm.&lt;/p&gt;
&lt;p class=&quot;text-align-center&quot; dir=&quot;ltr&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;CRA undersigned organizations&quot; src=&quot;https://live.staticflickr.com/65535/53199196463_88cbb06960_c.jpg&quot; /&gt;&lt;/p&gt;&lt;p&gt;Download the PDF in &lt;a href=&quot;https://drive.google.com/file/d/1F_0NeZC8n8RKJ-lXZ48cUag5Xl_GIWZG/view?usp=drive_link&quot; rel=&quot;nofollow&quot;&gt;English&lt;/a&gt;. &lt;/p&gt;</description>
	<pubDate>Thu, 21 Sep 2023 05:10:25 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: OpenHW Group Appoints Florian 'Flo' Wohlrab as New CEO to Spearhead Open-Source Ecosystem Advancement</title>
	<guid isPermaLink="true">https://newsroom.eclipse.org/39689</guid>
	<link>https://newsroom.eclipse.org/39689</link>
	<description>&lt;p&gt;OpenHW Group, dedicated to fostering collaboration among hardware and software designers on open-source cores, related IP, tools, and software projects, has chosen Wohlrab to lead the organization into a new era of open-source innovation.&lt;/p&gt;</description>
	<pubDate>Wed, 20 Sep 2023 15:09:10 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: Using Theia Cloud to end-to-end test Theia-based applications</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2023/09/20/using-theia-cloud-to-end-to-end-test-theia-based-applications/</guid>
	<link>https://eclipsesource.com/blogs/2023/09/20/using-theia-cloud-to-end-to-end-test-theia-based-applications/</link>
	<description>&lt;p&gt;Do you develop a Theia-based application and you want an easy way to end-to-end test new versions of it. Do you want to dynamically deploy new versions of your Theia application, ideally on every new...&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2023/09/20/using-theia-cloud-to-end-to-end-test-theia-based-applications/&quot; rel=&quot;nofollow&quot;&gt; Using Theia Cloud to end-to-end test Theia-based applications&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Mike Milinkovich: New Survey: How Do Developers Feel About Enterprise Java in 2023?</title>
	<guid isPermaLink="false">http://eclipse-foundation.blog/?p=1740</guid>
	<link>https://eclipse-foundation.blog/2023/09/19/new-survey-how-do-developers-feel-about-enterprise-java-in-2023/</link>
	<description>&lt;p&gt;The &lt;a href=&quot;https://outreach.eclipse.foundation/jakarta-ee-developer-survey-2023&quot;&gt;results of the 2023 Jakarta EE Developer Survey&lt;/a&gt; are now available! For the sixth year in a row, we’ve reached out to the enterprise Java community to ask about their preferences and priorities for cloud native Java architectures, technologies, and tools, their perceptions of the cloud native application industry, and more.&lt;/p&gt;



&lt;p&gt;From these results, it is clear that open source cloud native Java is on the rise following the release of Jakarta EE 10.The number of respondents who have migrated to Jakarta EE continues to grow, with 60% saying they have already migrated, or plan to do so within the next 6-24 months. These results indicate steady growth in the use of Jakarta EE and a growing interest in cloud native Java overall.&lt;/p&gt;



&lt;p&gt;When comparing the survey results to 2022, usage of Jakarta EE to build cloud native applications has remained steady at 53%. Spring/Spring Boot, which relies on some Jakarta EE specifications, continues to be the leading Java framework in this category, with usage growing from 57% to 66%. &lt;/p&gt;



&lt;p&gt;Since the September 2022 release, Jakarta EE 10 usage has grown to 17% among survey respondents. This community-driven release is attracting a growing number of application developers to adopt Jakarta EE 10 by offering new features and updates to Jakarta EE. An equal number of developers are running Jakarta EE 9 or 9.1 in production, while 28% are running Jakarta EE 8. That means the increase we are seeing in the migration to Jakarta EE is mostly due to the adoption of Jakarta EE 10, as compared to Jakarta EE 9/9.1 or Jakarta EE 8.&lt;/p&gt;



&lt;p&gt;The Jakarta EE Developer Survey also gives us a chance to get valuable feedback on features from the latest Jakarta EE release, as well as what direction the project should take in the future. &lt;/p&gt;



&lt;p&gt;Respondents are most excited about Jakarta EE Core Profile, which was introduced in the Jakarta EE 10 release as a subset of Web Profile specifications designed for microservices and ahead-of-time compilation. When it comes to future releases, the community is prioritizing better support for Kubernetes and microservices, as well as adapting Java SE innovations to Jakarta EE — a priority that has grown in popularity since 2022. This is a good indicator that the Jakarta EE 11 release plan is on the right direction by adopting new Java SE 21 features.&lt;/p&gt;



&lt;p&gt;2,203 developers, architects, and other tech professionals participated in the survey, a 53% increase from last year. This year’s survey was also available in Chinese, Japanese, Spanish &amp;amp; Portuguese, making it easier for Java enthusiasts around the world to share their perspectives.  Participation from the Chinese Jakarta EE community was particularly strong, with over 27% of the responses coming from China. By hearing from more people in the enterprise Java space, we’re able to get a clearer picture of what challenges developers are facing, what they’re looking for, and what technologies they are using. Thank you to everyone who participated! &lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Learn More&lt;/h2&gt;



&lt;p&gt;We encourage you to &lt;a href=&quot;https://outreach.eclipse.foundation/jakarta-ee-developer-survey-2023&quot;&gt;download the report&lt;/a&gt; for a complete look at the enterprise Java ecosystem. &lt;/p&gt;



&lt;p&gt;If you’d like to get more information about Jakarta EE specifications and our open source community, sign up for one of our &lt;a href=&quot;https://accounts.eclipse.org/mailing-list&quot;&gt;mailing lists&lt;/a&gt; or join the conversation on &lt;a href=&quot;https://eclipsefoundationhq.slack.com/?redir=%2Fssb%2Fredirect&quot;&gt;Slack&lt;/a&gt;. If you’d like to participate in the Jakarta EE community, learn how to get started on our &lt;a href=&quot;https://jakarta.ee/community/get-involved/&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Tue, 19 Sep 2023 13:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: The Eclipse Foundation Releases 2023 Jakarta EE Developer Survey Report</title>
	<guid isPermaLink="true">https://newsroom.eclipse.org/39684</guid>
	<link>https://newsroom.eclipse.org/39684</link>
	<description>&lt;p&gt;&lt;strong&gt;BRUSSELS – September 19, 2023 – &lt;/strong&gt;&lt;a href=&quot;http://www.eclipse.org&quot; rel=&quot;nofollow&quot;&gt;The Eclipse Foundation&lt;/a&gt;, one of the world’s largest open source software foundations, today announced the availability of the 2023 Jakarta EE Developer Survey Report, the industry’s most prominent survey for technical insights into enterprise Java. The results showcase a significantly increased growth in the use of Jakarta EE and a growing interest in cloud native Java overall. The 2023 Jakarta EE Developer Survey Report can be downloaded in its entirety &lt;a href=&quot;https://outreach.eclipse.foundation/jakarta-ee-developer-survey-2023&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;“2023 has seen the continued growth of cloud native Java, with open source leading the way,” said Mike Milinkovich, executive director of the Eclipse Foundation. “The release of Jakarta EE 10 truly opened the doors for this shift, and as we set our sights on Jakarta EE 11 our community is looking to drive innovation for enterprise developers by providing new and enhanced APIs and embracing new features in the Java language and platform.”&lt;/p&gt;
&lt;p&gt;Now in its sixth year, the Jakarta EE Developer Survey plays a crucial role in providing insight into the needs, preferences, and perspectives of developers within the Java ecosystem. Additionally, it also serves as a valuable resource to help the Java ecosystem better understand the evolving landscape of cloud-native enterprise Java and what that means for their respective strategies and businesses. Spanning from March 14 to May 23, 2025, this year’s survey engaged a total of 2,203 participants.&lt;/p&gt;
&lt;p&gt;Here are some of the key findings from this year’s survey:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Spring/Spring Boot, which incorporates elements of Jakarta EE, continues to dominate as the leading Java framework for cloud native applications at 66%. (up from 57% in 2022). Jakarta EE usage remains steady at 53%, while MicroProfile usage experienced a slight decline, dropping from 30% in 2022 to 26% in 2023. It’s important to note that Spring/SpringBoot is reliant on Jakarta EE developments for its operation and is not necessarily competitive with Jakarta EE. Both are critical ingredients to the healthy enterprise Java ecosystem.&lt;/li&gt;
&lt;li&gt;28% of the respondents will develop cloud native applications to replace some or all existing services (up from 25% in 2022) while 24% will modify existing Java applications for migration in the cloud (vs 28% in 2022). 22% of the respondents are currently running their Java applications in the cloud (vs 18% in 2022)&lt;/li&gt;
&lt;li&gt;Despite only shipping in September 2022, Jakarta EE 10 usage has grown to 17%.&lt;/li&gt;
&lt;li&gt;Over 60% of respondents (59% in 2022) have already migrated to Jakarta EE, or plan to do so within the next 6-24 months.&lt;/li&gt;
&lt;li&gt;17% of respondents run Jakarta EE 9/9.1 in production (up from 14% in 2022) and 28% currently run Jakarta EE 8 in production (vs 24% in 2022)&lt;/li&gt;
&lt;li&gt;The Jakarta EE Community is deeply interested in adopting the innovations implemented in Java SE into Jakarta EE (30%). This is a good indicator that Jakarta EE 11 release plan is on the right direction by adopting new Java SE 21 features.&lt;/li&gt;
&lt;li&gt;The Top five community priorities for Jakarta EE are:
&lt;ul&gt;&lt;li&gt;Better support for Kubernetes 50% (51% in 2022)&lt;/li&gt;
&lt;li&gt;Better support for microservices (48%)&lt;/li&gt;
&lt;li&gt;Adapt Java SE innovations (such as Records and Virtual Threads) (30%)&lt;/li&gt;
&lt;li&gt;Improve support for serverless (25%)&lt;/li&gt;
&lt;li&gt;Faster support from existing Java EE / Jakarta EE or cloud vendors, improve support for testing &amp;amp; faster pace of innovation (23%) &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;With regard to the community’s priorities in terms of the future of Jakarta EE, it is interesting to find that the first two priorities remain consistent over the past two years, from 2021 to 2023. However, last year’s 3rd place priority “Faster Support from existing Java EE / Jakarta EE or cloud vendors,” has been overtaken by a shift to adapting Java SE innovations and serverless support. &lt;/p&gt;
&lt;p&gt;The Jakarta EE community welcomes contributions and participation from all interested individuals and organizations. As the Jakarta EE Working Group diligently works towards the Jakarta EE 11 release, which includes innovative cloud native features, there’s no better time to become part of this vibrant community and make your voice heard. To get involved and connect with the global community, visit us &lt;a href=&quot;https://jakarta.ee/connect/&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For organizations that value enterprise Java and would like to help shape its future, the Jakarta EE Working Group offers a unique opportunity. Membership in the working group not only supports the sustainability of the community, but also provides avenues for participating in marketing initiatives and direct engagement with the community. Discover the numerous benefits and advantages of membership &lt;a href=&quot;https://jakarta.ee/membership/&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;. Your involvement can help drive the future of enterprise Java.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quotes from Jakarta EE Working Group Member Organizations &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IBM&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“It is great to see the progress made with developers around Jakarta EE adoption,” said Ian Robinson, CTO, IBM Application Runtimes. “We continue to innovate and deliver complete Jakarta EE compatibility and production support, along with MicroProfile and Spring Boot, with our Liberty runtime making it the ideal runtime for cloud-native applications.”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Oracle&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“The 50%+ growth in survey responses indicates a vibrant Jakarta EE community that is looking for improved Kubernetes support, microservices support, and adoption of new Java SE features such as virtual threads. Oracle’s investments in WebLogic Server, Helidon, Coherence, and Verrazzano are aligned with these trends, and the survey results provide valuable insights into these and other trends in the enterprise Java community.” - Tom Snyder, VP of Engineering, Oracle Enterprise Cloud Native Java&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Payara&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“It is fantastic to see such an increase in participation in this year's comprehensive Jakarta EE Developer Survey. Especially encouraging is the growth in use of Jakarta EE 10, despite it only shipping in December,” said Steve Millidge, CEO and Founder, Payara. “We help developers enjoy its new features, with our Payara Platform 6 Enterprise and Community Edition. Respondents continue to ask for greater support for Kubernetes and Docker in Jakarta EE. We hope to provide an alternate solution for this, with our fully managed cloud native runtime, Payara Cloud, taking away the hassle of Kubernetes for Jakarta EE developers altogether. Overall, the future looks bright for Jakarta EE and Payara, as we note with pride that the percentage of respondents using Payara has also increased!”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;About the Eclipse Foundation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Eclipse Foundation provides our global community of individuals and organizations with a mature, scalable, and business-friendly environment for open source software collaboration and innovation. The Foundation is home to the Eclipse IDE, Jakarta EE, and over 400 open source projects, including runtimes, tools, and frameworks for cloud and edge applications, IoT, AI, automotive, systems engineering, distributed ledger technologies, open processor designs, and many others. The Eclipse Foundation is an international non-profit association supported by over 330 members, including industry leaders who value open source as a key enabler for their business strategies. To learn more, follow us on social media &lt;a href=&quot;https://twitter.com/EclipseFdn&quot; rel=&quot;nofollow&quot;&gt;@EclipseFdn&lt;/a&gt;,&lt;a href=&quot;https://linkedin.com/company/eclipse-foundation&quot; rel=&quot;nofollow&quot;&gt; LinkedIn&lt;/a&gt;, or visit&lt;a href=&quot;http://eclipse.org&quot; rel=&quot;nofollow&quot;&gt; eclipse.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Third-party trademarks mentioned are the property of their respective owners.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p class=&quot;text-align-center&quot;&gt;###&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Media contacts:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Schwartz Public Relations for the Eclipse Foundation, AISBL (Germany)&lt;/p&gt;
&lt;p&gt;Gloria Huppert, Franziska Wenzl&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;mailto:EclipseFoundation@schwartzpr.de&quot; rel=&quot;nofollow&quot;&gt;EclipseFoundation@schwartzpr.de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;+49 (89) 211 871 - 70 / - 58&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Nichols Communications for the Eclipse Foundation, AISBL&lt;/p&gt;
&lt;p&gt;Jay Nichols&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;mailto:jay@nicholscomm.com&quot; rel=&quot;nofollow&quot;&gt;jay@nicholscomm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;+1 408-772-1551&lt;/p&gt;
&lt;p&gt;514 Media Ltd for the Eclipse Foundation, AISBL (France, Italy, Spain)&lt;/p&gt;
&lt;p&gt;Benoit Simoneau&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;mailto:benoit@514-media.com&quot; rel=&quot;nofollow&quot;&gt;benoit@514-media.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;M: +44 (0) 7891 920 370&lt;/p&gt;</description>
	<pubDate>Tue, 19 Sep 2023 12:45:43 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Foundation Publishes Results of Equinox p2 Security Audit</title>
	<guid isPermaLink="true">https://newsroom.eclipse.org/39593</guid>
	<link>https://newsroom.eclipse.org/39593</link>
	<pubDate>Mon, 18 Sep 2023 18:42:28 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Sparkplug Specification Honored with IoT Business Impact Award </title>
	<guid isPermaLink="true">https://newsroom.eclipse.org/39503</guid>
	<link>https://newsroom.eclipse.org/39503</link>
	<description>&lt;p&gt;&lt;strong&gt;BRUSSELS, Belgium – May 23, 2023 – &lt;/strong&gt;The Eclipse Foundation, one of the world’s largest open source software foundations, announced today that the &lt;a href=&quot;https://sparkplug.eclipse.org/&quot;&gt;Eclipse Sparkplug specification&lt;/a&gt; has received a 2023 IoT Business Impact Award from &lt;a href=&quot;https://www.iotevolutionworld.com/Default.aspx&quot;&gt;IoT Evolution&lt;/a&gt; magazine, the leading publication covering IoT technologies.&lt;/p&gt;

&lt;p&gt;The award honors organizations for their IoT deployment case studies. Eclipse Sparkplug was recognized for their successful partnership bringing IoT functionality to NGL Energy Partners.&lt;/p&gt;

&lt;p&gt;“Sparkplug is well on its way to becoming the de facto standard for making the IIoT ‘plug’n’play,’” said Frederic Desbiens, Eclipse Foundation program manager and evangelist for IoT and Edge Computing. “This award highlights the significant business benefits of implementing this specification in conjunction with MQTT.” &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;About Sparkplug &amp;amp; MQTT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sparkplug provides an open and freely available specification for how Edge of Network (EoN) gateways or native MQTT-enabled end devices and MQTT Applications communicate bi-directionally within an MQTT Infrastructure. It is recognized that MQTT is used across a wide spectrum of application solution use cases and an almost indefinable variation of network topologies. &lt;/p&gt;

&lt;p&gt;By design, the MQTT specification does not dictate a Topic Namespace or any payload encoding. However, as the IIoT and other architectures leveraging the publisher/subscriber model are adopted by device OEMs in the industrial sector, having different Topic Namespace and payload encoding can inhibit interoperability for the end customer. To that end, the Sparkplug specification addresses the following components within an MQTT infrastructure: &lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Sparkplug defines an OT-centric Topic Namespace &lt;/li&gt;
	&lt;li&gt;Sparkplug defines an OT-centric Payload definition optimized for industrial process variables &lt;/li&gt;
	&lt;li&gt;Sparkplug defines MQTT Session State management required by real-time OT SCADA systems&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; “It is my pleasure to recognize Sparkplug, an innovative solution that earned the Eclipse Foundation the 2023 Business Impact Award,” said Rich Tehrani, CEO, TMC. “I look forward to seeing more successful deployments of best-in-class solutions from the Eclipse Foundation in the future.”&lt;/p&gt;

&lt;p&gt;The Sparkplug standard has recently been submitted for acceptance as an&lt;a href=&quot;https://www.globenewswire.com/en/news-release/2022/12/08/2570068/0/en/The-Eclipse-Foundation-Announces-The-Release-of-Sparkplug-3-0-and-Unveils-it-is-Being-Fast-Tracked-to-Become-an-International-Standard.html&quot;&gt; ISO/IEC JTC 1 international standard&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;About the Eclipse Foundation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Eclipse Foundation provides our global community of individuals and organisations with a mature, scalable, and business-friendly environment for open source software collaboration and innovation. The Foundation is home to the Eclipse IDE, Jakarta EE, and over 400 open source projects, including runtimes, tools, and frameworks for cloud and edge applications, IoT, AI, automotive, systems engineering, distributed ledger technologies, open processor designs, and many others. The Eclipse Foundation is an international non-profit association supported by over 330 members, including industry leaders who value open source as a key enabler for their business strategies. To learn more, follow us on Twitter&lt;a href=&quot;https://twitter.com/EclipseFdn&quot;&gt; @EclipseFdn&lt;/a&gt;,&lt;a href=&quot;https://linkedin.com/company/eclipse-foundation&quot;&gt; LinkedIn&lt;/a&gt; or visit&lt;a href=&quot;http://eclipse.org&quot;&gt; eclipse.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Third-party trademarks mentioned are the property of their respective owners.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;About Crossfire Media&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Crossfire Media, co-publishers of IoT Evolution, is an integrated marketing company with a core focus on future trends in technology. We service communities of interest with conferences, tradeshows, webinars and newsletters. Crossfire Media has a partnership with Technology Marketing Corporation (TMC) to produce events and websites related to disruptive technologies. Crossfire Media is a division of Crossfire Consulting, a full service Information Technology company based in New York. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;About TMC&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Through education, industry news, live events and social influence, global buyers rely on TMC’s content-driven marketplaces to make purchase decisions and navigate markets. As a result, leading technology vendors turn to TMC for unparalleled branding, thought leadership and lead generation opportunities. Our in-person and online events deliver unmatched visibility and sales prospects for all percipients. Through our custom lead generation programs, we provide clients with an ongoing stream of leads that turn into sales opportunities and build databases. Additionally, we bolster brand reputations with the millions of impressions from display advertising on our news sites and newsletters. Making TMC a 360 degree marketing solution, we offer comprehensive event and road show management services and custom content creation with expertly ghost-crafted blogs, press releases, articles and marketing collateral to help with SEO, branding, and overall marketing efforts. For more information about TMC and to learn how we can help you reach your marketing goals, please visit www.tmcnet.com and follow us on Facebook, LinkedIn and Twitter, @tmcnet.&lt;/p&gt;

&lt;p&gt;For more information about TMC and to learn how we can help you reach your marketing goals, please visit www.tmcnet.com.&lt;/p&gt;

&lt;p&gt;###&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Media contacts:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Schwartz Public Relations for the Eclipse Foundation, AISBL&lt;/p&gt;

&lt;p&gt;Stephanie Brüls / Susanne Pawlik&lt;/p&gt;

&lt;p&gt;Sendlinger Straße 42A&lt;/p&gt;

&lt;p&gt;80331 Munich&lt;/p&gt;

&lt;p&gt;EclipseFoundation@schwartzpr.de&lt;/p&gt;

&lt;p&gt;+49 (89) 211 871 – 64 / -35&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Nichols Communications for the Eclipse Foundation, AISBL&lt;/p&gt;

&lt;p&gt;Jay Nichols&lt;/p&gt;

&lt;p&gt;jay@nicholscomm.com&lt;/p&gt;

&lt;p&gt;+1 408-772-1551&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;514 Media Ltd for the Eclipse Foundation, AISBL (France, Italy, Spain)&lt;/p&gt;

&lt;p&gt;Benoit Simoneau&lt;/p&gt;

&lt;p&gt;benoit@514-media.com&lt;/p&gt;

&lt;p&gt;M: +44 (0) 7891 920 370&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TMC Contact:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Michelle Connolly&lt;/p&gt;

&lt;p&gt;Senior Marketing Manager&lt;/p&gt;

&lt;p&gt;203-852-6800, ext. 170&lt;/p&gt;

&lt;p&gt;mconnolly@tmcnet.com &lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
 &lt;/p&gt;</description>
	<pubDate>Mon, 18 Sep 2023 18:42:28 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: La Fondation Eclipse rejoint la Société informatique de France</title>
	<guid isPermaLink="true">https://newsroom.eclipse.org/39421</guid>
	<link>https://newsroom.eclipse.org/39421</link>
	<description>&lt;p&gt;&lt;strong&gt;Paris, France, le 09 mars 2023 – &lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;La Fondation Eclipse annonce aujourd’hui avoir rejoint la Société Informatique de France afin de collaborer à une démarche commune qui vise à rassembler toutes celles et ceux pour qui faire progresser l’informatique est un métier ou une passion : enseignants, chercheurs, ingénieurs, industriels, et consultants. La Fondation Eclipse est convaincue que cette démarche doit passer par une bonne compréhension de l’open source et de ses pratiques.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;« Nous sommes très heureux et fier de rejoindre la SIF et faire partie de ses membres » explique Philippe Krief, directeur des relations avec la recherche à la Fondation Eclipse. La Fondation Eclipse s'implique d’ailleurs fortement dans les projets de recherche européens depuis dix ans, en les accompagnant dans la mise en œuvre et la pérennisation de leurs résultats sous forme de projets open source.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;« Ces nombreuses rencontres avec la communauté de recherche européenne nous ont permis de mieux comprendre les questionnements comme les idées reçues que le milieu de la recherche peut avoir vis-à-vis de l'open source » poursuit Philippe Krief. « Notre travail consiste donc à expliquer et à rassurer nos partenaires académiques, comme industriels, sur les bonnes pratiques de l'open source, à casser certains clichés, et à les accompagner dans le développement d'un projet open source, de sa communauté, et de sa pérennisation.                          &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;«  La Société informatique de France est particulièrement heureuse d'accueillir la fondation Eclipse parmi ses membres. Cette adhésion est un signe visible de l’existence de valeurs communes et d’une ambition partagée pour une science plus ouverte et une innovation plus citoyenne. C’est bien en ce sens qu’œuvre la fondation Eclipse et que se développe chaque jour davantage l’écosystème du logiciel libre au bénéfice de l’ensemble de la société.»  souligne Yves Bertrand, président de la SIF.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;– Fin –&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;À propos de la Fondation Eclipse&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;La Fondation Eclipse fournit à sa communauté mondiale de personnes et d'organisations un environnement mature, évolutif et convivial pour la collaboration et l'innovation en matière de logiciels open source. La Fondation héberge l'IDE Eclipse, Jakarta EE et plus de 400 projets open source, notamment des runtimes, des outils et des frameworks pour les applications cloud et edge, l'IoT, l'IA, l'automobile, l'ingénierie des systèmes, les conceptions de processeurs ouverts, et bien d'autres. La Fondation Eclipse est une association internationale à but non lucratif soutenue par plus de 330 membres, dont des leaders de l'industrie qui apprécient l'open source comme un catalyseur clé pour leurs stratégies commerciales. Pour en savoir plus, suivez-nous sur Twitter @ResearchEclipse, @EclipseFdn, LinkedIn ou visitez eclipse.org.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;À propos de la Société informatique de France&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;La Société Informatique de France (SIF) est la société savante française d’informatique. Elle a vu le jour en 2012 et est reconnue d'utilité publique depuis septembre 2018. Au cœur de la société, elle a vocation à porter la voix de l’informatique, science et technique, et celle des femmes et des hommes qui la font chaque jour. À ce titre, elle vise à rassembler toutes celles et ceux pour qui faire progresser l’informatique est un métier ou une passion : enseignantes, chercheuses, ingénieurs, industriels, consultantes. Société savante, la SIF vise tout particulièrement à promouvoir l’informatique, à servir et à animer sa communauté scientifique et technique, contribuer à la culture citoyenne et à l’enseignement de la discipline à tous les niveaux. Elle aspire à participer aux réflexions et initiatives sur la formation et l’emploi des informaticiennes et informaticiens et à porter la voix de la communauté dans les débats de société. Pour en savoir plus, visitez https://www.socinfo.fr.&lt;/span&gt;&lt;br /&gt;
 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Contact Eclipse pour la presse:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;514 Media Ltd for the Eclipse Foundation, AISBL (France, Italy, Spain)&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Benoit Simoneau&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;benoit@514-media.com&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;M: +44 (0) 7891 920 370&lt;/span&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ref: ECF018D&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Contacts SIF pour la presse :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Yves BERTRAND, &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;president@societe-informatique-de-france.fr&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;+33 (0)643 348 313&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Sylvie ALAYRANGUES, responsable communication, &lt;/span&gt;&lt;a href=&quot;mailto:sylvie.alayrangues@societe-informatique-de-france.fr&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;sylvie.alayrangues@societe-informatique-de-france.fr&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Mon, 18 Sep 2023 18:42:28 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Help Identify IoT and Edge Computing Trends By Participating in Our Annual Survey</title>
	<guid isPermaLink="true">https://newsroom.eclipse.org/39434</guid>
	<link>https://newsroom.eclipse.org/39434</link>
	<description>Eclipse Foundation head of marketing Karla Ferrer discusses what's new in the 2023 IoT &amp;amp; Edge Developer and Adoption Survey, and what trends we expect to gain insight on.</description>
	<pubDate>Mon, 18 Sep 2023 18:42:28 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Open Letter to the European Commission on the Cyber Resilience Act</title>
	<guid isPermaLink="true">https://newsroom.eclipse.org/39437</guid>
	<link>https://newsroom.eclipse.org/39437</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Dear Members of the European Parliament,&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Dear Representatives to the Council of the European Union,&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We, the undersigned, represent leading governance institutions within the European and global open source software community. We write to express our concern that the greater open source community has been underrepresented during the development of the Cyber Resilience Act (CRA) to date and wish to ensure this is remedied throughout the co-legislative process by lending our support.&lt;/span&gt; &lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Open source software (OSS) represents more than 70% of the software present in products with digital elements in Europe. Yet, our community does not have the benefit of an established relationship with the co-legislators. The software and other technical artefacts produced by us are unprecedented in their contribution to the technology industry along with our digital sovereignty and associated economic benefits on many levels. With the CRA, more than 70% of the software in Europe is about to be regulated without an in-depth consultation. &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As acknowledged in the EU’s Open Source Software Strategy 2020-2023, open source software plays a critical role in the digital economy, powering everything from cloud infrastructure to mobile applications to public transportation systems. In Europe alone, we represent about &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;€&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;100 billion in economic impact. It is therefore essential that any legislation that impacts the software industry takes into account the unique needs and perspectives of open source software, as well as our modern methodologies used to create software.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We deeply share the CRA’s aim to improve the cybersecurity of digital products and services in the EU and embrace the urgent need to protect citizens and economies by improving software security.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;However, our voices and expertise should be heard and have an opportunity to inform public authorities' decisions. If the CRA is, in fact, implemented as written, it will have a chilling effect on open source software development as a global endeavour, with the net effect of undermining the EU’s own expressed goals for innovation, digital sovereignty, and future prosperity.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Moving forward, we urge you to engage with the open source community and take our concerns into account as you consider the implementation of the Cyber Resilience Act. Specifically, moving forward, we urge you to:&lt;/span&gt; &lt;/p&gt;

&lt;ol&gt;&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Recognise the unique characteristics of open source software and ensure that the Cyber Resilience Act does not unintentionally harm the open source ecosystem.&lt;/span&gt;&lt;/li&gt;
	&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Consult with the open source community during the co-legislative process.&lt;/span&gt;&lt;/li&gt;
	&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Ensure that any development under the CRA takes into account the diversity of open and transparent open source software development practices.&lt;/span&gt;&lt;/li&gt;
	&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Establish a mechanism for ongoing dialogue and collaboration between the European institutions and the open source community, to ensure that future legislation and policy decisions are informed.&lt;/span&gt; &lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The undersigned organisations collectively represent the governance of much of the open source software which industry and society rely on. We offer our collective expertise, including envisioning how these professional organisations may support a more inclusive and effective process to inform the CRA today. The same increase in dialog and collaboration will continue to support the CRA’s successful implementation in this new regulatory paradigm. We are prepared to send a representative delegation to meet with the members now. &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We appreciate your attention to this matter and look forward to working with you to ensure that the Cyber Resilience Act reflects the concerns and contributions of the entire software industry, including the open source community.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Co-signed by the Executive Directors, Board Chairs, and Presidents on behalf of their respective organisations:&lt;/span&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://esop.pt/en&quot;&gt;&lt;strong&gt;Associaçāo de Empresas de Software Open Source Portuguesas (ESOP)&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cnll.fr/&quot;&gt;&lt;strong&gt;CNLL, the French Open Source Business Association&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.documentfoundation.org/&quot;&gt;&lt;strong&gt;The Document Foundation (TDF)&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.eclipse.org/&quot;&gt;&lt;strong&gt;Eclipse Foundation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.apell.info/&quot;&gt;&lt;strong&gt;European Open Source Software Business Associations (APELL) &lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://coss.fi/&quot;&gt;&lt;strong&gt;COSS - Finnish Centre for Open Systems and Solutions &lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://linuxfoundation.eu/&quot;&gt;&lt;strong&gt;Linux Foundation Europe&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://openforumeurope.org/&quot;&gt;&lt;strong&gt;Open Forum Europe (OFE)&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://osb-alliance.de/&quot;&gt;&lt;strong&gt;Open Source Business Alliance (OSBA)&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://opensource.org/&quot;&gt;&lt;strong&gt;Open Source Initiative (OSI)&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://coss.fi/&quot;&gt;&lt;strong&gt;Open Systems and Solutions (COSS)&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.ow2.org/&quot;&gt;&lt;strong&gt;OW2&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.softwareheritage.org/&quot;&gt;&lt;strong&gt;Software Heritage Foundation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Mon, 18 Sep 2023 18:42:28 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: The Open VSX Registry, a Vendor-Neutral Open Source Alternative to the Visual Studio Marketplace, Gets its Own Working Group at the Eclipse Foundation</title>
	<guid isPermaLink="true">https://newsroom.eclipse.org/39528</guid>
	<link>https://newsroom.eclipse.org/39528</link>
	<description>&lt;p&gt;&lt;strong&gt;BRUSSELS, Belgium – June 27, 2023 – &lt;/strong&gt;The Eclipse Foundation, one of the world’s largest open source software foundations, today announced the formation of the Open VSX Working Group. The mission of the new working group will be to manage and accelerate adoption of the Open VSX Registry, a vendor-neutral, community-supported alternative to the Microsoft Visual Studio Marketplace. &lt;/p&gt;

&lt;p&gt;Built on the&lt;a href=&quot;https://projects.eclipse.org/projects/ecd.openvsx&quot;&gt; Eclipse Open VSX&lt;/a&gt; open source project, the Open VSX Registry currently hosts nearly 3,000 extensions from over 1,500 different publishers, with new publishers and extensions being added daily. Since the Open VSX Registry became available in 2021, developers have consumed more than 40M extensions, with downloads now exceeding 2M per month. To manage and facilitate this ongoing growth, management of the Open VSX Registry will now shift from the &lt;a href=&quot;https://ecdtools.eclipse.org/&quot;&gt;Eclipse Cloud DevTools Working Group&lt;/a&gt; to a new working group, with initial members including Google, Huawei, Posit, Salesforce, Siemens, and STMicroelectronics. &lt;/p&gt;

&lt;p&gt;“The Open VSX Registry has experienced significant momentum at the Eclipse Foundation, so much so that it merits having its own working group for continued evolution and growth,” said Mike Milinkovich, executive director of the Eclipse Foundation. “By creating a vendor-neutral home with a true open source model for these extensions, we can ensure that this marketplace is guided by the community, and not just a single vendor.”&lt;/p&gt;

&lt;p&gt;The Open VSX Registry delivers on the industry’s need for a fully open source approach to marketplace technologies for Visual Studio (VS) Code extensions. It increases transparency and flexibility for extension users, publishers, and tool developers, particularly those leveraging cloud-based development tools and IDEs that want to avoid being locked into proprietary models and marketplaces. &lt;/p&gt;

&lt;p&gt;As an open alternative to the Visual Studio Marketplace, the Open VSX Registry offers free access to extensions that can be used with any technology or tool that supports them. These include many open source solutions like Eclipse Che and Eclipse Theia, as well as Salesforce Code Builder, Google Cloud Workstations, Gitpod, SAP Business Application Studio and other applications based on Eclipse projects.&lt;/p&gt;

&lt;p&gt;In addition, since the Eclipse Open VSX code itself is open source, any organization can contribute to the registry code and reuse it to create an internally hosted and managed extension registry for their in-house developers to publish and consume VS Code extensions.&lt;/p&gt;

&lt;p&gt;Interested parties can learn more or start using the Open VSX Registry immediately at &lt;a href=&quot;https://open-vsx.org/&quot;&gt;open-vsx.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To learn more about how to get involved with the Open VSX Working Group, visit the &lt;a href=&quot;https://www.eclipse.org/membership/&quot;&gt;Eclipse Foundation membership page&lt;/a&gt; or send email to &lt;a href=&quot;mailto:membership.coordination@eclipse-foundation.org&quot;&gt;membership.coordination@eclipse-foundation.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quotes from Open VSX Working Group Members &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;“We are excited to expand our relationship with the Eclipse Foundation and support the creation of the Open VSX Working Group,” said Thomas DeMeo, Director of Developer Tools, Google Cloud. “At Google Cloud, we want to give our customers options when it comes to working with their preferred IDE, and the Open VSX Registry furthers our ability to deliver on that goal. As both strong supporters and originators of many open source efforts, we support the customer choice and vendor neutrality that the Open VSX Registry aims to deliver.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Huawei&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;“The mission of the CodeArts team at Huawei Cloud is to build the top-notch tools and services for the Huawei developer ecosystem,” said Yawei Wang, Chief Technologist of Developer Tools at Huawei Cloud. “We are committed to helping developers write and ship code faster and easier and keeping teams productive. Meanwhile, we also offer an open platform on which developers can build and publish their own extensions to suit specific business needs. The Open VSX Registry, a vendor-neutral option for IDE extensions, is essential to fulfill our mission and keep our long-standing commitment to developers.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Posit&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;“The mission of Posit is to create open source software for data science, scientific research, and technical communication,” said Tareef Kawaf, President of Posit Software, PBC. “We invest heavily in open source development, education, and the community with the goal of continuing to serve knowledge creators as a 100 year company. We are happy to support the Open VSX Registry’s mission of maintaining a vendor-neutral platform for open source licensed community and professional IDE extensions.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Salesforce&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;“Salesforce is excited to join the Open VSX Working Group to support the continued growth of an open ecosystem for Visual Studio Code extensions,” said Dan Fernandez, Vice President, Developer Services at Salesforce. “We also support the Open VSX Registry with built-in access from Salesforce Code Builder, a modern, web-based development environment tailored for Salesforce development. Our official Salesforce extensions are published to open-vsx.org to allow developers to work how they want, where they want.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Siemens&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;“We at Siemens are dedicated to consistently improving our automation software offerings to meet the evolving needs of automation software engineers seeking innovation and efficiency,” said Johannes Birkenstock and Jacob Hilsebein, Software Developers at Siemens. “We deeply appreciate the collaborative efforts of our partners and communities, recognising their pivotal role in fostering open and flexible toolchains. Being a part of the Eclipse Foundation's Open VSX Working Group allows us to empower automation software engineers by providing them with the tools they love to use.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STMicroelectronics&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;“As the world’s leading supplier of general-purpose microcontrollers, ST continues to focus its embedded tools and software efforts on features and capabilities that help developers innovate more and achieve faster,” said Ricardo De-Sa-Earp, Executive Vice President, General-Purpose Microcontrollers, STMicroelectronics. “We recognize that partners and community contributions are key to building and enhancing the most comprehensive ecosystem around our products and see the Eclipse Open VSX project as a promising initiative to enlarge the possibilities offered to embedded developers even more.“&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;About the Eclipse Foundation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Eclipse Foundation provides our global community of individuals and organisations with a mature, scalable, and business-friendly environment for open source software collaboration and innovation. The Foundation is home to the Eclipse IDE, Jakarta EE, and over 400 open source projects, including runtimes, tools, and frameworks for cloud and edge applications, IoT, AI, automotive, systems engineering, distributed ledger technologies, open processor designs, and many others. The Eclipse Foundation is an international non-profit association supported by over 330 members, including industry leaders who value open source as a key enabler for their business strategies. To learn more, follow us on Twitter&lt;a href=&quot;https://twitter.com/EclipseFdn&quot;&gt; @EclipseFdn&lt;/a&gt;,&lt;a href=&quot;https://linkedin.com/company/eclipse-foundation&quot;&gt; LinkedIn&lt;/a&gt; or visit&lt;a href=&quot;http://eclipse.org&quot;&gt; eclipse.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Third-party trademarks mentioned are the property of their respective owners.&lt;/p&gt;

&lt;p&gt;###&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Media contacts:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;Schwartz Public Relations for the Eclipse Foundation, AISBL&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Gloria Huppert / Franziska Wenzl&lt;/p&gt;

&lt;p&gt;Sendlinger Straße 42A&lt;/p&gt;

&lt;p&gt;80331 Munich&lt;/p&gt;

&lt;p&gt;EclipseFoundation@schwartzpr.de&lt;/p&gt;

&lt;p&gt;+49 (89) 211 871 – 70 / -58&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;Nichols Communications for the Eclipse Foundation, AISBL&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Jay Nichols&lt;/p&gt;

&lt;p&gt;jay@nicholscomm.com&lt;/p&gt;

&lt;p&gt;+1 408-772-1551&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;514 Media Ltd for the Eclipse Foundation, AISBL (France, Italy, Spain)&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Benoit Simoneau&lt;/p&gt;

&lt;p&gt;benoit@514-media.com&lt;/p&gt;

&lt;p&gt;M: +44 (0) 7891 920 370&lt;/p&gt;</description>
	<pubDate>Mon, 18 Sep 2023 18:42:28 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Foundation Publishes Results of Eclipse JKube Security Audit</title>
	<guid isPermaLink="true">https://newsroom.eclipse.org/39682</guid>
	<link>https://newsroom.eclipse.org/39682</link>
	<description>&lt;p&gt;This audit included a documentation review, static code review and manual review, which uncovered two findings that have been addressed by the JKube team through container configuration improvements.&lt;/p&gt;</description>
	<pubDate>Mon, 18 Sep 2023 18:42:28 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse IDE 2023-09 Is Now Available</title>
	<guid isPermaLink="true">https://newsroom.eclipse.org/39680</guid>
	<link>https://newsroom.eclipse.org/39680</link>
	<description>&lt;p&gt;Featuring improved plug-in &amp;amp; development tooling and several other new features, the latest edition of the Eclipse IDE delivers what you need to rapidly innovate.  &lt;/p&gt;</description>
	<pubDate>Mon, 18 Sep 2023 18:42:28 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: The Eclipse Foundation Releases Results of the 2023 Cloud Developer Survey</title>
	<guid isPermaLink="true">https://newsroom.eclipse.org/39656</guid>
	<link>https://newsroom.eclipse.org/39656</link>
	<description>&lt;p&gt;&lt;strong&gt;BRUSSELS – August 29, 2023 – &lt;/strong&gt;&lt;a href=&quot;https://www.eclipse.org/org/foundation/&quot; rel=&quot;nofollow&quot;&gt;The Eclipse Foundation&lt;/a&gt;, one of the world’s largest open source foundations, along with the &lt;a href=&quot;https://ecdtools.eclipse.org/&quot; rel=&quot;nofollow&quot;&gt;Eclipse Cloud DevTools Working Group&lt;/a&gt;, today announced the availability of the 2023 Cloud Developer Survey Report. This year’s Cloud Developer Survey results are based on an online survey of 534 cloud developers and software professionals conducted from November 21, 2022 to January 13, 2023. The survey’s objective is to gain a better understanding of the cloud-based software development ecosystem by identifying the requirements, priorities, and challenges faced by organizations leveraging a cloud-based development model, including those based on open source technologies. &lt;/p&gt;
&lt;p&gt;“Cloud-based software developer tools are experiencing significant momentum as developer teams around the world continue to shift work to cloud native architectures. Our research has shown the majority of these developers not only leverage open source technologies but are increasingly looking to solutions governed by an open source software foundation,” said Mike Milinkovich, executive director of the Eclipse Foundation. “This demonstrates that there is solid traction for open source cloud development tools. Moreover, in an increasingly crowded market, Eclipse Foundation projects like Eclipse Open VSX, Eclipse Theia, and Eclipse Che are making an enormous impact by providing the community-led open source technologies that developers need.”&lt;/p&gt;
&lt;p&gt;Survey participants represent a broad set of industries, organizations, and job functions. Some of the top conclusions drawn from the survey data include:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Open source is attractive to developers, with 74% saying they would like to see their companies invest more into OSS. &lt;/strong&gt;Developers prefer open source because it allows them to 1) focus on developing features that matter to their organizations; 2) plug into their existing environments; and 3) customize their tools.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cloud native applications are becoming increasingly mission-critical. &lt;/strong&gt;Migration to the cloud continues, with 35% reporting their company’s most important applications are now cloud native. Only 13% of participants say their company has no cloud migration plans for important on-premise applications.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Developers are increasingly leaning towards open source technologies that are governed by an open source foundation. &lt;/strong&gt;While developers are not necessarily driving the business decisions, 36% say they would prefer working with projects that are foundation-supported. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Overall, developers like the tools they use and spend significant time customizing them, but would consider switching to other cloud-based options under the right conditions.&lt;/strong&gt; Motivators include: a performance boost, tight integration with cloud technologies, ease of setup/configuration, and a high level of security.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;There is a disconnect between open source software consumption and participation. &lt;/strong&gt;56% of respondents use open source software, with only 38% being members of open source foundations and 31% contributing to open source projects. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Developers see opportunities for growth around AI/ML and edge.&lt;/strong&gt; Developers are generally excited about experimenting with new technologies. Their use of AI/ML is increasing, with much of it happening at the edge.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In addition to these findings, the survey report provides detailed key takeaways and recommendations for cloud developers, employers, and other ecosystem participants. The 2023 Cloud Developer Survey Report is now available to all interested parties and can be &lt;a href=&quot;https://outreach.eclipse.foundation/cloud-developer-survey-2023&quot; rel=&quot;nofollow&quot;&gt;downloaded for free here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To learn more about getting involved with the Eclipse Cloud DevTools Working Group, please visit us at &lt;a href=&quot;https://ecdtools.eclipse.org/&quot; rel=&quot;nofollow&quot;&gt;ecdtools.eclipse.org&lt;/a&gt;, or email us at &lt;a href=&quot;mailto:membership@eclipse.org&quot; rel=&quot;nofollow&quot;&gt;membership@eclipse.org&lt;/a&gt;. Developers and other interested parties can also join the Cloud DevTools Working Group mailing list to stay informed about working group projects and progress. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;About the Eclipse Foundation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Eclipse Foundation provides our global community of individuals and organizations with a mature, scalable, and business-friendly environment for open source software collaboration and innovation. The Foundation is home to the Eclipse IDE, Jakarta EE, and over 425 open source projects, including runtimes, tools, and frameworks for cloud and edge applications, IoT, AI, automotive, systems engineering, distributed ledger technologies, open processor designs, and many others. The Eclipse Foundation is an international non-profit association supported by over 330 members, including industry leaders who value open source as a key enabler for their business strategies. To learn more, follow us on social media &lt;a href=&quot;https://twitter.com/EclipseFdn&quot; rel=&quot;nofollow&quot;&gt;@EclipseFdn&lt;/a&gt;,&lt;a href=&quot;https://linkedin.com/company/eclipse-foundation&quot; rel=&quot;nofollow&quot;&gt; LinkedIn&lt;/a&gt;, or visit&lt;a href=&quot;http://eclipse.org&quot; rel=&quot;nofollow&quot;&gt; eclipse.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Third-party trademarks mentioned are the property of their respective owners.&lt;/p&gt;
&lt;p class=&quot;text-align-center&quot;&gt;###&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Media contacts:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;u&gt;Schwartz Public Relations for the Eclipse Foundation, AISBL (Germany)&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;Stephanie Brüls / Susanne Pawlik&lt;/p&gt;
&lt;p&gt;Sendlinger Straße 42A&lt;/p&gt;
&lt;p&gt;80331 Munich&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;mailto:EclipseFoundation@schwartzpr.de&quot; rel=&quot;nofollow&quot;&gt;EclipseFoundation@schwartzpr.de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;+49 (89) 211 871 – 64 / -35&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;u&gt;Nichols Communications for the Eclipse Foundation, AISBL&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;Jay Nichols&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;mailto:jay@nicholscomm.com&quot; rel=&quot;nofollow&quot;&gt;jay@nicholscomm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;+1 408-772-1551&lt;/p&gt;
&lt;p&gt;514 Media Ltd for the Eclipse Foundation, AISBL (France, Italy, Spain)&lt;/p&gt;
&lt;p&gt;Benoit Simoneau&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;mailto:benoit@514-media.com&quot; rel=&quot;nofollow&quot;&gt;benoit@514-media.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;M: +44 (0) 7891 920 370&lt;/p&gt;</description>
	<pubDate>Mon, 18 Sep 2023 18:42:28 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: The Eclipse Foundation publishes its study about Open Services Cloud</title>
	<guid isPermaLink="true">https://newsroom.eclipse.org/39468</guid>
	<link>https://newsroom.eclipse.org/39468</link>
	<description>&lt;p&gt;&lt;strong&gt;BRUSSELS, Belgium – April 24th, 2023 – &lt;/strong&gt;The Eclipse Foundation, one of the world’s largest open source software foundations, today published its study about Cloud Interoperability to foster the European Digital Market. The report provides an analysis of the current market of the European cloud services ecosystem and perspectives:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;To unlock the cloud industry,&lt;/li&gt;
	&lt;li&gt;To ease current digital market limitations, &lt;/li&gt;
	&lt;li&gt;To simplify the complexity behind managed cloud services usage, &lt;/li&gt;
	&lt;li&gt;And to open new opportunities for all: users, developers, and service providers. &lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;As part of this publication, the Eclipse Foundation will be hosting a launch event on April 25th at 1:30 PM CEST in Brussels, open to all parties interested in contributing to an open cloud ecosystem. Registration and more information on this event can be found here: &lt;a href=&quot;https://events.eclipse.org/2023/unlockthecloud/&quot;&gt;https://events.eclipse.org/2023/unlockthecloud/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;“EU participants are grossly underrepresented in today's cloud ecosystem. This new open source industry collaboration will level the playing field and enable Europe to not only fully embrace the cloud, but build its own innovative industry,” said Mike Milinkovich, executive director, the Eclipse Foundation. “As one of the critical ingredients to growth for multiple industries underpinning the EU’s economy, growing the region’s leadership in the cloud ecosystem will be the foundation for the future economic prosperity of Europe.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Building cloud interoperability with the Open Services Cloud&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Having reached nearly €190B in 2022, the European cloud services market is growing rapidly. It drives many of the 14 strategic industrial ecosystems defined in the 2021 &lt;a href=&quot;https://commission.europa.eu/strategy-and-policy/priorities-2019-2024/europe-fit-digital-age/european-industrial-strategy_en#:~:text=Europe%20is%20embarking%20on%20a,we%20enter%20this%20new%20age.&quot;&gt;EU industrial strategy&lt;/a&gt; and is forecasted to grow at an annual rate of 13% over the next decade.&lt;/p&gt;

&lt;p&gt;Despite this compelling growth, the European cloud ecosystem is still limited in its ability to expand. To increase balance and boost cloud consumer purchasing power in the European market, the study introduces how Open Services Cloud platform brings three core innovations to streamline the process of using multiple clouds: a descriptive configuration language, a management portal, and a portable services and data solution. &lt;/p&gt;

&lt;p&gt;The Open Services Cloud levels the playing field between cloud users and CSPs and ISVs. Especially beneficial to smaller businesses and start-ups, the Open Services Cloud opens the door for the emergence of a stronger European ecosystem of cloud service industry.&lt;/p&gt;

&lt;p&gt;On April 25th, we will be hosting an in-person event in Brussels where you will learn from industry leaders, discover the results of our new study on cloud interoperability, and find out more about where the EU Data Act and the Digital Markets Act are heading when it comes to European cloud services. Register &lt;a href=&quot;https://events.eclipse.org/2023/unlockthecloud/&quot;&gt;here&lt;/a&gt; to participate. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;About the Eclipse Foundation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Eclipse Foundation provides our global community of individuals and organizations with a mature, scalable, and business-friendly environment for open source software collaboration and innovation. The Foundation is home to the Eclipse IDE, Jakarta EE, and over 400 open source projects, including runtimes, tools, and frameworks for cloud and edge applications, IoT, AI, automotive, systems engineering, distributed ledger technologies, open processor designs, and many others. The Eclipse Foundation is an international non-profit association supported by over 330 members, including industry leaders who value open source as a key enabler for their business strategies. To learn more, follow us on Twitter&lt;a href=&quot;https://twitter.com/EclipseFdn&quot;&gt; @EclipseFdn&lt;/a&gt;,&lt;a href=&quot;https://linkedin.com/company/eclipse-foundation&quot;&gt; LinkedIn&lt;/a&gt; or visit&lt;a href=&quot;http://eclipse.org&quot;&gt; eclipse.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Third-party trademarks mentioned are the property of their respective owners.&lt;/p&gt;

&lt;p&gt;###&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Media contacts:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;u&gt;Schwartz Public Relations for the Eclipse Foundation, AISBL&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;Stephanie Brüls / Susanne Pawlik&lt;/p&gt;

&lt;p&gt;Sendlinger Straße 42A&lt;/p&gt;

&lt;p&gt;80331 Munich&lt;/p&gt;

&lt;p&gt;EclipseFoundation@schwartzpr.de&lt;/p&gt;

&lt;p&gt;+49 (89) 211 871 – 64 / -35&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;u&gt;Nichols Communications for the Eclipse Foundation, AISBL&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;Jay Nichols&lt;/p&gt;

&lt;p&gt;jay@nicholscomm.com&lt;/p&gt;

&lt;p&gt;+1 408-772-1551&lt;/p&gt;

&lt;p&gt;514 Media Ltd for the Eclipse Foundation, AISBL (France, Italy, Spain)&lt;/p&gt;

&lt;p&gt;Benoit Simoneau&lt;/p&gt;

&lt;p&gt;benoit@514-media.com&lt;/p&gt;

&lt;p&gt;M: +44 (0) 7891 920 370&lt;/p&gt;</description>
	<pubDate>Mon, 18 Sep 2023 18:42:28 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: Sweating the small stuff in Java</title>
	<guid isPermaLink="false">https://medium.com/p/dbd695166d13</guid>
	<link>https://betterprogramming.pub/sweating-the-small-stuff-in-java-dbd695166d13?source=rss-df39b86e9f04------2</link>
	<description>&lt;h4&gt;The story of small FixedSizeCollection types in Eclipse Collections&lt;/h4&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/0*_WWnyZdCQaK4261O&quot; /&gt;&lt;figcaption&gt;Photo by &lt;a href=&quot;https://unsplash.com/es/@edwardhowellphotography?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Edward Howell&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Sometimes, You’re on Your Own&lt;/h3&gt;&lt;p&gt;Every once in a while, we are required as application developers to roll up our sleeves and find ways to squeeze performance or memory savings beyond the built-in capabilities of our language and libraries.&lt;/p&gt;&lt;p&gt;I started programming professionally in DOS/Clipper in the late 1980s when 640K was the memory limit, so I was accustomed to memory-constrained programming. I wasn’t used to anything else until I started programming in Smalltalk, where I had access to hundreds of megabytes of memory.&lt;/p&gt;&lt;p&gt;Towards the end of the 1990s, I worked in Smalltalk, loading decent-sized object graphs into memory and doing things at blazing memory speed. Processes that used to run in minutes in DOS/Clipper could be completed in hundreds of milliseconds. I was working with a 32-bit memory constraint, but I never seemed to get close to the edge of the RAM limit to worry about running out of memory with the domain I was working in.&lt;/p&gt;&lt;p&gt;This was a good progress. Memory was plentiful and fast. Life as a programmer was good. I hadn’t yet encountered a big data application. That would happen soon enough.&lt;/p&gt;&lt;h4&gt;Big memory meet bigger data&lt;/h4&gt;&lt;p&gt;In 2004, I worked on a Java application designed and built using an in-memory caching architecture. I experienced firsthand the saying, “you can’t fit ten pounds of $%*# in a five-pound bag.”. I was still working within the confines of 32-bit software imposed memory limit. The hardware had already progressed beyond this and offered tens of gigs of RAM, but it was inaccessible to me now. A &lt;a href=&quot;https://www.oracle.com/java/technologies/hotspotfaq.html&quot;&gt;64-bit version of Java was available with the JDK 1.4.0 release&lt;/a&gt;, but I didn’t have access yet.&lt;/p&gt;&lt;p&gt;My choices at the time were simple.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Abandon the architecture and start with something more scalable but with a different performance profile.&lt;/li&gt;&lt;li&gt;Wait for a 64-bit JVM.&lt;/li&gt;&lt;li&gt;Figure out how to make ten pounds of $%*# fit in a five-pound bag.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;I went with option number 3. By measuring, executing, and repeating small memory efficiency tricks, I could make the application work. I did things that never would have occurred to me to do in the previous 15 years of my programming career. I felt a bit like Mark Watney (Matt Damon) from the movie &lt;em&gt;The Martian.&lt;/em&gt;&lt;/p&gt;&lt;blockquote&gt;In the face of overwhelming odds, I’m left with only one option. I’m gonna have to science the $%*# out of this.&lt;/blockquote&gt;&lt;blockquote&gt;— Mark Watney, The Martian&lt;/blockquote&gt;&lt;h3&gt;Step 0: Find Tools To Measure Memory&lt;/h3&gt;&lt;p&gt;In 2004, I used jmap -histo &amp;lt;pid&amp;gt; to figure out where I can save memory. Jmap is a command line tool in the JDK for analyzing Java heaps. It still works fine in OpenJDK 20 today. Jmap is a blunt tool that can help you spot glaring issues on the Java heap and measure the overall impact of any changes you make.&lt;/p&gt;&lt;p&gt;Today, I use &lt;a href=&quot;https://github.com/openjdk/jol&quot;&gt;Java Object Layout&lt;/a&gt; (JOL) from the OpenJDK tools for measuring the memory cost of specific objects. JOL gives a more precise and targeted set of information than jmap. There is a &lt;a href=&quot;https://plugins.jetbrains.com/plugin/10953-jol-java-object-layout&quot;&gt;JOL plugin for IntelliJ&lt;/a&gt; available as well. I have not used the IntelliJ plugin, but some folks I know have said positive things about it.&lt;/p&gt;&lt;p&gt;Once you have JOL included as a Maven dependency, you can use GraphLayout to look at the memory cost and layout of particular instances of objects programmatically. You will see some code examples below that use GraphLayout.&lt;/p&gt;&lt;h3&gt;Step 1: Understand Your Data&lt;/h3&gt;&lt;p&gt;I had a large static object graph loaded one time up front and cached, and then multiple calculated object graphs created from that data graph and also cached that was explorable in either direction. Every node in the graph had a List of children and a List of parents. The requirement I needed to satisfy was to store two calculated graphs in memory to be explored on demand by the users.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Total memory required for both data and calculations— ~4-6 GB&lt;/li&gt;&lt;li&gt;Total memory needed for application to run — ~7–8 GB&lt;/li&gt;&lt;li&gt;Available RAM on Solaris with 32-bit JVM- ~4 GB&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I started looking at the heap output using jmap -histo &amp;lt;pid&amp;gt; . &lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/specs/man/jmap.html&quot;&gt;Jmap&lt;/a&gt; is a simple but effective tool for looking at and starting to understand what is occupying a Java heap. I used jmap for quite a few years, helping folks find waste and trim the fat out of their Java heaps. I once saw a Java heap with two million Boolean objects in it. Yeah, that kind of stuff can happen when you’re not looking. I convinced the team with the two million Boolean objects in their heap that they didn’t need that kind of fault tolerance for boolean and would survive just as well with one instance of each of true and false.&lt;/p&gt;&lt;p&gt;I digress.&lt;/p&gt;&lt;p&gt;In the application I was working on, I saw an extremely large number of List, Set and Map instances in the heap output from jmap, along with the corresponding array instances that occupied the data structures.&lt;/p&gt;&lt;p&gt;What I didn’t know right away was the size of the List, Set and Map instances. So, I dug around in the code. I saw ArrayList being created in multiple places using a default constructor. Anyone who has programmed with Java before JDK 7_u40 might remember when ArrayList eagerly initialized an empty array of size 10.&lt;/p&gt;&lt;p&gt;When I was working on this application, we were using JDK 4. This was seven years before Java 7 was released. I didn’t know then, but I would later help validate the importance of the change to ArrayList that was introduced to lazy initialize the backing array of size 10. The benefit of this for all Java developers on the planet for the rest of the time is that empty ArrayList instances stay empty. This has a significant and lasting impact on the total memory savings of Java applications globally forever. Win!&lt;/p&gt;&lt;p&gt;When I realized all of the List instances would be backed by default sized arrays, my first thought was to initialize them all using new ArrayList(0). This did have a noticeable benefit right away. Unfortunately, this wasn’t enough savings, and I would go on to discover that most of the List, Set, and Map instances in a heap were of sizes zero through six. I kept investigating where I could save memory.&lt;/p&gt;&lt;h3&gt;Step 2: Understanding Array Instances&lt;/h3&gt;&lt;p&gt;Arrays are used in a lot of places in Java. Lists have them. Maps have them. Strings have them.&lt;/p&gt;&lt;p&gt;Every time you say new with an empty array, you get back a new empty array. Each new empty array is effectively immutable and equal to every other empty array of the same type because it has no elements and is the same size. Empty array sharing is an important optimization I discovered later.&lt;/p&gt;&lt;p&gt;What I couldn’t easily tell is how many of the array instances on the heap were empty. I had to guess. What I started with was adding an EmptyList class that I could use anywhere I wanted an empty List. This would result in reasonable savings for empty lists in the heap. In Java 5, Collections.emptyList() would be added, which returns a type-safe immutable instance. Unfortunately, I didn’t know this and didn’t have time to wait for Java 5.&lt;/p&gt;&lt;h3&gt;Step 3: Optimize for Empty Lists&lt;/h3&gt;&lt;p&gt;I created an EmptyList that was a singleton and initialized all Lists to this singleton instance. Today, in Eclipse Collections, there is ImmutableEmptyList and EmptyList . EmptyList was created first and implements an interface called FixedSizeList, which extends MutableList and java.util.List. ImmutableEmptyList extends both ImmutableList and java.util.List.&lt;/p&gt;&lt;p&gt;Using EmptyList would necessarily complicate the application code because there is no way to add to a fixed-size empty list. Wherever I used EmptyList, I had to add code that tested first whether it was an empty List (i.e., size == 0) and, if so, created a new List if I needed to add to it. Then I had to set that new List instance into the variable that pointed to the EmptyList. This increased the cost of testing and implementing all of the methods where List instances were created and grown to make sure bugs weren’t introduced. The cost was worth the benefit.&lt;/p&gt;&lt;h3&gt;Step 4: Optimize for Fixed Size Lists w/ Sizes 1–6&lt;/h3&gt;&lt;p&gt;Creating ArrayList with an initial size of zero, provided some memory savings benefit, but I was still seeing millions of instances of object arrays due to what I guessed were List instances in size one to ten range. I created SingletonList and tried it out and saw some great benefits.&lt;/p&gt;&lt;p&gt;SingletonList holds onto a single Object reference and has no backing array. Then I introduced DoubletonList and saw some more benefits. Then came TripletonList, QuadrupletonList, QuintupletonList and SextupletonList. This is as far as I went in 2004. The savings I saw with all of these changes were dramatic in the dynamic calculation object graph. This was because the design of the object graph was bi-directional, and every node in the graph knew its parents and children. Most nodes in the graph had one parent and most often had one to three children.&lt;/p&gt;&lt;p&gt;The following chart shows the potential savings even today comparing a default sized ArrayList (new ArrayList()), a zero initial-sized ArrayList (new ArrayList(0)), and FixedSizeList instances created using Lists.fixedSize.of() from Eclipse Collections.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*uLrijxhCOSfZXAnNoZL1aQ.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;I wrote the following test using OpenJDK 20 with JOL version 0.17 to print out all the memory sizes in the chart. Here’s the code I used:&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void fixedSizeListsToSizeSix()&lt;br /&gt;{&lt;br /&gt;    ArrayList arrayList = new ArrayList();&lt;br /&gt;    System.out.println(&quot;ArrayList Empty: &quot; + &lt;br /&gt;      GraphLayout.parseInstance(arrayList).totalSize());&lt;br /&gt;    arrayList.add(null);&lt;br /&gt;    System.out.println(&quot;ArrayList 1: &quot; + &lt;br /&gt;      GraphLayout.parseInstance(arrayList).totalSize());&lt;br /&gt;    arrayList.add(null);&lt;br /&gt;    System.out.println(&quot;ArrayList 2: &quot; + &lt;br /&gt;        GraphLayout.parseInstance(arrayList).totalSize());&lt;br /&gt;    arrayList.add(null);&lt;br /&gt;    System.out.println(&quot;ArrayList 3: &quot; + &lt;br /&gt;        GraphLayout.parseInstance(arrayList).totalSize());&lt;br /&gt;    arrayList.add(null);&lt;br /&gt;    System.out.println(&quot;ArrayList 4: &quot; + &lt;br /&gt;        GraphLayout.parseInstance(arrayList).totalSize());&lt;br /&gt;    arrayList.add(null);&lt;br /&gt;    System.out.println(&quot;ArrayList 5: &quot; + &lt;br /&gt;        GraphLayout.parseInstance(arrayList).totalSize());&lt;br /&gt;    arrayList.add(null);&lt;br /&gt;    System.out.println(&quot;ArrayList 6: &quot; + &lt;br /&gt;        GraphLayout.parseInstance(arrayList).totalSize());&lt;br /&gt;&lt;br /&gt;    arrayList = new ArrayList(0);&lt;br /&gt;    System.out.println(&quot;ArrayList 0: &quot; + &lt;br /&gt;        GraphLayout.parseInstance(arrayList).totalSize());&lt;br /&gt;    arrayList.add(null);&lt;br /&gt;    System.out.println(&quot;ArrayList0 1: &quot; + &lt;br /&gt;        GraphLayout.parseInstance(arrayList).totalSize());&lt;br /&gt;    arrayList = new ArrayList(0);&lt;br /&gt;    arrayList.add(null);&lt;br /&gt;    arrayList.add(null);&lt;br /&gt;    System.out.println(&quot;ArrayList0 2: &quot; + &lt;br /&gt;        GraphLayout.parseInstance(arrayList).totalSize());&lt;br /&gt;    arrayList = new ArrayList(0);&lt;br /&gt;    arrayList.add(null);&lt;br /&gt;    arrayList.add(null);&lt;br /&gt;    arrayList.add(null);&lt;br /&gt;    System.out.println(&quot;ArrayList0 3: &quot; + &lt;br /&gt;        GraphLayout.parseInstance(arrayList).totalSize());&lt;br /&gt;    arrayList = new ArrayList(0);&lt;br /&gt;    arrayList.add(null);&lt;br /&gt;    arrayList.add(null);&lt;br /&gt;    arrayList.add(null);&lt;br /&gt;    arrayList.add(null);&lt;br /&gt;    System.out.println(&quot;ArrayList0 4: &quot; + &lt;br /&gt;        GraphLayout.parseInstance(arrayList).totalSize());&lt;br /&gt;    arrayList = new ArrayList(0);&lt;br /&gt;    arrayList.add(null);&lt;br /&gt;    arrayList.add(null);&lt;br /&gt;    arrayList.add(null);&lt;br /&gt;    arrayList.add(null);&lt;br /&gt;    arrayList.add(null);&lt;br /&gt;    System.out.println(&quot;ArrayList0 5: &quot; + &lt;br /&gt;        GraphLayout.parseInstance(arrayList).totalSize());&lt;br /&gt;    arrayList = new ArrayList(0);&lt;br /&gt;    arrayList.add(null);&lt;br /&gt;    arrayList.add(null);&lt;br /&gt;    arrayList.add(null);&lt;br /&gt;    arrayList.add(null);&lt;br /&gt;    arrayList.add(null);&lt;br /&gt;    arrayList.add(null);&lt;br /&gt;    System.out.println(&quot;ArrayList0 6: &quot; + &lt;br /&gt;        GraphLayout.parseInstance(arrayList).totalSize());&lt;br /&gt;&lt;br /&gt;    List list = Lists.fixedSize.empty();&lt;br /&gt;    System.out.println(&quot;FixedSizeList Empty: &quot; + &lt;br /&gt;        GraphLayout.parseInstance(list).totalSize());&lt;br /&gt;    list = Lists.fixedSize.of((Object)null);&lt;br /&gt;    System.out.println(&quot;FixedSizeList 1: &quot; + &lt;br /&gt;        GraphLayout.parseInstance(list).totalSize());&lt;br /&gt;    list = Lists.fixedSize.of(null, null);;&lt;br /&gt;    System.out.println(&quot;FixedSizeList 2: &quot; + &lt;br /&gt;        GraphLayout.parseInstance(list).totalSize());&lt;br /&gt;    list = Lists.fixedSize.of(null, null, null);&lt;br /&gt;    System.out.println(&quot;FixedSizeList 3: &quot; + &lt;br /&gt;        GraphLayout.parseInstance(list).totalSize());&lt;br /&gt;    list = Lists.fixedSize.of(null, null, null, null);&lt;br /&gt;    System.out.println(&quot;FixedSizeList 4: &quot; + &lt;br /&gt;        GraphLayout.parseInstance(list).totalSize());&lt;br /&gt;    list = Lists.fixedSize.of(null, null, null, null, null);&lt;br /&gt;    System.out.println(&quot;FixedSizeList 5: &quot; + &lt;br /&gt;        GraphLayout.parseInstance(list).totalSize());&lt;br /&gt;    list = Lists.fixedSize.of(null, null, null, null, null, null);&lt;br /&gt;    System.out.println(&quot;FixedSizeList 6: &quot; + &lt;br /&gt;        GraphLayout.parseInstance(list).totalSize());&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;In these examples, I used null as the elements, so the memory cost of the lists was the only thing on display. Savings add up quickly here when you have millions of EmptyList, SingletonList, DoubletonList, and TripletonList instances. There were smaller numbers of QuadrupletonList, QuintupletonList and SextupletonList, but enough that the memory savings mattered.&lt;/p&gt;&lt;h3&gt;Step 5: Optimize for Fixed Size Sets w/ Sizes 0–4&lt;/h3&gt;&lt;p&gt;Nothing will prepare you when you discover how terrible the memory footprint of the java.util.HashSet class is. HashSet is a suboptimal class that can grow quietly in your heap if you’re not careful to use it sparingly and dispose of instances when you are done using them. HashSet performs very well for most use cases where a Set is required, but the cost is unnecessarily high. This cost is the product of using delegation to a HashMap inside of HashSet.&lt;/p&gt;&lt;p&gt;The following chart shows the memory savings today comparing a default sized HashSet (new HashSet()), a zero initial-sized HashSet (new HashSet (0)), and FixedSizeSet instances created using Sets.fixedSize.of() from Eclipse Collections.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*_UrviXa0nNaOwOEL7qh4BA.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;I wrote the following test using OpenJDK 20 with JOL version 0.17 to print out all the memory sizes in the chart. Here’s the code I used:&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void fixedSizeSetsToSizeFour()&lt;br /&gt;{&lt;br /&gt;    HashSet hashSet = new HashSet();&lt;br /&gt;    System.out.println(&quot;HashSet Empty: &quot; + &lt;br /&gt;            GraphLayout.parseInstance(hashSet).totalSize());&lt;br /&gt;    hashSet.add(new Object());&lt;br /&gt;    System.out.println(&quot;HashSet 1: &quot; + &lt;br /&gt;            GraphLayout.parseInstance(hashSet).totalSize());&lt;br /&gt;    hashSet.add(new Object());&lt;br /&gt;    System.out.println(&quot;HashSet 2: &quot; + &lt;br /&gt;            GraphLayout.parseInstance(hashSet).totalSize());&lt;br /&gt;    hashSet.add(new Object());&lt;br /&gt;    System.out.println(&quot;HashSet 3: &quot; + &lt;br /&gt;            GraphLayout.parseInstance(hashSet).totalSize());&lt;br /&gt;    hashSet.add(new Object());&lt;br /&gt;    System.out.println(&quot;HashSet 4: &quot; + &lt;br /&gt;            GraphLayout.parseInstance(hashSet).totalSize());&lt;br /&gt;&lt;br /&gt;    hashSet = new HashSet(0);&lt;br /&gt;    System.out.println(&quot;HashSet 0: &quot; + &lt;br /&gt;            GraphLayout.parseInstance(hashSet).totalSize());&lt;br /&gt;    hashSet.add(new Object());&lt;br /&gt;    System.out.println(&quot;HashSet0 1: &quot; + &lt;br /&gt;            GraphLayout.parseInstance(hashSet).totalSize());&lt;br /&gt;    hashSet = new HashSet(0);&lt;br /&gt;    hashSet.add(new Object());&lt;br /&gt;    hashSet.add(new Object());&lt;br /&gt;    System.out.println(&quot;HashSet0 2: &quot; + &lt;br /&gt;            GraphLayout.parseInstance(hashSet).totalSize());&lt;br /&gt;    hashSet = new HashSet(0);&lt;br /&gt;    hashSet.add(new Object());&lt;br /&gt;    hashSet.add(new Object());&lt;br /&gt;    hashSet.add(new Object());&lt;br /&gt;    System.out.println(&quot;HashSet0 3: &quot; + &lt;br /&gt;            GraphLayout.parseInstance(hashSet).totalSize());&lt;br /&gt;    hashSet = new HashSet(0);&lt;br /&gt;    hashSet.add(new Object());&lt;br /&gt;    hashSet.add(new Object());&lt;br /&gt;    hashSet.add(new Object());&lt;br /&gt;    hashSet.add(new Object());&lt;br /&gt;    System.out.println(&quot;HashSet0 4: &quot; + &lt;br /&gt;            GraphLayout.parseInstance(hashSet).totalSize());&lt;br /&gt;&lt;br /&gt;    Set set = Sets.fixedSize.empty();&lt;br /&gt;    System.out.println(&quot;FixedSizeSet Empty: &quot; + &lt;br /&gt;            GraphLayout.parseInstance(set).totalSize());&lt;br /&gt;    set = Sets.fixedSize.of(new Object());&lt;br /&gt;    System.out.println(&quot;FixedSizeSet 1: &quot; + &lt;br /&gt;            GraphLayout.parseInstance(set).totalSize());&lt;br /&gt;    set = Sets.fixedSize.of(new Object(), new Object());;&lt;br /&gt;    System.out.println(&quot;FixedSizeSet 2: &quot; + &lt;br /&gt;            GraphLayout.parseInstance(set).totalSize());&lt;br /&gt;    set = Sets.fixedSize.of(new Object(), new Object(), new Object());&lt;br /&gt;    System.out.println(&quot;FixedSizeSet 3: &quot; + &lt;br /&gt;            GraphLayout.parseInstance(set).totalSize());&lt;br /&gt;    set = Sets.fixedSize.of(new Object(), new Object(), new Object(), new Object());&lt;br /&gt;    System.out.println(&quot;FixedSizeSet 4: &quot; + &lt;br /&gt;            GraphLayout.parseInstance(set).totalSize());&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;With sets, I needed to add data to the sets that would have unique a hashCode and equals combination. If I used null, there only would have been one element in each Set. So there is an extra 16 bytes for each element in the set. Just multiply 16 times the Set size to determine the extra overhead for the elements.&lt;/p&gt;&lt;h3&gt;Step 6 and Beyond&lt;/h3&gt;&lt;p&gt;There were other important lessons over the years I learned about how to save memory. Object Pooling is usually the most beneficial for loading data from external storage (e.g., database) into long-lived objects in memory. Immutable objects like String and LocalDate are good candidates for pooling. You have to understand the makeup of your data and have a decent number of duplicate strings and dates to see the benefit of pooling. I will not go more into object pooling in this article as it is a topic worthy of its own post.&lt;/p&gt;&lt;p&gt;Finally, if you know the lower and upper ranges of your numeric data and that they will be known to stay within those ranges forever, you can also save memory by using smaller integral or float types to store data in long-lived objects in memory. Using byte, short, and int instead of long The alignment and padding in the memory layout can help you fit more into an object. Be careful to widen your type when doing math (e.g., summing or counting) because you may otherwise encounter silent overflow errors.&lt;/p&gt;&lt;p&gt;The JDK is constantly improving in the memory-efficiency and performance, so new help is constantly on the way. The future of Java is looking good.&lt;/p&gt;&lt;h3&gt;No One Has Ever Been Stranded on Mars&lt;/h3&gt;&lt;p&gt;Mark Watney was a character in a movie. The story made a great film with memorable quotes, and that is all. No human that we know has ever been to Mars.&lt;/p&gt;&lt;p&gt;You may have never encountered or even heard of an application that creates millions of small List, Set, and Map instances and holds onto them for a long time in memory. That is maybe until now. I had never seen or heard of an application like this until I started working on one in 2004.&lt;/p&gt;&lt;p&gt;There is one potential gotcha with this small collection memory savings strategy. You might wind up trading off memory for performance. I was faced with the problem of getting an application working. I wasn’t concerned with how fast the calls to methods on the collection classes were or whether there would be &lt;a href=&quot;https://shipilev.net/jvm/anatomy-quarks/16-megamorphic-virtual-calls/&quot;&gt;megamorphic virtual calls&lt;/a&gt; in hot code paths to cause significant slowdowns.&lt;/p&gt;&lt;p&gt;When the application was finally running, it was so fast in memory we didn’t notice any bottlenecks caused by megamorphic virtual calls. If performance and throughput are your biggest concern, I recommend using &lt;a href=&quot;https://github.com/openjdk/jmh&quot;&gt;JMH&lt;/a&gt; or other performance profilers to measure specific hotspots for tuning. I recommend only tuning for performance if you see a specific performance issue. You’ll be in the best position to determine whether memory or performance is the biggest concern for your application.&lt;/p&gt;&lt;p&gt;I hope you never face this kind of memory problem in the applications you work on today. If you encounter this kind of situation in the future (hey, we might see real folks go to Mars one day), you can leverage the knowledge you have gained here to help you address any memory issues you have. All of the small List, Set, and Map implementations exist in Eclipse Collections today. The &lt;a href=&quot;https://stackoverflow.com/questions/49403644/java-list-of-static-method/49528083#49528083&quot;&gt;JDK also has a small immutable List and Set implementations&lt;/a&gt; (List12, ListN, Set12, SetN) that optimize for both throughput and memory. I wish I had access to these classes in the JDK in 2004.&lt;/p&gt;&lt;p&gt;The following chart compares the memory cost of the JDK and Eclipse Collections ImmutableList implementations up to size 11.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*VBD5e9ToT2SBk3cMDxQDQA.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;If you’re stranded on Mars with an application that won’t work and memory savings for small List, Set and Map instances are exactly what you need to help you, then Eclipse Collections might be your best option. When it comes to raw throughput performance with some great memory savings for very small collections, the JDK (after Java 11) may be the best option today. The JDK now offers a memory-efficiency option that it didn’t have in 2004 when I was stuck working on my application on Mars. Progress is a good thing. Your mileage may vary.&lt;/p&gt;&lt;h3&gt;Tracer Bullets in your Java Heap&lt;/h3&gt;&lt;p&gt;There is an additional subtle benefit to having named versions of all of the small List, Set, and Map instances in your Java heap. The named classes show up in both jmap and JOL output. When used, these classes tell you more about the distribution of sizes of your collections in memory. Seeing that you have a large number of ArrayList instances tells you nothing about the size of them.&lt;/p&gt;&lt;p&gt;If we output the following code using JOL, you will see the size distribution of your Lists when using Eclipse Collections ImmutableList implementations. The ImmutableList types are similar to their FixedSizeList counterparts but are hand-optimized to size ten instead of six.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void ecListOfToSizeEleven()&lt;br /&gt;{&lt;br /&gt;    ImmutableList&amp;lt;String&amp;gt;[] array = new ImmutableList[]{&lt;br /&gt;            Lists.immutable.of(),&lt;br /&gt;            Lists.immutable.of(&quot;&quot;),&lt;br /&gt;            Lists.immutable.of(&quot;&quot;, &quot;&quot;),&lt;br /&gt;            Lists.immutable.of(&quot;&quot;, &quot;&quot;, &quot;&quot;),&lt;br /&gt;            Lists.immutable.of(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;),&lt;br /&gt;            Lists.immutable.of(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;),&lt;br /&gt;            Lists.immutable.of(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;),&lt;br /&gt;            Lists.immutable.of(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;),&lt;br /&gt;            Lists.immutable.of(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;),&lt;br /&gt;            Lists.immutable.of(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;),&lt;br /&gt;            Lists.immutable.of(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;),&lt;br /&gt;            Lists.immutable.of(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;)&lt;br /&gt;    };&lt;br /&gt;    Assertions.assertEquals(496L, &lt;br /&gt;            GraphLayout.parseInstance(array).totalSize());&lt;br /&gt;    System.out.println(GraphLayout.parseInstance(array).toFootprint());&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;The following is the output from JOL after calling GraphLayout.parseInstance(array).toFootprint().&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I shortened the package names manually to remove the scroll bar.&lt;/p&gt;&lt;pre&gt;COUNT   AVG   SUM   DESCRIPTION&lt;br /&gt;    1    16    16   [B&lt;br /&gt;    1    64    64   [Ljava.lang.String;&lt;br /&gt;    1    24    24   java.lang.String&lt;br /&gt;    1    16    16   org.ecl.co.impl.list.imm.ImmutableArrayList&lt;br /&gt;    1    56    56   org.ecl.co.impl.list.imm.ImmutableDecapletonList&lt;br /&gt;    1    24    24   org.ecl.co.impl.list.imm.ImmutableDoubletonList&lt;br /&gt;    1    16    16   org.ecl.co.impl.list.imm.ImmutableEmptyList&lt;br /&gt;    1    48    48   org.ecl.co.impl.list.imm.ImmutableNonupletonList&lt;br /&gt;    1    48    48   org.ecl.co.impl.list.imm.ImmutableOctupletonList&lt;br /&gt;    1    32    32   org.ecl.co.impl.list.imm.ImmutableQuadrupletonList&lt;br /&gt;    1    32    32   org.ecl.co.impl.list.imm.ImmutableQuintupletonList&lt;br /&gt;    1    40    40   org.ecl.co.impl.list.imm.ImmutableSeptupletonList&lt;br /&gt;    1    40    40   org.ecl.co.impl.list.imm.ImmutableSextupletonList&lt;br /&gt;    1    16    16   org.ecl.co.impl.list.imm.ImmutableSingletonList&lt;br /&gt;    1    24    24   org.ecl.co.impl.list.imm.ImmutableTripletonList&lt;br /&gt;   15         496   (total)&lt;/pre&gt;&lt;p&gt;Consider the following code and JOL output for the small immutable collections in the JDK to show the difference where class names do not give you as much information.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void jdkListOfToSizeEleven()&lt;br /&gt;{&lt;br /&gt;    List&amp;lt;String&amp;gt;[] array = new List[]{&lt;br /&gt;            List.of(),&lt;br /&gt;            List.of(&quot;&quot;),&lt;br /&gt;            List.of(&quot;&quot;, &quot;&quot;),&lt;br /&gt;            List.of(&quot;&quot;, &quot;&quot;, &quot;&quot;),&lt;br /&gt;            List.of(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;),&lt;br /&gt;            List.of(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;),&lt;br /&gt;            List.of(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;),&lt;br /&gt;            List.of(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;),&lt;br /&gt;            List.of(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;),&lt;br /&gt;            List.of(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;),&lt;br /&gt;            List.of(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;),&lt;br /&gt;            List.of(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;)&lt;br /&gt;    };&lt;br /&gt;    Assertions.assertEquals(776L, &lt;br /&gt;            GraphLayout.parseInstance(array).totalSize());&lt;br /&gt;    System.out.println(GraphLayout.parseInstance(array).toFootprint());&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;JOL Output:&lt;/p&gt;&lt;pre&gt;COUNT   AVG   SUM   DESCRIPTION&lt;br /&gt;    1    16    16   [B&lt;br /&gt;   10    43   432   [Ljava.lang.Object;&lt;br /&gt;    1    16    16   java.lang.Object&lt;br /&gt;    1    24    24   java.lang.String&lt;br /&gt;    2    24    48   java.util.ImmutableCollections$List12&lt;br /&gt;   10    24   240   java.util.ImmutableCollections$ListN&lt;br /&gt;   25         776   (total)&lt;/pre&gt;&lt;p&gt;You’ll notice that there are two instances of List12 and ten instances of ListN. If you know that List12 should actually be read as ListOneTwo and not ListTwelve, you will at least know that all instances have a size of one or two.&lt;/p&gt;&lt;p&gt;In 2004, once we had made the changes to our code using the small FixedSizeCollection implementations, we got immediate feedback on the changes to the size distributions of our small collections any time we looked at jmap -histo &amp;lt;pid&amp;gt;. Changes in code or data could have caused changes in these sizes.&lt;/p&gt;&lt;h3&gt;Best of Luck on Your Journey&lt;/h3&gt;&lt;p&gt;After almost 20 years, I am telling you this story because you can now buy a MacBook Pro with as many cores (12) and as much memory (96gig) as I had access to between 2004–2010 on big Solaris servers. I don’t know if this will result in more applications with large heaps and lots of collections being built now, but I do have to believe it will not result in less.&lt;/p&gt;&lt;p&gt;If you’re heading out for your own Martian application experience soon, remember that there may be solutions available for memory waste issues you might encounter. The JDK is continually improving and finding ways to save memory that were out of reach for me two decades ago. The Core JDK team has prioritized balancing throughput with memory savings, which is great. Eclipse Collections focused primarily on memory savings in the ImmutableCollection implementations, based on my challenging experience in 2004.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://openjdk.org/projects/lilliput/&quot;&gt;Project Lilliput&lt;/a&gt; and &lt;a href=&quot;https://openjdk.org/projects/valhalla/&quot;&gt;Project Valhalla&lt;/a&gt; will be two of the most important changes to the JDK regarding memory savings and performance. Both projects are complementary. If you’ve never heard of these OpenJDK projects, you should check out the links I provided to them above. We are fortunate to have such an amazing language and library as the JDK that continues to evolve after 28 years.&lt;/p&gt;&lt;p&gt;There are two articles from Aleksey Shipilёv I would recommend reading whether or not you find yourself in a dire situation involving memory or performance:&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://shipilev.net/jvm/anatomy-quarks/24-object-alignment/&quot;&gt;JVM Anatomy Quark #24: Object Alignment&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://shipilev.net/blog/2015/black-magic-method-dispatch/&quot;&gt;The Black Magic of (Java) Method Dispatch&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Thank you for reading this story. I hope you find the lessons and information in this story useful in your travels.&lt;/p&gt;&lt;p&gt;Enjoy!&lt;/p&gt;&lt;p&gt;&lt;em&gt;I am the creator of and committer for the &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; OSS project, which is managed at the &lt;/em&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/technology.collections&quot;&gt;&lt;em&gt;Eclipse Foundation&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. Eclipse Collections is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=dbd695166d13&quot; width=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://betterprogramming.pub/sweating-the-small-stuff-in-java-dbd695166d13&quot;&gt;Sweating the small stuff in Java&lt;/a&gt; was originally published in &lt;a href=&quot;https://betterprogramming.pub&quot;&gt;Better Programming&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</description>
	<pubDate>Mon, 18 Sep 2023 04:54:58 +0000</pubDate>
</item>
<item>
	<title>Mikael Barbero: Eclipse Foundation Publishes Results of Eclipse JKube Security Audit</title>
	<guid isPermaLink="true">https://mikael.barbero.tech/blog/post/2023-09-15-eclipse-jkube-security-audit-results/</guid>
	<link>https://mikael.barbero.tech/blog/post/2023-09-15-eclipse-jkube-security-audit-results/</link>
	<description>&lt;p&gt;Today, the Eclipse Foundation released the results of our security audit for &lt;a href=&quot;https://eclipse.dev/jkube/&quot;&gt;Eclipse JKube&lt;/a&gt;, a collection of tools for building Java applications that can be deployed to a cloud environment. Findings from the audit have been addressed in the &lt;a href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-13#kubernetes-security-hardening&quot;&gt;1.13 release&lt;/a&gt; leading to a new feature.&lt;/p&gt;
&lt;p&gt;This audit included a documentation review, static code review and manual review, which uncovered two findings that have been addressed by the JKube team through container configuration improvements.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://eclipse.dev/jkube/&quot;&gt;Eclipse JKube&lt;/a&gt; originated in 2020 as the successor to the Fabric8 Maven plug-in, which was deprecated the same year. Consisting of plug-ins and components for building container images using Docker, Java image builder (Jib), or Source-to-Image (S2I) build strategies, JKube makes it easy to transition Java applications to the cloud by deploying them in Kubernetes.&lt;/p&gt;
&lt;p&gt;By default, JKube’s Kubernetes deployment artifacts did not have many of Kubernetes’ security features enabled. To address the audit’s findings and improve the overall security of JKube’s generated Kubernetes resources, the JKube team introduced a Security Hardening profile in the project’s &lt;a href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-13#kubernetes-security-hardening&quot;&gt;1.13 release&lt;/a&gt;. The profile disables the auto-mounting of the service account token, prevents containers from running in privileged mode, and ensures containers do not allow privilege escalation. Check out the &lt;a href=&quot;https://github.com/trailofbits/publications/blob/master/reviews/2023-05-eclipse-jkube-securityreview.pdf&quot;&gt;full report&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/trailofbits/publications/blob/master/reviews/2023-05-eclipse-jkube-securityreview.pdf&quot;&gt;
&lt;/a&gt;&lt;/p&gt;&lt;figure&gt;&lt;a href=&quot;https://github.com/trailofbits/publications/blob/master/reviews/2023-05-eclipse-jkube-securityreview.pdf&quot;&gt;
&lt;img alt=&quot;&amp;gt;&amp;gt;Full Report&quot; src=&quot;https://mikael.barbero.tech/blog/post/2023-09-15-eclipse-jkube-security-audit-results/report_front.png&quot; /&gt;
&lt;figcaption&gt;&lt;/figcaption&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/trailofbits/publications/blob/master/reviews/2023-05-eclipse-jkube-securityreview.pdf&quot;&gt;Full Report&lt;/a&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;This was our second open source project security audit, and was completed by &lt;a href=&quot;https://www.trailofbits.com/&quot;&gt;Trail of Bits&lt;/a&gt;. Like with the &lt;a href=&quot;https://mikael.barbero.tech/blog/post/2023-07-12-equinox-p2-security-audit-results/&quot;&gt;Equinox p2 security audit&lt;/a&gt;, this initiative was done in partnership with the &lt;a href=&quot;https://ostif.org/&quot;&gt;Open Source Technology Improvement Fund&lt;/a&gt; (OSTIF) and was made possible due to the funding the Eclipse Foundation received from the &lt;a href=&quot;https://openssf.org/community/alpha-omega/&quot;&gt;Alpha-Omega&lt;/a&gt; Project.&lt;/p&gt;
&lt;p&gt;Impartial security audits like this play an important role in ​​securing the open source software supply chain. Developers looking to containerize Java applications with JKube can now be confident in the security of their applications.&lt;/p&gt;
&lt;p&gt;Keep an eye on our blog for more security audit announcements in the future.&lt;/p&gt;
&lt;h2 id=&quot;get-involved&quot;&gt;Get Involved&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Get started with &lt;a href=&quot;https://eclipse.dev/jkube/&quot;&gt;Eclipse JKube&lt;/a&gt;, and learn how you can contribute to the project.&lt;/li&gt;
&lt;li&gt;Learn more about the upcoming &lt;a href=&quot;https://www.eclipse.org/org/workinggroups/eclipse-cyber-risk-concept.php&quot;&gt;Eclipse Cyber Risk Initiative&lt;/a&gt;, and how your organization can join the effort to strengthen the open source supply chain. Please subscribe to the &lt;a href=&quot;https://accounts.eclipse.org/mailing-list/eclipse-cyber-risk-initiative&quot;&gt;ECRI mailing list&lt;/a&gt; to join the initiative, or to follow its progress.&lt;/li&gt;
&lt;/ul&gt;</description>
	<pubDate>Fri, 15 Sep 2023 14:00:00 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: The Eclipse Theia Community Release 2023-08</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2023/09/15/the-eclipse-theia-community-release-2023-08/</guid>
	<link>https://eclipsesource.com/blogs/2023/09/15/the-eclipse-theia-community-release-2023-08/</link>
	<description>&lt;p&gt;We are happy to announce the fourth Eclipse Theia community release &amp;amp;ldquo;2023-08&amp;amp;rdquo;, version 1.40.x!
Don&amp;amp;rsquo;t know about Eclipse Theia, yet? It is the next-generation platform for building...&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2023/09/15/the-eclipse-theia-community-release-2023-08/&quot; rel=&quot;nofollow&quot;&gt; The Eclipse Theia Community Release 2023-08&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Fri, 15 Sep 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Webtools News: WTP 3.31 Released!</title>
	<guid isPermaLink="false">http://eclipse.dev/webtools/news.php#permalink205</guid>
	<link>https://eclipse.org/webtools/releases/3.31</link>
	<description>&lt;div&gt;
      The Eclipse Web Tools Platform 3.31 has been released!
      &lt;a href=&quot;https://wiki.eclipse.org/WTP_FAQ#How_do_I_install_WTP.3F&quot;&gt;Installation&lt;/a&gt;
      and updates can be performed using the Eclipse IDE 2023-09
      &lt;a href=&quot;https://download.eclipse.org/releases/2023-09/&quot;&gt;Update Site&lt;/a&gt;
      or through any of the related
      &lt;a href=&quot;https://marketplace.eclipse.org/user/nitind/listings&quot;&gt;Eclipse Marketplace&lt;/a&gt;
      .
      Release 3.31 is included in the 2023-09
      &lt;a href=&quot;https://www.eclipse.org/downloads/packages/release/2023-09/r/eclipse-ide-enterprise-java-and-web-developers&quot;&gt;
        Eclipse IDE for Enterprise Java and Web Developers
      &lt;/a&gt;
      , with selected portions also included in several
      &lt;a href=&quot;https://www.eclipse.org/downloads/compare.php&quot;&gt;other packages&lt;/a&gt;
      . Adopters can download
      &lt;a href=&quot;https://download.eclipse.org/webtools/downloads/drops/R3.31.0/R-3.31.0-20230903090456&quot;&gt;the R3.31 p2 repository&lt;/a&gt;
      directly and combine it with the necessary dependencies, as well as check the &lt;a href=&quot;https://wiki.eclipse.org/WTP_3.31_(2023-09)_-_New_Help_for_Old_Friends&quot;&gt;New Help for Old Friends&lt;/a&gt; document as a high number of bundles have updated their BREEs in this release.&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;http://eclipse.dev/webtools/news.php#permalink205&quot;&gt;More news&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 13 Sep 2023 23:59:00 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: Something‘s amiss</title>
	<guid isPermaLink="false">https://medium.com/p/ce2a55326dd1</guid>
	<link>https://donraab.medium.com/something-s-amiss-ce2a55326dd1?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;A poem about feeling anxious.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/0*KvjxFA-pflPLZq26&quot; /&gt;&lt;figcaption&gt;Photo by &lt;a href=&quot;https://unsplash.com/@bel2000a?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Belinda Fewings&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Dread. &lt;br /&gt;That feeling of inextricable queasiness.&lt;br /&gt;Why are you here?&lt;br /&gt;Leave me alone.&lt;br /&gt;I’m not getting out of bed.&lt;br /&gt;These are my covers.&lt;br /&gt;Go bother the cat.&lt;/p&gt;&lt;p&gt;Pause.&lt;br /&gt;I’ll have some coffee.&lt;br /&gt;Maybe you’ll go away?&lt;br /&gt;I’m not listening.&lt;br /&gt;My tummy feels funny.&lt;br /&gt;I’ll scroll through some social media.&lt;br /&gt;Get out of my head.&lt;/p&gt;&lt;p&gt;Focus.&lt;br /&gt;I drink another cup of coffee.&lt;br /&gt;What did I forget?&lt;br /&gt;Monday drains my soul.&lt;br /&gt;It’s on the tip of my tongue.&lt;br /&gt;A film on top of the pearly whites.&lt;br /&gt;I need to brush my teeth.&lt;/p&gt;&lt;p&gt;© Donald Raab&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=ce2a55326dd1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 08 Sep 2023 20:51:52 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: Eclipse Theia vs. VS Code OSS</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2023/09/08/eclipse-theia-vs-code-oss/</guid>
	<link>https://eclipsesource.com/blogs/2023/09/08/eclipse-theia-vs-code-oss/</link>
	<description>&lt;p&gt;Do you want to build a custom tool or IDE offering and were wondering which web-based platform to choose? Are you evaluating Eclipse Theia against Code OSS (the open source project behind VS Code)? In...&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2023/09/08/eclipse-theia-vs-code-oss/&quot; rel=&quot;nofollow&quot;&gt; Eclipse Theia vs. VS Code OSS&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Fri, 08 Sep 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>John Kellerman: Eclipse Cloud DevTools Digest - July and August 2023</title>
	<guid isPermaLink="false">7399 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/john-kellerman/eclipse-cloud-devtools-digest-july-and-august-2023</link>
	<description>&lt;span&gt;Eclipse Cloud DevTools Digest - July and August 2023&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;h3&gt;2023 Eclipse Cloud Developer Survey Published&lt;/h3&gt;&lt;p&gt;The Eclipse Foundation and the Cloud DevTools Working Group published the results from its &lt;a href=&quot;https://newsroom.eclipse.org/news/announcements/eclipse-foundation-releases-results-2023-cloud-developer-survey&quot;&gt;2023 Cloud Developer Survey&lt;/a&gt;. Spoiler alert: Cloud-based software developer tools are experiencing significant momentum and organizations are increasingly looking to solutions governed by an open source software foundation.&lt;/p&gt;&lt;h3&gt;Cloud DevTools Contributor Awards to STMicroelectronics and Mark Sujew&lt;/h3&gt;&lt;p&gt;The &lt;a href=&quot;https://blogs.eclipse.org/post/john-kellerman/eclipse-cloud-devtools-contributor-award-mark-sujew-extraordinary-contributions&quot;&gt;Eclipse Cloud Developer Tools contributor award for July&lt;/a&gt; goes to Mark Sujew at &lt;a href=&quot;https://www.eclipse.org/membership/showMember.php?member_id=1194&quot;&gt;TypeFox&lt;/a&gt; for his continuous, strategic and valuable contributions to &lt;a href=&quot;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwibvemf37mBAxWNkWoFHZlIAwsQFnoECAYQAQ&amp;amp;url=https%3A%2F%2Ftheia-ide.org%2F&amp;amp;usg=AOvVaw3EU9RO1EIn40ofakNeMMdb&amp;amp;opi=89978449&quot;&gt;Eclipse Theia&lt;/a&gt;, including recently for example, his contributions to enable remote SSH support for Eclipse Theia! &lt;span&gt;The &lt;/span&gt;&lt;a href=&quot;https://blogs.eclipse.org/post/john-kellerman/eclipse-cloud-devtools-contributor-award-stmicroelectronics-typescript-based&quot;&gt;&lt;span&gt;August contributor award&lt;/span&gt;&lt;/a&gt;&lt;span&gt; goes to &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/membership/showMember.php?member_id=800&quot;&gt;&lt;span&gt;STMicroelectronics&lt;/span&gt;&lt;/a&gt;&lt;span&gt; for initiating the support for TypeScript-based &lt;/span&gt;&lt;a href=&quot;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwjI9Yyr37mBAxVIm2oFHV-oDaYQFnoECA4QAQ&amp;amp;url=https%3A%2F%2Feclipse.dev%2Fglsp%2F&amp;amp;usg=AOvVaw0vb3bkymujXhQm4pA6gMih&amp;amp;opi=89978449&quot;&gt;&lt;span&gt;GLSP&lt;/span&gt;&lt;/a&gt;&lt;span&gt; server implementations.&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;Embedded SIG Evolves to CDT Cloud Project&lt;/h3&gt;&lt;p&gt;The Embedded Special Interest Group (SIG) hosted as part of the Eclipse Cloud DevTools working group has now &lt;a href=&quot;https://blogs.eclipse.org/post/john-kellerman/embedded-sig-evolves-cdt-cloud-project&quot;&gt;evolved into the CDT Cloud project&lt;/a&gt;. This reflects the growth and continuously high level of activity in the group, which has outgrown the original governance structure and matured into the establishment of several active open source initiatives under the CDT Cloud umbrella.&lt;/p&gt;&lt;h3&gt;Eclipse JKube 1.14 is now available&lt;/h3&gt;&lt;div class=&quot;align-center&quot;&gt;
  
  
  &lt;div class=&quot;field field--name-field-media-image field--type-image field--label-visually_hidden&quot;&gt;
    &lt;div class=&quot;field--label sr-only&quot;&gt;Image&lt;/div&gt;
              &lt;div class=&quot;field--item&quot;&gt;  &lt;img alt=&quot;JKube&quot; class=&quot;img-responsive&quot; height=&quot;147&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/styles/large/public/2023-09/JKube.png?itok=xGYxHYj2&quot; width=&quot;480&quot; /&gt;&lt;/div&gt;
          &lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;Marc Nuri, in his &lt;a href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-14&quot;&gt;blog&lt;/a&gt;, updates us on what's on new and noteworthy for &lt;a href=&quot;https://eclipse.dev/jkube/&quot;&gt;JKube&lt;/a&gt; 1.14, including Gradle 8 and Helidon support.&lt;/p&gt;&lt;h3&gt;Eclipse Theia Releases&lt;/h3&gt;&lt;div class=&quot;align-center&quot;&gt;
  
  
  &lt;div class=&quot;field field--name-field-media-image field--type-image field--label-visually_hidden&quot;&gt;
    &lt;div class=&quot;field--label sr-only&quot;&gt;Image&lt;/div&gt;
              &lt;div class=&quot;field--item&quot;&gt;  &lt;img alt=&quot;Theia&quot; class=&quot;img-responsive&quot; height=&quot;42&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/styles/large/public/2023-07/image1.png?itok=oCtAW012&quot; width=&quot;300&quot; /&gt;&lt;/div&gt;
          &lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;Jonas, Maximilian &amp;amp; Philip, in their &lt;a href=&quot;https://eclipsesource.com/blogs/author/jonas-maximilian-philip/&quot;&gt;blog&lt;/a&gt;, provide updates for &lt;a href=&quot;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwi2rrS44rmBAxX2lGoFHV1vBF4QFnoECAYQAQ&amp;amp;url=https%3A%2F%2Ftheia-ide.org%2F&amp;amp;usg=AOvVaw3EU9RO1EIn40ofakNeMMdb&amp;amp;opi=89978449&quot;&gt;Theia&lt;/a&gt; releases &lt;a href=&quot;https://eclipsesource.com/blogs/2023/07/06/eclipse-theia-1-39-release-news-and-noteworthy/&quot;&gt;1.39&lt;/a&gt; and &lt;a href=&quot;https://eclipsesource.com/blogs/2023/08/01/eclipse-theia-1-40-release-news-and-noteworthy/&quot;&gt;1.40&lt;/a&gt;, including support for multiple extension registries, Electron application detachable views, conditions on exception breakpoints, and a number of usability and performance enhancements.&lt;/p&gt;&lt;h3&gt;JBoss Tools 4.28 Release&lt;/h3&gt;&lt;div class=&quot;align-center&quot;&gt;
  
  
  &lt;div class=&quot;field field--name-field-media-image field--type-image field--label-visually_hidden&quot;&gt;
    &lt;div class=&quot;field--label sr-only&quot;&gt;Image&lt;/div&gt;
              &lt;div class=&quot;field--item&quot;&gt;  &lt;img alt=&quot;JBoss Tools&quot; class=&quot;img-responsive&quot; height=&quot;121&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/styles/large/public/2023-09/JBoss%20Tools.png?itok=92Mes0Sh&quot; width=&quot;480&quot; /&gt;&lt;/div&gt;
          &lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;The JBoss team announced &lt;a href=&quot;https://tools.jboss.org/blog/4.28.0.final.html&quot;&gt;JBoss Tools 4.28.0 for Eclipse 2023-06.&lt;/a&gt; This release includes deprecations for some Openshift support, updates to Hibernate runtime support, and a move on the backend from Google Analytics to Segment. &lt;/p&gt;&lt;h3 dir=&quot;ltr&quot; id=&quot;docs-internal-guid-43f0a3ab-7fff-bbb2-de02-ff8761145c8d&quot;&gt;TheiaCon 2023 and Community Day at EclipseCon Events&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;The Eclipse Cloud DevTools and Open VSX Working Groups will be co-hosting a Community Day event at EclipseCon on October 16th. Last year’s Community Day was well-attended and a very informative and enjoyable time was had by all. Be sure to &lt;/span&gt;&lt;a href=&quot;https://forms.gle/iESfeFPgccnEnh6Z8&quot;&gt;&lt;span&gt;submit your topics&lt;/span&gt;&lt;/a&gt;&lt;span&gt; for this years event.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The &lt;/span&gt;&lt;a href=&quot;https://docs.google.com/forms/d/e/1FAIpQLScj5BE1K_Yo6spy7eZKUEePluqFuF8QgLMnj57zmyBhH8-L-g/viewform&quot;&gt;&lt;span&gt;Call for Presentations&lt;/span&gt;&lt;/a&gt;&lt;span&gt; is also now live for &lt;/span&gt;&lt;a href=&quot;https://events.eclipse.org/2023/theiacon/&quot;&gt;&lt;span&gt;TheiaCon 2023&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, which will be held virtually on November 15-16. We look forward to another excellent program and encourage you to submit your proposals early. &lt;/span&gt;&lt;/p&gt;&lt;h3&gt;Cloud Tool Time Webinars&lt;/h3&gt;&lt;img class=&quot;align-center&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/2023-07/Cloud%20Tool%20Time.jpg&quot; width=&quot;38.67%&quot; /&gt;&lt;p&gt;We are now scheduling Cloud Tool Time webinars for 2023. Be sure to &lt;a href=&quot;https://forms.gle/K8ZuJ26YqoyMC9dD7&quot;&gt;Sign up&lt;/a&gt; now to get on the calendar and let us help tell your story. You can see past sessions on our &lt;a href=&quot;https://www.youtube.com/playlist?list=PLy7t4z5SYNaSBxx8gLh0i9LlN2bZW6H1L&quot;&gt;Youtube channel&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;Eclipse Cloud DevTools Projects&lt;/h3&gt;&lt;img class=&quot;align-center&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/2023-07/Cloud%20DevTools.png&quot; /&gt;&lt;p&gt;Explore the &lt;a href=&quot;https://ecdtools.eclipse.org/projects/&quot;&gt;Eclipse Cloud DevTools ecosystem&lt;/a&gt;! Check out our projects page to find out more about open source innovation for cloud IDEs, extension marketplaces, frameworks and more.&lt;/p&gt;&lt;h3&gt;Getting Listed on the Cloud DevTools Blog&lt;/h3&gt;&lt;p&gt;If you are working with, or on, anything in the Cloud DevTools space, &lt;a href=&quot;https://blogs.eclipse.org/post/brian-king/getting-listed-cloud-devtools-blog&quot;&gt;learn how to get your writings posted&lt;/a&gt; in our &lt;a href=&quot;https://ecdtools.eclipse.org/resources/blogs/&quot;&gt;blog section&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
      
&lt;span&gt;&lt;span&gt;John Kellerman&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;Wed, 2023-09-06 15:53&lt;/span&gt;

  &lt;div class=&quot;field field--name-field-blog-tags field--type-entity-reference field--label-above&quot;&gt;
    &lt;div class=&quot;field--label&quot;&gt;Tags&lt;/div&gt;
          &lt;div class=&quot;field--items&quot;&gt;
              &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/ecdtools&quot; hreflang=&quot;en&quot;&gt;ECDTools&lt;/a&gt;&lt;/div&gt;
          &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/clouddevtools-0&quot; hreflang=&quot;en&quot;&gt;CloudDevTools&lt;/a&gt;&lt;/div&gt;
          &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/opensource-0&quot; hreflang=&quot;en&quot;&gt;OpenSource&lt;/a&gt;&lt;/div&gt;
          &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/openvsx&quot; hreflang=&quot;en&quot;&gt;OpenVSX&lt;/a&gt;&lt;/div&gt;
              &lt;/div&gt;
      &lt;/div&gt;</description>
	<pubDate>Wed, 06 Sep 2023 19:53:46 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: Eclipse Theia 1.41 Release: News and Noteworthy</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2023/09/05/eclipse-theia-1-41-release-news-and-noteworthy/</guid>
	<link>https://eclipsesource.com/blogs/2023/09/05/eclipse-theia-1-41-release-news-and-noteworthy/</link>
	<description>&lt;p&gt;We are happy to announce the Eclipse Theia 1.41 release! Even though we are still in vacation season, the release contains 50 merged pull requests and we welcome three new contributors. In this...&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2023/09/05/eclipse-theia-1-41-release-news-and-noteworthy/&quot; rel=&quot;nofollow&quot;&gt; Eclipse Theia 1.41 Release: News and Noteworthy&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Tue, 05 Sep 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Marc Nuri: Eclipse JKube 1.14 is now available!</title>
	<guid isPermaLink="true">https://blog.marcnuri.com/eclipse-jkube-1-14</guid>
	<link>https://blog.marcnuri.com/eclipse-jkube-1-14</link>
	<description>&lt;div&gt;&lt;a href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-14&quot;&gt;Original post&lt;/a&gt;&lt;/div&gt;
    &lt;p&gt;On behalf of the &lt;a class=&quot;post-link &quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-introduction-kubernetes-openshift#null&quot; title=&quot;Eclipse JKube introduction: Java tools and plugins for Kubernetes and OpenShift&quot;&gt;Eclipse JKube&lt;/a&gt;
team and everyone who has contributed, I'm happy to announce that Eclipse JKube &lt;code&gt;1.14.0&lt;/code&gt; has been
&lt;a href=&quot;https://github.com/eclipse/jkube/releases/tag/v1.14.0&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://github.com/eclipse/jkube/releases/tag/v1.14.0&quot;&gt;released&lt;/a&gt; and is now available from
&lt;a href=&quot;https://repo1.maven.org/maven2/org/eclipse/jkube/kubernetes-maven-plugin/1.14.0/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://repo1.maven.org/maven2/org/eclipse/jkube/kubernetes-maven-plugin/1.14.0/&quot;&gt;Maven Central&lt;/a&gt; ğŸ�‰.&lt;/p&gt;
&lt;p&gt;Thanks to all of you who have contributed with issue reports, pull requests, feedback, and spreading the word
with blogs, videos, comments, and so on.
We really appreciate your help, keep it up!&lt;/p&gt;
&lt;h2 class=&quot;heading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-14/#whats-new&quot;&gt;&lt;i class=&quot;anchor__link fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;span id=&quot;whats-new&quot;&gt;&lt;/span&gt;What's new?&lt;/h2&gt;
&lt;p&gt;Without further ado, let's have a look at the most significant updates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;post-link &quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-14#gradle-8&quot; title=&quot;Link to the Gradle 8 support section&quot;&gt;Gradle 8 support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;post-link &quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-14#helidon&quot; title=&quot;Link to the Helidon support section&quot;&gt;Helidon support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;post-link &quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-14#spring-boot-layered-jar&quot; title=&quot;Link to the Spring Boot layered jar section&quot;&gt;Spring Boot layered jar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Helm push support for OCI registries&lt;/li&gt;
&lt;li&gt;ğŸ�› Many other bug-fixes and minor improvements&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;heading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-14/#gradle-8&quot;&gt;&lt;i class=&quot;anchor__link fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;span id=&quot;gradle-8&quot;&gt;&lt;/span&gt;Gradle 8 support&lt;/h3&gt;
&lt;p&gt;Gradle 8 wasn't fully supported in previous versions of JKube,
as some users have &lt;a href=&quot;https://github.com/eclipse/jkube/issues/2299&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://github.com/eclipse/jkube/issues/2299&quot;&gt;reported&lt;/a&gt;.
This release fixes the issues and adds full support for Gradle 8.&lt;/p&gt;
&lt;p&gt;Gradle 8 brings multiple improvements and new features.
You can find more information in the &lt;a href=&quot;https://gradle.org/whats-new/gradle-8/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://gradle.org/whats-new/gradle-8/&quot;&gt;Gradle 8 release announcement&lt;/a&gt;.
These are some of the most relevant changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Performance Boosts:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Introduction of a configuration cache to speed up project configuration.&lt;/li&gt;
&lt;li&gt;Enhanced parallelism for task execution without requiring the '--parallel' flag.&lt;/li&gt;
&lt;li&gt;Faster Java compilation with improved incremental compilation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Usability Improvements:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Improved Java toolchain support for specifying the project's JDK and vendor.&lt;/li&gt;
&lt;li&gt;Introduction of Test Suites for simplifying test organization.&lt;/li&gt;
&lt;li&gt;Version catalogs for managing dependencies with better plugin version support.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ecosystem Support Upgrades:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Support for Java 17 through 19, Groovy 4.0, and an updated Scala Zinc version.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our JKube fix will allow you to take advantage of all these improvements and won't hold you back from upgrading to Gradle 8 ğŸš€.&lt;/p&gt;
&lt;h3 class=&quot;heading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-14/#helidon&quot;&gt;&lt;i class=&quot;anchor__link fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;span id=&quot;helidon&quot;&gt;&lt;/span&gt;Helidon support&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://helidon.io/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://helidon.io/&quot;&gt;Helidon&lt;/a&gt; is a collection of Java libraries for writing microservices that run on a fast web core powered by Netty.
Until now, if you wanted to use JKube with Helidon, you had to provide a complete image configuration.&lt;/p&gt;
&lt;p&gt;This JKube release includes a new Helidon Generator and Enricher that will allow you to build and deploy your Helidon application to Kubernetes and OpenShift without any additional configuration.&lt;/p&gt;
&lt;p&gt;You will find quickstarts for both &lt;a href=&quot;https://github.com/eclipse/jkube/tree/e417623c6e82f68b662f20cb694319e0ca8dcb5e/quickstarts/maven/helidon-se&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://github.com/eclipse/jkube/tree/e417623c6e82f68b662f20cb694319e0ca8dcb5e/quickstarts/maven/helidon-se&quot;&gt;Helidon SE&lt;/a&gt;
and &lt;a href=&quot;https://github.com/eclipse/jkube/tree/e417623c6e82f68b662f20cb694319e0ca8dcb5e/quickstarts/maven/helidon-microprofile&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://github.com/eclipse/jkube/tree/e417623c6e82f68b662f20cb694319e0ca8dcb5e/quickstarts/maven/helidon-microprofile&quot;&gt;Helidon MP&lt;/a&gt; in our main repository.&lt;/p&gt;
&lt;h3 class=&quot;heading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-14/#spring-boot-layered-jar&quot;&gt;&lt;i class=&quot;anchor__link fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;span id=&quot;spring-boot-layered-jar&quot;&gt;&lt;/span&gt;Spring Boot layered jar&lt;/h3&gt;
&lt;p&gt;Spring Boot 2.3 &lt;a href=&quot;https://spring.io/blog/2020/08/14/creating-efficient-docker-images-with-spring-boot-2-3&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://spring.io/blog/2020/08/14/creating-efficient-docker-images-with-spring-boot-2-3&quot;&gt;introduced&lt;/a&gt;
a new &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.3.0.RELEASE/maven-plugin/reference/html/#repackage-layers&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://docs.spring.io/spring-boot/docs/2.3.0.RELEASE/maven-plugin/reference/html/#repackage-layers&quot;&gt;layered jar&lt;/a&gt;
format to package your application.
Being able to provide different layers when building your image allows you to take advantage of the Docker
or Jib layer cache and reduce the image build time.&lt;/p&gt;
&lt;p&gt;With this release, JKube will automatically detect if your project is using a layered jar and will configure
the image build accordingly to take advantage of the layers defined in your jar.
As usual with many of JKube's features,
everything will work out of the box without any additional configuration from your side.&lt;/p&gt;
&lt;h2 class=&quot;heading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-14/#using-this-release&quot;&gt;&lt;i class=&quot;anchor__link fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;span id=&quot;using-this-release&quot;&gt;&lt;/span&gt;Using this release&lt;/h2&gt;
&lt;p&gt;If your project is based on Maven, you just need to add the Kubernetes Maven plugin or the OpenShift Maven
plugin to your plugin dependencies:&lt;/p&gt;
&lt;div class=&quot;code&quot; style=&quot;background: #232323;&quot;&gt;&lt;pre style=&quot;display: block; padding: 0.5em; background: #232323; color: #e6e1dc;&quot;&gt;&lt;code class=&quot;language-xml&quot; style=&quot;white-space: pre;&quot;&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;plugin&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;groupId&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;org.eclipse.jkube&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;groupId&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;artifactId&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;kubernetes-maven-plugin&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;artifactId&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;version&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;1.14.0&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;version&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;plugin&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If your project is based on Gradle, you just need to add the Kubernetes Gradle plugin or the OpenShift Gradle
plugin to your plugin dependencies:&lt;/p&gt;
&lt;div class=&quot;code&quot; style=&quot;background: #232323;&quot;&gt;&lt;pre style=&quot;display: block; padding: 0.5em; background: #232323; color: #e6e1dc;&quot;&gt;&lt;code class=&quot;language-groovy&quot; style=&quot;white-space: pre;&quot;&gt;&lt;span&gt;plugins {
&lt;/span&gt;&lt;span&gt;  id &lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;'org.eclipse.jkube.kubernetes'&lt;/span&gt;&lt;span&gt; version &lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;'1.14.0'&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 class=&quot;heading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-14/#how-can-you-help&quot;&gt;&lt;i class=&quot;anchor__link fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;span id=&quot;how-can-you-help&quot;&gt;&lt;/span&gt;How can you help?&lt;/h2&gt;
&lt;p&gt;If you're interested in helping out and are a first-time contributor, check out the
&lt;a href=&quot;https://github.com/eclipse/jkube/labels/first-timers-only&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://github.com/eclipse/jkube/labels/first-timers-only&quot;&gt;&quot;first-timers-only&quot;&lt;/a&gt;
tag in the issue repository.
We've tagged extremely easy issues so that you can get started contributing to Open Source and the Eclipse organization.&lt;/p&gt;
&lt;p&gt;If you are a more experienced developer or have already contributed to JKube, check the
&lt;a href=&quot;https://github.com/eclipse/jkube/labels/help%20wanted&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://github.com/eclipse/jkube/labels/help%20wanted&quot;&gt;&quot;help wanted&quot;&lt;/a&gt; tag.&lt;/p&gt;
&lt;p&gt;We're also excited to read articles and posts mentioning our project and sharing the user experience.
Feedback is the only way to improve.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.eclipse.org/jkube&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://www.eclipse.org/jkube&quot;&gt;Project Page&lt;/a&gt; |
&lt;a href=&quot;https://github.com/eclipse/jkube&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://github.com/eclipse/jkube&quot;&gt;GitHub&lt;/a&gt; |
&lt;a href=&quot;https://github.com/eclipse/jkube/issues&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://github.com/eclipse/jkube/issues&quot;&gt;Issues&lt;/a&gt; |
&lt;a href=&quot;https://gitter.im/eclipse/jkube&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://gitter.im/eclipse/jkube&quot;&gt;Gitter&lt;/a&gt; |
&lt;a href=&quot;https://accounts.eclipse.org/mailing-list/jkube-dev&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://accounts.eclipse.org/mailing-list/jkube-dev&quot;&gt;Mailing list&lt;/a&gt; |
&lt;a href=&quot;https://stackoverflow.com/questions/tagged/jkube&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://stackoverflow.com/questions/tagged/jkube&quot;&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;span style=&quot;text-align: center;&quot;&gt;&lt;span class=&quot;post-image__pusher &quot;&gt;&lt;/span&gt;&lt;figure class=&quot;post-image &quot;&gt;&lt;span class=&quot;post-image__scrim&quot;&gt;&lt;/span&gt;&lt;a class=&quot;post-image__link&quot; href=&quot;https://blog.marcnuri.com/static/af6673438e09cd98812665335c800cbf/e5189/JKube-blog-banner.jpg&quot; title=&quot;The logo of Eclipse JKube&quot;&gt;&lt;span class=&quot;post-image__image-container&quot;&gt;&lt;div class=&quot;gatsby-image-wrapper gatsby-image-wrapper-constrained post-image__image &quot;&gt;&lt;source type=&quot;image/webp&quot; /&gt;&lt;img alt=&quot;The logo of Eclipse JKube&quot; src=&quot;https://blog.marcnuri.com/static/af6673438e09cd98812665335c800cbf/e5189/JKube-blog-banner.jpg&quot; /&gt;&lt;/div&gt;&lt;/span&gt;&lt;/a&gt;&lt;/figure&gt;&lt;/span&gt;</description>
	<pubDate>Thu, 31 Aug 2023 16:00:00 +0000</pubDate>
        <enclosure url="https://blog.marcnuri.com/static/af6673438e09cd98812665335c800cbf/e5189/JKube-blog-banner.jpg" length="0" type="image/jpg"/>
</item>
<item>
	<title>InfoQ Eclipse feed: MicroStream Debuts Eclipse Store Java Persistence Framework at Eclipse Foundation</title>
	<guid isPermaLink="true">https://www.infoq.com/news/2023/08/debut-of-eclipse-store/?utm_campaign=infoq_content&amp;utm_source=infoq&amp;utm_medium=feed&amp;utm_term=Eclipse</guid>
	<link>https://www.infoq.com/news/2023/08/debut-of-eclipse-store/?utm_campaign=infoq_content&amp;utm_source=infoq&amp;utm_medium=feed&amp;utm_term=Eclipse</link>
	<description>&lt;img src=&quot;https://res.infoq.com/news/2023/08/debut-of-eclipse-store/en/headerimage/java-istock-image-01-1693328244413.jpg&quot; /&gt;&lt;p&gt;MicroStream, an open-source Java persistence framework, recently announced the first release of Eclipse Store under the auspices of the Eclipse Foundation. This first release contains two core components from MicroStream, its Serializer and StorageManager restructured as Eclipse Serializer, and Eclipse Store, respectively.&lt;/p&gt; &lt;i&gt;By Sirisha Pratha&lt;/i&gt;</description>
	<pubDate>Wed, 30 Aug 2023 07:00:00 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: My ten year quest for concise lambda expressions in Java</title>
	<guid isPermaLink="false">https://medium.com/p/39fde576b950</guid>
	<link>https://betterprogramming.pub/my-ten-year-quest-for-concise-lambda-expressions-in-java-39fde576b950?source=rss-df39b86e9f04------2</link>
	<description>&lt;h3&gt;My ten-year quest for concise lambda expressions in Java&lt;/h3&gt;&lt;h4&gt;A mission to hold off the horde of for loops in Java.&lt;/h4&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/0*fet3J4C9WbksbuSy&quot; /&gt;&lt;figcaption&gt;Photo by &lt;a href=&quot;https://unsplash.com/@afivos?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Fivos Avgerinos&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;A series of fortunate and unfortunate events&lt;/h3&gt;&lt;p&gt;I started learning Java in 1997. I thought initially Java would be a fad and that Smalltalk would emerge as the victor in the battle for object-oriented programmer productivity over C++. I was wrong. In the great object-oriented battles in the 1990s between C++ and Smalltalk, Java emerged as the victor.&lt;/p&gt;&lt;p&gt;Y2K marked the end of my career as a professional Smalltalk developer. I stopped programming in Smalltalk professionally for the promise of a higher-paying career in Java. Over two decades later, this would turn out to be the best decision I ever made in my career. I miss Smalltalk, but it’s never too far away from my keyboard.&lt;/p&gt;&lt;p&gt;My journey with Java has helped me evolve as a software engineer, learner, and teacher. I know things now that if I had continued programming professionally in Smalltalk, I might have never had the opportunity to learn and share with so many other developers. My Smalltalk experience gave me a solid perspective on what Java was missing. This knowledge and experience created a great opportunity for me to become a teacher, and to learn things more deeply as a result. Teaching a Smalltalk way of thinking to thousands of Java developers globally has enabled me to achieve a higher level of appreciation for many things. I have helped many Java developers learn how to elevate their coding style so they can communicate their intent with a more expressive vocabulary. I’ve seen quite a few developers build great things with the skills they have developed. This is everything to me.&lt;/p&gt;&lt;p&gt;In the rest of this blog, I will explain how a dislike for reading and writing for loops became so acute that it led to me creating an open-source collections library (&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt;) for Java inspired by Smalltalk. This then set me on a quest to find a way to help Java get good syntactical support for concise lambda expressions.&lt;/p&gt;&lt;h3&gt;Hold the for&lt;/h3&gt;&lt;p&gt;I dislike reading for loops in application code. I see for loops as a sign that a developer failed to learn and use a higher level abstraction to communicate what they are doing with an intention revealing name. For loops are a necessity in languages like Java. With the minimal interface design approach of Java Collections, the for loop became the “Hodor” of developer communication. For anyone who hasn’t heard of “Hodor”, he is a character in the “Game of Thones” series who says only one word: &lt;em&gt;Hodor!&lt;/em&gt; I will refer to the style of programming where all iteration patterns are written with for loops as &lt;em&gt;Hofor!&lt;/em&gt;&lt;/p&gt;&lt;p&gt;By 2004, everything I was reading in Java code was &lt;em&gt;Hofor!&lt;/em&gt;, &lt;em&gt;Hofor!&lt;/em&gt;, &lt;em&gt;Hofor!&lt;/em&gt;, and… &lt;em&gt;Hofor!&lt;/em&gt;. I got paid to read &lt;em&gt;Hofor!&lt;/em&gt; every day. I got to write a lot of &lt;em&gt;Hofor!&lt;/em&gt; as well. This is pedestrian level programming that I would gladly welcome our new AI overlords to automagically replace with higher level abstractions employing intention revealing names.&lt;/p&gt;&lt;p&gt;The following example shows simple &lt;em&gt;Hofor!&lt;/em&gt; style coding in Java. By itself, this code is easy to read and may not seem too bad. But wait for it… it will get worse.&lt;/p&gt;&lt;pre&gt;public List&amp;lt;Person&amp;gt; getListOfPeople()&lt;br /&gt;{&lt;br /&gt;    List&amp;lt;Person&amp;gt; people = new ArrayList&amp;lt;&amp;gt;();&lt;br /&gt;    people.add(new Person(&quot;Bob&quot;, &quot;Smith&quot;));&lt;br /&gt;    people.add(new Person(&quot;Sally&quot;, &quot;Taylor&quot;));&lt;br /&gt;    return people;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;@Test&lt;br /&gt;public void forLoopFindUniqueLastNames()&lt;br /&gt;{&lt;br /&gt;    List&amp;lt;Person&amp;gt; people = this.getListOfPeople();&lt;br /&gt;&lt;br /&gt;    // Find the unique last names of the people&lt;br /&gt;    // Hofor!&lt;br /&gt;    Set&amp;lt;String&amp;gt; lastNames = new HashSet&amp;lt;&amp;gt;();&lt;br /&gt;    for (Person each : people)&lt;br /&gt;    {&lt;br /&gt;        lastNames.add(each.lastName());&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(Set.of(&quot;Smith&quot;, &quot;Taylor&quot;), lastNames);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;Using a method with the intention revealing name can replace the for loop here. Extracting for loops into their own methods became a regular activity for me so I could quickly read code that communicated its intent, instead of requiring me to painstakingly translate the how to the what by reading every line in a for loop.&lt;/p&gt;&lt;p&gt;In the following example, I use an &lt;em&gt;Extract Method&lt;/em&gt; refactoring to create a method named getUniqueLastNames.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void findUniqueLastNames()&lt;br /&gt;{&lt;br /&gt;    List&amp;lt;Person&amp;gt; people = this.getListOfPeople();&lt;br /&gt;&lt;br /&gt;    Set&amp;lt;String&amp;gt; lastNames = this.getUniqueLastNames(people);&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(Set.of(&quot;Smith&quot;, &quot;Taylor&quot;), lastNames);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;private Set&amp;lt;String&amp;gt; getUniqueLastNames(List&amp;lt;Person&amp;gt; people)&lt;br /&gt;{&lt;br /&gt;    // Hofor!&lt;br /&gt;    Set&amp;lt;String&amp;gt; lastNames = new HashSet&amp;lt;&amp;gt;();&lt;br /&gt;    for (Person each : people)&lt;br /&gt;    {&lt;br /&gt;        lastNames.add(each.lastName());&lt;br /&gt;    }&lt;br /&gt;    return lastNames;&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;This might not look too terrible to most Java developers, at least if they were programming before Java 8 was released.&lt;/p&gt;&lt;p&gt;As a former Smalltalk developer, this code made me want to scream. I should not have had to create the method getUniqueLastNames. I should have been able to use a method on List for this common iteration pattern known as collect, map, or transform.&lt;/p&gt;&lt;p&gt;It should have also been trivial to convert a List to a Set, or if efficiency was a concern, transform the elements directly into a Set. Instead, we had to use &lt;em&gt;Hofor!&lt;/em&gt;&lt;/p&gt;&lt;p&gt;After four years of reading and writing code like this in Java, I was becoming increasingly motivated to do something to fix it. Reading thousands of for loops and extracting methods, knowing there is a missing level of abstraction was too much for a former Smalltalk developer to bear. I saw many former Smalltalk developers abandon Java for Ruby or Groovy or even JavaScript. I decided to take a different path and stick with Java.&lt;/p&gt;&lt;p&gt;I would have to slow down, in order to speed up.&lt;/p&gt;&lt;h3&gt;Flotsam and Jetsam&lt;/h3&gt;&lt;p&gt;The code example above may not seem bad on its own. So let’s show two more examples that should make the duplication obvious and more painful to read.&lt;/p&gt;&lt;p&gt;In the following example I add a second method named getUniqueFirstNames and the code in the test asserts both the unique first names and last names for the people.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void findUniqueFirstAndLastNames()&lt;br /&gt;{&lt;br /&gt;    List&amp;lt;Person&amp;gt; people = this.getListOfPeople();&lt;br /&gt;&lt;br /&gt;    Set&amp;lt;String&amp;gt; firstNames = this.getUniqueFirstNames(people);&lt;br /&gt;    Set&amp;lt;String&amp;gt; lastNames = this.getUniqueLastNames(people);&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(Set.of(&quot;Bob&quot;, &quot;Sally&quot;), firstNames);&lt;br /&gt;    Assertions.assertEquals(Set.of(&quot;Smith&quot;, &quot;Taylor&quot;), lastNames);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;private Set&amp;lt;String&amp;gt; getUniqueFirstNames(List&amp;lt;Person&amp;gt; people)&lt;br /&gt;{&lt;br /&gt;    // Hofor!&lt;br /&gt;    Set&amp;lt;String&amp;gt; firstNames = new HashSet&amp;lt;&amp;gt;();&lt;br /&gt;    for (Person each : people)&lt;br /&gt;    {&lt;br /&gt;        firstNames.add(each.firstName());&lt;br /&gt;    }&lt;br /&gt;    return firstNames;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;private Set&amp;lt;String&amp;gt; getUniqueLastNames(List&amp;lt;Person&amp;gt; people)&lt;br /&gt;{&lt;br /&gt;    // Hofor!&lt;br /&gt;    Set&amp;lt;String&amp;gt; lastNames = new HashSet&amp;lt;&amp;gt;();&lt;br /&gt;    for (Person each : people)&lt;br /&gt;    {&lt;br /&gt;        lastNames.add(each.lastName());&lt;br /&gt;    }&lt;br /&gt;    return lastNames;&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;You should see some clear structural similarities between getUniqueFirstNames and getUniqueLastNames.&lt;/p&gt;&lt;blockquote&gt;For me once, shame on you. For me twice, shame on me.&lt;/blockquote&gt;&lt;p&gt;There is one more example I will share below, in order to help drive home the point through repetition. I will add a method named getUniqueFullNames.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void findUniqueFirstLastAndFullNames()&lt;br /&gt;{&lt;br /&gt;    List&amp;lt;Person&amp;gt; people = this.getListOfPeople();&lt;br /&gt;&lt;br /&gt;    Set&amp;lt;String&amp;gt; firstNames = this.getUniqueFirstNames(people);&lt;br /&gt;    Set&amp;lt;String&amp;gt; lastNames = this.getUniqueLastNames(people);&lt;br /&gt;    Set&amp;lt;String&amp;gt; fullNames = this.getUniqueFullNames(people);&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(Set.of(&quot;Bob&quot;, &quot;Sally&quot;), firstNames);&lt;br /&gt;    Assertions.assertEquals(Set.of(&quot;Smith&quot;, &quot;Taylor&quot;), lastNames);&lt;br /&gt;    Assertions.assertEquals(Set.of(&quot;Bob Smith&quot;, &quot;Sally Taylor&quot;), fullNames);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;private Set&amp;lt;String&amp;gt; getUniqueFirstNames(List&amp;lt;Person&amp;gt; people)&lt;br /&gt;{&lt;br /&gt;    // Hofor!&lt;br /&gt;    Set&amp;lt;String&amp;gt; firstNames = new HashSet&amp;lt;&amp;gt;();&lt;br /&gt;    for (Person each : people)&lt;br /&gt;    {&lt;br /&gt;        firstNames.add(each.firstName());&lt;br /&gt;    }&lt;br /&gt;    return firstNames;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;private Set&amp;lt;String&amp;gt; getUniqueLastNames(List&amp;lt;Person&amp;gt; people)&lt;br /&gt;{&lt;br /&gt;    // Hofor!&lt;br /&gt;    Set&amp;lt;String&amp;gt; lastNames = new HashSet&amp;lt;&amp;gt;();&lt;br /&gt;    for (Person each : people)&lt;br /&gt;    {&lt;br /&gt;        lastNames.add(each.lastName());&lt;br /&gt;    }&lt;br /&gt;    return lastNames;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;private Set&amp;lt;String&amp;gt; getUniqueFullNames(List&amp;lt;Person&amp;gt; people)&lt;br /&gt;{&lt;br /&gt;    // Hofor!&lt;br /&gt;    Set&amp;lt;String&amp;gt; lastNames = new HashSet&amp;lt;&amp;gt;();&lt;br /&gt;    for (Person each : people)&lt;br /&gt;    {&lt;br /&gt;        lastNames.add(each.fullName());&lt;br /&gt;    }&lt;br /&gt;    return lastNames;&lt;br /&gt;}&lt;/pre&gt;&lt;blockquote&gt;For me three times, shame on both of us. — with apologies to Stephen King&lt;/blockquote&gt;&lt;p&gt;&lt;em&gt;Hofor! Hofor! Hofor! &lt;/em&gt;The structural similarity between these three methods is screaming “Hold the for!”&lt;/p&gt;&lt;p&gt;Help would soon be on its way.&lt;/p&gt;&lt;h3&gt;Fate of Sisyphus or Temporary Eye Gouging&lt;/h3&gt;&lt;p&gt;By 2004, I had enough of this painful loop code duplication. They say necessity is the mother of invention. I needed to end this for loop code duplication in Java. I viewed it as an existential threat to my sanity as a developer.&lt;/p&gt;&lt;p&gt;I turned to the only tool I had available to address the problem in Java at the time. This tool was Anonymous Inner Classes (AIC). Unfortunately, every time I use an AIC in Java, I feel like I am sticking a sharp instrument in my eye. Strangely, this felt better than having to roll the same ball up a hill like &lt;a href=&quot;https://en.wikipedia.org/wiki/Sisyphus&quot;&gt;Sisyphus&lt;/a&gt; for eternity. Java IDEs with code folding made it less painful to read AICs, so the pain was only in writing the code. That pain was also lessened by IDEs that generated the boilerplate required to implement an Anonymous Inner Class.&lt;/p&gt;&lt;p&gt;I will walk you through the thought process I went through to remove the duplication in the above example. I will create a single method named getUniqueValues which takes the List and a Function. Function will be an interface with a single abstract method named apply which will take a parameter and return some result. The getUniqueValues method which is single purpose here will later be converted to use a reusable method named collect and which is part of the Eclipse Collections API.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void findUniqueFirstLastAndFullNamesWithAICs() &lt;br /&gt;{&lt;br /&gt;    List&amp;lt;Person&amp;gt; people = this.getListOfPeople();&lt;br /&gt;&lt;br /&gt;    Set&amp;lt;String&amp;gt; firstNames = &lt;br /&gt;        this.getUniqueValues(people, new Function&amp;lt;Person, String&amp;gt;() {&lt;br /&gt;            public String apply(Person person) {&lt;br /&gt;                return person.firstName();&lt;br /&gt;            }&lt;br /&gt;        });&lt;br /&gt;    Set&amp;lt;String&amp;gt; lastNames = &lt;br /&gt;        this.getUniqueValues(people, new Function&amp;lt;Person, String&amp;gt;() {&lt;br /&gt;            public String apply(Person person) {&lt;br /&gt;                return person.lastName();&lt;br /&gt;            }&lt;br /&gt;        });&lt;br /&gt;    Set&amp;lt;String&amp;gt; fullNames = &lt;br /&gt;        this.getUniqueValues(people, new Function&amp;lt;Person, String&amp;gt;() {&lt;br /&gt;            public String apply(Person person) {&lt;br /&gt;                return person.fullName();&lt;br /&gt;            }&lt;br /&gt;        });&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(Set.of(&quot;Bob&quot;, &quot;Sally&quot;), firstNames);&lt;br /&gt;    Assertions.assertEquals(Set.of(&quot;Smith&quot;, &quot;Taylor&quot;), lastNames);&lt;br /&gt;    Assertions.assertEquals(Set.of(&quot;Bob Smith&quot;, &quot;Sally Taylor&quot;), fullNames);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;private Set&amp;lt;String&amp;gt; getUniqueValues(&lt;br /&gt;    List&amp;lt;Person&amp;gt; people, &lt;br /&gt;    Function&amp;lt;Person, String&amp;gt; function) &lt;br /&gt;{&lt;br /&gt;    // Hofor!&lt;br /&gt;    Set&amp;lt;String&amp;gt; values = new HashSet&amp;lt;&amp;gt;();&lt;br /&gt;    for (Person each : people) &lt;br /&gt;    {&lt;br /&gt;        values.add(function.apply(each));&lt;br /&gt;    }&lt;br /&gt;    return values;&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;By passing a Function in using an AIC, I can alter the one part of the code that was different, which is whether to use firstName, lastName, or fullName.&lt;/p&gt;&lt;p&gt;OMG! How is this even remotely better than the code I wrote before!?!? Why would anyone write code like this! This code is terrible. My eyes are bleeding! Please, make it stop!&lt;/p&gt;&lt;p&gt;Were it not for code like this with AICs that I wrote from 2004–2014 in Java, it’s possible we might not have gotten lambdas in Java as soon as we did. If Java didn’t get lambdas in Java 8 by March 2014, some of us Java developers who were exhausted from writing for loops would instead be programming in Groovy, Scala, Kotlin, C#, JavaScript or some other language that had lambda support built-in from the beginning.&lt;/p&gt;&lt;p&gt;I chose temporary eye gouging over the fate of Sisyphus. This was a choice of higher level abstraction or being stuck with pedestrian programming with for loops forever. Programming is a creative endeavor. Building and using higher-level abstractions to solve problems fuels our creativity as developers. The fact that Anonymous Inner Classes are hideously ugly and temporarily blind the developer who uses them could not hide the beauty and benefit of the higher level abstractions.&lt;/p&gt;&lt;p&gt;It’s been almost ten years since Java 8 was released. My eyes have healed, and the Anonymous Inner Classes are mostly gone, replaced by concise lambda expressions.&lt;/p&gt;&lt;h3&gt;Rowing to the end of the known Java world&lt;/h3&gt;&lt;p&gt;In 2004, I knew there was a better route to programming productivity. I would just have to row a boat across an entire ocean of developer time in order to get there. The years from 2004–2014 were lonely for me as a Java developer who believed lambdas in Java were an inevitability. I set out to convince others I worked with that Java needed lambdas so badly that it would have to eventually get them. I built a library inside Goldman Sachs called Caramel which was later open-sourced as GS Collections in 2012. I was successful in convincing hundreds of developers inside of Goldman Sachs that it was better to write code using higher level method abstractions and using Anonymous Inner Classes than it was to write tens of thousands of unnecessary for loops. I convinced developers in Goldman Sachs that lambdas would arrive eventually, and using Caramel would prepare them for a new lambda-enabled Java programming language. I also suggested they would likely be able to convert Anonymous Inner Classes to Lambdas through automated refactorings.&lt;/p&gt;&lt;p&gt;The following is an example of what I told developers would eventually be possible with Java with reasonable syntactic support for lambdas.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void findUniqueFirstLastAndFullNames() &lt;br /&gt;{&lt;br /&gt;    List&amp;lt;Person&amp;gt; people = this.getListOfPeople();&lt;br /&gt;    &lt;br /&gt;    Set&amp;lt;String&amp;gt; firstNames = &lt;br /&gt;        this.getUniqueValues(people, each -&amp;gt; each.firstName());&lt;br /&gt;    Set&amp;lt;String&amp;gt; lastNames = &lt;br /&gt;        this.getUniqueValues(people, each -&amp;gt; each.lastName());&lt;br /&gt;    Set&amp;lt;String&amp;gt; fullNames = &lt;br /&gt;        this.getUniqueValues(people, each -&amp;gt; each.fullName());&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(Set.of(&quot;Bob&quot;, &quot;Sally&quot;), firstNames);&lt;br /&gt;    Assertions.assertEquals(Set.of(&quot;Smith&quot;, &quot;Taylor&quot;), lastNames);&lt;br /&gt;    Assertions.assertEquals(Set.of(&quot;Bob Smith&quot;, &quot;Sally Taylor&quot;), fullNames);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;private Set&amp;lt;String&amp;gt; getUniqueValues(&lt;br /&gt;    List&amp;lt;Person&amp;gt; people, &lt;br /&gt;    Function&amp;lt;Person, String&amp;gt; function)&lt;br /&gt;{&lt;br /&gt;    // Hofor!&lt;br /&gt;    Set&amp;lt;String&amp;gt; values = new HashSet&amp;lt;&amp;gt;();&lt;br /&gt;    for (Person each : people)&lt;br /&gt;    {&lt;br /&gt;        values.add(function.apply(each));&lt;br /&gt;    }&lt;br /&gt;    return values;&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;By 2006, I started getting in touch with folks at Sun and then Oracle pleading my case fervently that we needed to get Lambdas into the Java programming language. I watched the first set of Java lambda battles play out between 2006–2010 with &lt;a href=&quot;https://blog.joda.org/2007/12/closures-comparing-core-of-bgga-cice_9112.html&quot;&gt;BGGA, CICE, FCM&lt;/a&gt;. While these battles were happening and no one seemed to be winning, I kept quietly rowing my boat (building the Caramel library), and teaching Java developers about lambdas using the programming language I love — Smalltalk. I worked with several other amazing developers for years at Goldman Sachs building a bigger, better boat that would eventually become Eclipse Collections. I knew that once I reached land with lambdas for Java, folks on the Island of &lt;em&gt;Hofor!&lt;/em&gt; would want to be able to leave the island for loops and experience the power of lambdas with feature-rich collections that could immediately leverage them.&lt;/p&gt;&lt;p&gt;I struggled at first with how to teach developers what using lambdas would be like in Java. Between 2007–2014 we taught around 200 Java developers in Goldman Sachs a week-long class in Smalltalk. The experience using Smalltalk gave them a better appreciation for OO programming and TDD. I couldn’t show these developers how to use lambdas in Java until Java 8 was released in March 2014. Instead, I was able to show them how to use lambdas with rich collections in Smalltalk, and this showed them what would be possible eventually in Java. They were able to see what I saw every day. I saw the potential for land, well, lambdas landing in Java eventually anyway.&lt;/p&gt;&lt;p&gt;This is how I picture the code examples above with my Smalltalk lenses on.&lt;/p&gt;&lt;pre&gt;testFindUniqueFirstLastAndFullNames&lt;br /&gt; |people firstNames lastNames fullNames|&lt;br /&gt; &lt;br /&gt; people := OrderedCollection &lt;br /&gt;  with: (Person new firstName: 'Bob'; lastName: 'Smith')  &lt;br /&gt;  with: (Person new firstName: 'Sally'; lastName: 'Taylor').&lt;br /&gt; &lt;br /&gt; firstNames := (people collect: #firstName) asSet.&lt;br /&gt; lastNames := (people collect: #lastName) asSet.&lt;br /&gt; fullNames := (people collect: #fullName) asSet.&lt;br /&gt; &lt;br /&gt; self assert: firstNames equals: (Set with: 'Bob' with: 'Sally').    &lt;br /&gt; self assert: lastNames equals: (Set with: 'Smith' with: 'Taylor').&lt;br /&gt; self assert: fullNames equals: (Set with: 'Bob Smith' with: 'Sally Taylor').&lt;/pre&gt;&lt;p&gt;This is the syntax for an individual method in Smalltalk. The method name is testFindUniqueFirstLastAndFullNames which I added to a class called PeopleTest. The method has no parameters. Smalltalk is dynamic, so there is no need to specify a return type for the method, or types for any variables. The pipes around |people firstNames lastNames fullNames| create four local variables in Smalltalk. An OrderedCollection in Smalltalk is the equivalent of Java’s List type. I create an OrderedCollection containing two instances of the class Person. The method collect: transforms the Person instances in the OrderedCollection to String in these three cases, using the specified accessors.&lt;/p&gt;&lt;p&gt;I did not actually use any lambdas in the code above, as Pharo Smalltalk made it possible to simply use a Symbol (unique String marked with a #) instead. This is the closest equivalent in Smalltalk to using what we now know as &lt;em&gt;Method References&lt;/em&gt; in Java. If I used lambdas with the collect method instead, the code above would have looked as follows. Lambdas in Smalltalk are delineated with square brackets with a pipe in the middle— [|]. The text :each to the left of the pipe defines a parameter named each. The code on the right of the pipe is the expression that will be evaluated.&lt;/p&gt;&lt;pre&gt;firstNames := (people collect: [:each | each firstName]) asSet.&lt;br /&gt;lastNames := (people collect: [:each | each lastName]) asSet.&lt;br /&gt;fullNames := (people collect: [:each | each fullName]) asSet.&lt;/pre&gt;&lt;p&gt;The method asSet converts the OrderedCollection instances that are created by calling collect: to Set instances which will make sure the values are unique.&lt;/p&gt;&lt;p&gt;Medium doesn’t support syntax highlighting for Smalltalk syntax, so I chose the closest compatible language which is Ruby. It was a nice feeling writing a small bit of Smalltalk for this blog. I used Pharo Smalltalk 11.0 as my Smalltalk IDE to create the Person class and this supporting unit test code above.&lt;/p&gt;&lt;p&gt;Writing simple code like this without for loops makes me very happy. It might surprise you if I told you that Smalltalk doesn’t have for loops. It doesn’t have statements of any kind. Everything in the Smalltalk language is “object message.” Of course, this might also explain why I dislike using for loops so much in Java.&lt;/p&gt;&lt;h3&gt;Land Ho(for)!&lt;/h3&gt;&lt;p&gt;Around 2011, I joined the JSR 335 Expert Group. Working on the JSR 335 EG was one of the greatest experiences in my career. Our mission was to get a working specification for lambdas into the Java Language. We succeeded. Java 8 was released in March 2014 with support for Lambdas, Method References, Default Methods, and Java Streams. Java finally had decent language syntax support for lambdas! Win!&lt;/p&gt;&lt;p&gt;Almost two years before the successful release of Java 8, in July 2012, I gave a talk at the JVM Language Summit. I shared what I saw as the potential for lambda support in Java to improve the quality and quantity of code that developers had to write. The slides for the talk are still available online &lt;a href=&quot;http://wiki.jvmlangsummit.com/images/c/c2/Raab_Collections_Design.pdf&quot;&gt;here&lt;/a&gt;. Slide 24 of the &lt;a href=&quot;http://wiki.jvmlangsummit.com/images/c/c2/Raab_Collections_Design.pdf&quot;&gt;PDF&lt;/a&gt; shows the code for the pattern named collect in GS Collections (now Eclipse Collections). The collect pattern in Eclipse Collections is the equivalent of the pattern named map in Java Streams.&lt;/p&gt;&lt;p&gt;If we use Java lambda expressions with the Eclipse Collections collect method to solve the problem above, the code will look as follows:&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void findUniqueFirstLastAndFullNamesEclipseCollections()&lt;br /&gt;{&lt;br /&gt;    MutableList&amp;lt;Person&amp;gt; people = Lists.mutable.with(&lt;br /&gt;            new Person(&quot;Bob&quot;, &quot;Smith&quot;),&lt;br /&gt;            new Person(&quot;Sally&quot;, &quot;Taylor&quot;));&lt;br /&gt;&lt;br /&gt;    Set&amp;lt;String&amp;gt; firstNames = &lt;br /&gt;        people.collect(person -&amp;gt; person.firstName()).toSet();&lt;br /&gt;    Set&amp;lt;String&amp;gt; lastNames = &lt;br /&gt;        people.collect(person -&amp;gt; person.lastName()).toSet();&lt;br /&gt;    Set&amp;lt;String&amp;gt; fullNames = &lt;br /&gt;        people.collect(person -&amp;gt; person.fullName()).toSet();&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(Set.of(&quot;Bob&quot;, &quot;Sally&quot;), firstNames);&lt;br /&gt;    Assertions.assertEquals(Set.of(&quot;Smith&quot;, &quot;Taylor&quot;), lastNames);&lt;br /&gt;    Assertions.assertEquals(Set.of(&quot;Bob Smith&quot;, &quot;Sally Taylor&quot;), fullNames);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;As you can see, there is no need for an extra method named getUniqueValues to create a Set based on some Function applied to each element of the collection. No more &lt;em&gt;Hofor!&lt;/em&gt; The MutableList class has the behavior collect which can transform elements in the list from one type (Person) to another (String). The toSet method then converts the MutableList to a MutableSet. MutableSet extends java.util.Set.&lt;/p&gt;&lt;h3&gt;Eclipse Collections or Java Streams?&lt;/h3&gt;&lt;p&gt;The answer to this question is yes. When I first began my quest for lambdas in Java, I didn’t imagine we would get anything quite like Java Streams in Java 8. I wanted eager methods on the collections themselves, and needed lambdas to reduce the verbosity. Eclipse Collections gives developers eager methods on collections, and so much more. Eclipse Collections has great integration with Java Collection Framework types and provides support for Java Streams, so there is no need to make an either/or decision. You can use Eclipse Collections and Java Streams together. They are complementary.&lt;/p&gt;&lt;p&gt;The following shows how to use an Eclipse Collections MutableList with Java Streams to solve the example problem. I am going to use method references here instead of lambdas to make the code even less verbose. I have a “&lt;a href=&quot;https://medium.com/javarevisited/the-elusive-and-beautiful-java-method-reference-97e566d2088b?source=friends_link&amp;amp;sk=362f57d971842ee90931a82b356fd2d2&quot;&gt;method reference preference&lt;/a&gt;” in Java. While I wanted lambdas so much in Java, method references would be an extra gift in Java 8 that I now can’t imagine programming in Java without.&lt;/p&gt;&lt;pre&gt;public static MutableList&amp;lt;Person&amp;gt; getMutableListOfPeople() &lt;br /&gt;{&lt;br /&gt;    return Lists.mutable.with(&lt;br /&gt;            new Person(&quot;Bob&quot;, &quot;Smith&quot;),&lt;br /&gt;            new Person(&quot;Sally&quot;, &quot;Taylor&quot;));&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;@Test&lt;br /&gt;public void findUniqueFirstLastAndFullNamesJavaStream()&lt;br /&gt;{&lt;br /&gt;    MutableList&amp;lt;Person&amp;gt; people = this.getMutableListOfPeople();&lt;br /&gt;&lt;br /&gt;    Set&amp;lt;String&amp;gt; firstNames =&lt;br /&gt;            people.stream()&lt;br /&gt;                    .map(Person::firstName)&lt;br /&gt;                    .collect(Collectors.toSet());&lt;br /&gt;    Set&amp;lt;String&amp;gt; lastNames =&lt;br /&gt;            people.stream()&lt;br /&gt;                    .map(Person::lastName)&lt;br /&gt;                    .collect(Collectors.toSet());&lt;br /&gt;    Set&amp;lt;String&amp;gt; fullNames =&lt;br /&gt;            people.stream()&lt;br /&gt;                    .map(Person::fullName)&lt;br /&gt;                    .collect(Collectors.toSet());&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(Set.of(&quot;Bob&quot;, &quot;Sally&quot;), firstNames);&lt;br /&gt;    Assertions.assertEquals(Set.of(&quot;Smith&quot;, &quot;Taylor&quot;), lastNames);&lt;br /&gt;    Assertions.assertEquals(Set.of(&quot;Bob Smith&quot;, &quot;Sally Taylor&quot;), fullNames);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;This code is slightly more verbose than using the eager collect method directly on the Eclipse Collections MutableList. Eclipse Collections also has custom support for lazy iteration using its own asLazy method which returns a LazyIterable type.&lt;/p&gt;&lt;p&gt;The following shows how to use Eclipse Collections with asLazy to solve the same problem.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void findUniqueFirstLastAndFullNamesAsLazy()&lt;br /&gt;{&lt;br /&gt;    MutableList&amp;lt;Person&amp;gt; people = this.getMutableListOfPeople();&lt;br /&gt;&lt;br /&gt;    LazyIterable&amp;lt;Person&amp;gt; lazyPeople = people.asLazy();&lt;br /&gt;    Set&amp;lt;String&amp;gt; firstNames =&lt;br /&gt;            lazyPeople.collect(Person::firstName).toSet();&lt;br /&gt;    Set&amp;lt;String&amp;gt; lastNames =&lt;br /&gt;            lazyPeople.collect(Person::lastName).toSet();&lt;br /&gt;    Set&amp;lt;String&amp;gt; fullNames =&lt;br /&gt;            lazyPeople.collect(Person::fullName).toSet();&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(Set.of(&quot;Bob&quot;, &quot;Sally&quot;), firstNames);&lt;br /&gt;    Assertions.assertEquals(Set.of(&quot;Smith&quot;, &quot;Taylor&quot;), lastNames);&lt;br /&gt;    Assertions.assertEquals(Set.of(&quot;Bob Smith&quot;, &quot;Sally Taylor&quot;), fullNames);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;There are some subtle difference here between Java Stream and Eclipse Collections LazyIterable. A Java Stream can only be used once. A LazyIterable can be used as many times as you need. The other difference is that Eclipse Collections API has many converter methods available directly on LazyIterable (toList, toSet, toBag, toMap) whereas Java Stream has to rely on the collect method used with Collector instances, for everything other than toList, which was added to Java Stream in JDK 16.&lt;/p&gt;&lt;p&gt;The point I would stress is that you can use Eclipse Collections types and Java Streams very well together.&lt;/p&gt;&lt;h3&gt;After ten years of lambdas in Java&lt;/h3&gt;&lt;p&gt;I took a big gamble in 2004 building a collections library in Java that needed lambdas, ten years before Java would have them. I couldn’t wait for battles over lambda syntax to start fighting what I saw as the real battle, which is teaching Java developers how to code using higher levels of abstraction with rich collection interfaces that leverage lambdas. I had to get used to the temporary eye gouging with Anonymous Inner Classes. I guess ten years in programming language time can be considered temporary in a venerable language like Java, even if at the time it felt like an eternity. I loved applying automated refactorings to replace Anonymous Inner Classes with lambdas and method references on entire code bases after Java 8 was released. I gave many Java developers inside of Goldman Sachs an amazing head start on learning and using lambdas effectively in Java 8 when they became available. If any of the Java developers I worked with in Goldman Sachs whom I taught Caramel, GS Collections, or Eclipse Collections are reading this blog, I would like to say two things.&lt;/p&gt;&lt;blockquote&gt;You are very welcome! Thank you for believing!&lt;/blockquote&gt;&lt;p&gt;I haven’t worked at Goldman Sachs for several years now. Six years ago I created an open source Java &lt;a href=&quot;https://github.com/BNYMellon/CodeKatas/tree/master/java-lambda-kata&quot;&gt;Lambda Kata&lt;/a&gt; at my current employer, to help developers I worked with learn how lambdas work in Java and how to use them effectively. I was told yesterday by a developer I work with who has been out of university for two years that this same Lambda Kata was the first time she had experienced using lambdas in Java. This surprised me. I had kind of expected lambdas to have become part of the Java curriculum in universities by now. It seems &lt;em&gt;Hofor!&lt;/em&gt; is still being taught in university.&lt;/p&gt;&lt;p&gt;So here I am, Java lambdas in hand with arguably the best Java collections framework available (&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt;) still fighting the battle of &lt;em&gt;Hofor! &lt;/em&gt;with new developers. I am ok with this. I enjoy teaching developers about using lambdas with Java and Eclipse Collections. There is a growing arsenal of &lt;a href=&quot;https://github.com/eclipse/eclipse-collections-kata&quot;&gt;Eclipse Collections Code Katas&lt;/a&gt; that leverage lambdas that I can use to arm developers with amazing productivity tools and to defend against &lt;em&gt;Hofor!&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Thank you for reading my story. It only took me two decades to tell it. I hope you found it interesting and informational. I wonder what the next decade will bring. More Java with lambdas and Eclipse Collections most likely.&lt;/p&gt;&lt;p&gt;Best of luck with &lt;em&gt;Hofor!&lt;/em&gt; in your Java coding adventures!&lt;/p&gt;&lt;p&gt;&lt;em&gt;I am the creator of and committer for the &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; OSS project, which is managed at the &lt;/em&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/technology.collections&quot;&gt;&lt;em&gt;Eclipse Foundation&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. Eclipse Collections is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=39fde576b950&quot; width=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://betterprogramming.pub/my-ten-year-quest-for-concise-lambda-expressions-in-java-39fde576b950&quot;&gt;My ten year quest for concise lambda expressions in Java&lt;/a&gt; was originally published in &lt;a href=&quot;https://betterprogramming.pub&quot;&gt;Better Programming&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</description>
	<pubDate>Sat, 26 Aug 2023 05:20:55 +0000</pubDate>
</item>
<item>
	<title>Gunnar Wagenknecht: Bazel Eclipse Feature is here!</title>
	<guid isPermaLink="false">https://wagenknecht.org/blog/?p=1128</guid>
	<link>https://wagenknecht.org/blog/archives/2023/08/bazel-eclipse-feature-is-here.html</link>
	<description>&lt;p&gt;Are you using Bazel as a build system and doing Java development? Do you want to give the Eclipse plug-in for Bazel a try?&lt;/p&gt;



&lt;p&gt;I’ve spend the last couple weeks reworking most of the plug-in to better support Bazel development. It’s approach isn’t very different from the IntelliJ plug-in, i.e. it runs Bazel query and performs Bazel builds with aspects to obtain project and classpath information from Bazel. With that information it creates projects in Eclipse. It also uses project views (&lt;code&gt;.bazelproject&lt;/code&gt;) to configure what’s visible in Eclipse.&lt;/p&gt;



&lt;p&gt;However, there are a few differences compared to the Bazel IntelliJ plug-in, which I’d like to highlight.&lt;/p&gt;



&lt;ol&gt;
&lt;li&gt;It uses Eclipse projects to map targets so the classpath is really scoped to the classpath of the targets.&lt;/li&gt;



&lt;li&gt;It allows for some flexibility how targets are mapped to projects – you can have one project per target or one project per package.&lt;/li&gt;



&lt;li&gt;Because of Eclipse auto-build feature of individual Java source files HotSwap just works and is fast.&lt;/li&gt;
&lt;/ol&gt;



&lt;p&gt;Documentation is &lt;a href=&quot;https://github.com/salesforce/bazel-eclipse/blob/main/docs/bef/README.md&quot;&gt;here&lt;/a&gt;. The update site is &lt;a href=&quot;https://opensource.salesforce.com/bazel-eclipse/latest/&quot;&gt;https://opensource.salesforce.com/bazel-eclipse/latest/&lt;/a&gt;.&lt;/p&gt;



&lt;p&gt;Oh and there is a&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=sfdc.bazel-vscode-java&quot;&gt; preview release of a VS Code extension&lt;/a&gt; using the same feature to setup the Java Language Server in VS Code.&lt;/p&gt;</description>
	<pubDate>Fri, 25 Aug 2023 09:16:32 +0000</pubDate>
</item>
<item>
	<title>John Kellerman: Eclipse Cloud DevTools Contributor Award: STMicroelectronics for TypeScript-based GLSP Servers</title>
	<guid isPermaLink="false">7389 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/john-kellerman/eclipse-cloud-devtools-contributor-award-stmicroelectronics-typescript-based</link>
	<description>&lt;span&gt;Eclipse Cloud DevTools Contributor Award: STMicroelectronics for TypeScript-based GLSP Servers&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;The Eclipse Cloud Developer Tools contributor award for August goes to STMicroelectronics for initiating the support for TypeScript-based GLSP server implementations. This contribution marked an important starting point for a now very popular and active sub-component of GLSP: the Typescript-based GLSP server framework. This new framework not only makes it easy to implement diagrams using GLSP, entirely in TypeScript, but also enables a homogeneous developer experience with the same tooling and programming language used throughout the entire diagram editor project.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The Eclipse Graphical Language Server Platform (GLSP) is a framework for efficiently building web-based diagram editors that are easy to embed into Eclipse Theia, VS Code, Eclipse desktop or even an arbitrary web page. Please visit the &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.dev/glsp/&quot;&gt;&lt;span&gt;Eclipse GLSP website&lt;/span&gt;&lt;/a&gt;&lt;span&gt; to learn more.&lt;/span&gt;&lt;/p&gt;&lt;img class=&quot;align-center&quot; height=&quot;265&quot; src=&quot;https://lh6.googleusercontent.com/qtVL7l_s1WVBKDI6UqHi17c_6wwjzD0yN_tFcY-fsb4KKehcDJg-qKlkXIZ6ATbkQZGYXf_Hfvjh9RjafcHjqIoNRiSCRo9eKX1p0BmxbUkstMFp-ISEnvtv8ePj-UyvE91vMPEgI3nMhmp5t8fZDcs&quot; width=&quot;512&quot; /&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;GLSP provides a flexible diagram canvas for displaying diagram editors in the browser. GLSP diagram editors can connect to a server component, which handles the underlying business logic, such as data management, validation, etc. As this communication is defined in a protocol, you can actually implement a GLSP server in the language of your choice. However, with a dedicated framework, writing GLSP diagram servers with Typescript got a whole lot easier with this new GLSP server framework for Typescript. Read more about the &lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2022/07/20/eclipse-glsp-1-0-typescript-support-for-glsp-server-implementations/&quot;&gt;&lt;span&gt;TypeScript support for implementing GLSP servers&lt;/span&gt;&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;The success of open source projects such as Eclipse GLSP always depends on many people from various organizations. However, single contributions such as the one from STMicroelectronics extend the capabilities of technologies such as GLSP and make it more attractive to a new group of adopters. New adopters then contribute to making the project even better. Congratulations to STMicroelectronics and thank you for the contribution. &lt;/span&gt;&lt;/p&gt;&lt;p&gt;The &lt;a href=&quot;https://ecdtools.eclipse.org/&quot;&gt;Cloud DevTools Working Group&lt;/a&gt; provides a vendor-neutral ecosystem of open-source projects focused on defining, implementing and promoting best-in-class web and cloud-based development tools. It is hosted at the Eclipse Foundation, current members of the group include &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=848&quot;&gt;AMD&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=823&quot;&gt;Arm&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=690&quot;&gt;EclipseSource&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=682&quot;&gt;Ericsson&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=863&quot;&gt;Obeo&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=731&quot;&gt;RedHat&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=1069&quot;&gt;Renesas&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=800&quot;&gt;STMicroelectronics&lt;/a&gt; and &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=1194&quot;&gt;TypeFox&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;This Eclipse Cloud DevTools contributor award is sponsored by &lt;a href=&quot;https://eclipsesource.com/&quot;&gt;EclipseSource&lt;/a&gt;, providing &lt;a href=&quot;https://eclipsesource.com/services/tools/&quot;&gt;consulting and implementation services&lt;/a&gt; for &lt;a href=&quot;https://eclipsesource.com/web-and-cloud-based-tools/&quot;&gt;web-based tools&lt;/a&gt;, &lt;a href=&quot;https://eclipsesource.com/technology/eclipse-glsp/&quot;&gt;Eclipse GLSP&lt;/a&gt;,  &lt;a href=&quot;https://eclipsesource.com/technology/eclipse-theia/&quot;&gt;Eclipse Theia&lt;/a&gt;, and &lt;a href=&quot;https://eclipsesource.com/technology/vs-code/&quot;&gt;VS Code&lt;/a&gt;.   &lt;/p&gt;&lt;/div&gt;
      
&lt;span&gt;&lt;span&gt;John Kellerman&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;Tue, 2023-08-22 11:42&lt;/span&gt;

  &lt;div class=&quot;field field--name-field-blog-tags field--type-entity-reference field--label-above&quot;&gt;
    &lt;div class=&quot;field--label&quot;&gt;Tags&lt;/div&gt;
          &lt;div class=&quot;field--items&quot;&gt;
              &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/ecdtools&quot; hreflang=&quot;en&quot;&gt;ECDTools&lt;/a&gt;&lt;/div&gt;
          &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/clouddevtools-0&quot; hreflang=&quot;en&quot;&gt;CloudDevTools&lt;/a&gt;&lt;/div&gt;
          &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/theia&quot; hreflang=&quot;en&quot;&gt;Theia&lt;/a&gt;&lt;/div&gt;
          &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/theia-contributor-award&quot; hreflang=&quot;en&quot;&gt;Theia Contributor Award&lt;/a&gt;&lt;/div&gt;
              &lt;/div&gt;
      &lt;/div&gt;</description>
	<pubDate>Tue, 22 Aug 2023 15:42:57 +0000</pubDate>
</item>
<item>
	<title>John Kellerman: Embedded SIG Evolves to CDT Cloud Project</title>
	<guid isPermaLink="false">7387 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/john-kellerman/embedded-sig-evolves-cdt-cloud-project</link>
	<description>&lt;span&gt;Embedded SIG Evolves to CDT Cloud Project&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;p&gt;The Embedded Special Interest Group (SIG) hosted as part of the Eclipse Cloud DevTools working group has now evolved into the &lt;a href=&quot;https://eclipse.dev/cdt-cloud/&quot;&gt;CDT Cloud project&lt;/a&gt;. This reflects the growth and continuously high level of activity in the group, which has outgrown the original governance structure and matured into the establishment of several active open source initiatives under the CDT Cloud umbrella.&lt;/p&gt;&lt;p&gt;The Embedded SIG has been an open collaboration of embedded vendors and service providers, with the goal of strengthening the open source ecosystem for building web- and cloud-based tools used for C/C++ development and embedded development. Current members of the group include &lt;a href=&quot;https://www.eclipse.org/membership/showMember.php?member_id=823&quot;&gt;Arm&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/membership/showMember.php?member_id=690&quot;&gt;EclipseSource&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/membership/showMember.php?member_id=682&quot;&gt;Ericsson&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/membership/showMember.php?member_id=1069&quot;&gt;Renesas&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/membership/showMember.php?member_id=800&quot;&gt;STMicroelectronics&lt;/a&gt;, and &lt;a href=&quot;https://www.eclipse.org/membership/showMember.php?member_id=848&quot;&gt;AMD&lt;/a&gt;. You can learn more about the various CDT Cloud technical initiatives in this &lt;a href=&quot;https://ecdtools.eclipse.org/resources/blogs/2021-11-02-embedded/&quot;&gt;blog post about the Embedded SIG&lt;/a&gt;. One of the major achievements of the SIG was aligning and channeling several open source initiatives into the CDT Cloud project.&lt;/p&gt;&lt;p&gt;The CDT Cloud SIG has worked on a number of successful initiatives, including a memory inspector, TraceCompass Cloud or the &lt;a href=&quot;https://github.com/eclipse-cdt-cloud/cdt-gdb-adapter&quot;&gt;CDT GDB DAP Adapter&lt;/a&gt;. Probably the most important achievement was the creation of the CDT Cloud project itself. CDT Cloud is an umbrella project hosting open source components for building custom web-based C/C++ tools such as &lt;a href=&quot;https://github.com/eclipse-cdt-cloud/theia-trace-extension&quot;&gt;Trace Compass Cloud&lt;/a&gt; and the &lt;a href=&quot;https://github.com/eclipse-cdt-cloud/cdt-amalgamator&quot;&gt;CDT Cloud Amalgamator&lt;/a&gt;. With &lt;a href=&quot;https://www.eclipse.org/cdt-cloud/&quot;&gt;CDT Cloud Blueprint&lt;/a&gt;, the project provides a ready-to-be-used template tool (see screenshot below). Please visit the &lt;a href=&quot;https://www.eclipse.org/cdt-cloud/&quot;&gt;CDT Cloud website&lt;/a&gt; for more information about the sub components and initiatives of the CDT Cloud project.&lt;/p&gt;&lt;img class=&quot;align-center&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/2023-08/CDT%20Cloud.png&quot; width=&quot;70.58%&quot; /&gt;&lt;p&gt;A great big thanks to Rob Moran who has been the chair for the Embedded SIG over several years and largely responsible for its success. Rob has consequently also taken a leading role in the CDT Cloud project.&lt;/p&gt;&lt;p&gt;If you are interested in joining the ecosystem or learn more about it, there is an &lt;a href=&quot;https://github.com/eclipse-cdt-cloud/cdt-cloud/wiki/CDT-Cloud-Meetings&quot;&gt;open monthly call&lt;/a&gt; to meet the community of CDT Cloud!&lt;/p&gt;&lt;/div&gt;
      
&lt;span&gt;&lt;span&gt;John Kellerman&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;Mon, 2023-08-21 12:39&lt;/span&gt;

  &lt;div class=&quot;field field--name-field-blog-tags field--type-entity-reference field--label-above&quot;&gt;
    &lt;div class=&quot;field--label&quot;&gt;Tags&lt;/div&gt;
          &lt;div class=&quot;field--items&quot;&gt;
              &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/ecdtools&quot; hreflang=&quot;en&quot;&gt;ECDTools&lt;/a&gt;&lt;/div&gt;
          &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/clouddevtools-0&quot; hreflang=&quot;en&quot;&gt;CloudDevTools&lt;/a&gt;&lt;/div&gt;
          &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/opensource-0&quot; hreflang=&quot;en&quot;&gt;OpenSource&lt;/a&gt;&lt;/div&gt;
              &lt;/div&gt;
      &lt;/div&gt;</description>
	<pubDate>Mon, 21 Aug 2023 16:39:01 +0000</pubDate>
</item>
<item>
	<title>Christopher Guindon: Help Us Test the New Version of the Eclipse Marketplace Website</title>
	<guid isPermaLink="true">https://www.chrisguindon.com/post/help-us-test-the-new-version-of-the-eclipse-marketplace-website/</guid>
	<link>https://www.chrisguindon.com/post/help-us-test-the-new-version-of-the-eclipse-marketplace-website/</link>
	<description>&lt;p&gt;The Eclipse Marketplace, your platform for discovering and installing Eclipse IDE extensions, is taking a big step forward. With &lt;a href=&quot;https://www.drupal.org/psa-2023-06-07&quot;&gt;Drupal 7 approaching its end-of-life&lt;/a&gt; in January 2025, we must move towards a more supported and robust version of Drupal.&lt;/p&gt;
&lt;p&gt;As we prepare to go live with this new version, we’re turning to you, our valued community, to assist us with the testing. Our goal is to ensure that the new Drupal 9 implementation of the Eclipse Marketplace website delivers the quality and functionalities we all have come to rely on. To this end, while this new implementation does make some updates in functionality and other enhancements, it largely is a migration of the existing marketplace functionality.&lt;/p&gt;
&lt;p&gt;You can access the staging instance at &lt;a href=&quot;https://marketplace-staging-d9.eclipse.org&quot;&gt;https://marketplace-staging-d9.eclipse.org&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;areas-up-for-testing&quot;&gt;Areas Up for Testing:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;MarketPlace Client (MPC) in Eclipse IDE:&lt;/strong&gt; Our new API implementation and the revamped favorite management system are up for review. For detailed steps on how to configure your Eclipse IDE to query our staging server, please refer to the &lt;a href=&quot;https://wiki.eclipse.org/Marketplace/REST#Retrieving_a_listing_of_all_catalogs&quot;&gt;Marketplace REST API Documentation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Editing and Content Management Features:&lt;/strong&gt; For extension maintainers, we’ve introduced a mobile-responsive theme and made several content management improvements.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Search Performance and Accuracy:&lt;/strong&gt; It’s vital to ensure the revamped search mechanism operates with efficiency and accuracy.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;General Website Features:&lt;/strong&gt; Explore the site and confirm all the familiar features are functioning seamlessly.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;how-should-i-submit-feedback&quot;&gt;How Should I Submit Feedback?&lt;/h2&gt;
&lt;p&gt;Please submit your feedback via a new &lt;a href=&quot;https://gitlab.eclipse.org/eclipsefdn/it/websites/marketplace.eclipse.org/-/issues/new?issue%5Btitle%5D=Staging+feedback:&amp;amp;issuable_template=staging_feedback&quot;&gt;Gitlab issue&lt;/a&gt;. When sharing your experiences, include pertinent details such as the current behavior, the desired outcome, the affected URL, any specific search queries alongside expected results, and/or any other information that may be relevant.&lt;/p&gt;
&lt;p&gt;For complete guidance, refer to the &lt;a href=&quot;https://gitlab.eclipse.org/eclipsefdn/it/websites/marketplace.eclipse.org/-/issues/195&quot;&gt;dedicated issue&lt;/a&gt; we’ve set up for this testing phase.&lt;/p&gt;
&lt;h2 id=&quot;facing-a-glitch&quot;&gt;Facing a Glitch?&lt;/h2&gt;
&lt;p&gt;If you hit any roadblocks accessing our staging server or configuring MPC, feel free to drop a comment on our &lt;a href=&quot;https://gitlab.eclipse.org/eclipsefdn/it/websites/marketplace.eclipse.org/-/issues/195&quot;&gt;issue&lt;/a&gt; dedicated to this testing phase.&lt;/p&gt;
&lt;p&gt;Your contribution ensures that our community continues to have the best tools at its disposal.&lt;/p&gt;
&lt;p&gt;Let’s make the Eclipse Marketplace a robust and seamless experience for everyone. Dive in, test, and share your feedback. Your insights can make all the difference.&lt;/p&gt;</description>
	<pubDate>Mon, 21 Aug 2023 15:20:02 +0000</pubDate>
</item>
<item>
	<title>Andrey Loskutov: Xtext job</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-342159971341432126.post-6332295228613738575</guid>
	<link>http://javaclipse.blogspot.com/2023/04/xtext-job.html</link>
	<description>&lt;p&gt; Do you want to have...&lt;/p&gt;&lt;ul&gt;&lt;li&gt;a very challenging and never boring job on an extreme complex piece of software?&lt;/li&gt;&lt;li&gt;agile and intercultural working environment in Germany?&lt;/li&gt;&lt;li&gt;work for a &lt;b&gt;real&lt;/b&gt; high-tech company (we build semiconductor test hardware to test chips from tomorrow for almost all chip companies on the world)?&lt;/li&gt;&lt;li&gt;a top notch RHEL workstation with 256 GB RAM, SSD and 16 core Xeon?&lt;/li&gt;&lt;li&gt;a recent Thinkpad of your choice?&lt;/li&gt;&lt;li&gt;possibility to work 50% or more in home office?&lt;/li&gt;&lt;li&gt;not only good salary but also other benefits?&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://advantest-career.de/en/ueber-uns/&quot;&gt;We&lt;/a&gt; (&lt;a href=&quot;https://www.advantest.com/about/offices/aeg.html&quot;&gt;Advantest Europe GmbH&lt;/a&gt;) are hiring! We are the leader in semiconductor testing industry and also in the top 10 employees in the IT industry in Germany (see &lt;a href=&quot;https://www.kununu.com/de/advantest-europe-gmbh&quot;&gt;our Kununu profile&lt;/a&gt;).&lt;/p&gt;&lt;div&gt;&lt;br /&gt;I have &lt;a href=&quot;https://recruiting.adp.com/srccar/public/nghome.guid?c=2168307&amp;amp;d=External&amp;amp;prc=RMPOD4&amp;amp;r=5000945485006&amp;amp;from_login=1&quot; target=&quot;_blank&quot;&gt;1 open job position for &lt;b&gt;Eclipse/Xtext&lt;/b&gt; developer&lt;/a&gt; in my team in &lt;a href=&quot;https://goo.gl/maps/FgrdmJnCh8T2&quot;&gt;our main office&lt;/a&gt; in BÃ¶blingen (and of course we have &lt;a href=&quot;https://recruiting.adp.com/srccar/public/RTI.home?c=2168307&amp;amp;d=External&quot; target=&quot;_blank&quot;&gt;way more other job offers&lt;/a&gt;).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;The main job focus is &lt;a href=&quot;https://www.eclipse.org/Xtext/&quot;&gt;Xtext&lt;/a&gt; support in house in the context of the very complex, Eclipse based IDE, used as the front end for the semiconductor tester. Other responsibility will be helping with the &lt;a href=&quot;https://www.eclipse.org/Xtext/&quot;&gt;Xtext project&lt;/a&gt; maintenance in general (bug fixes, releng jobs etc).&lt;div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;What do we want from you?&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;You should have a proven Xtext development experience or comparable experience in language engineering and language generation frameworks&lt;/li&gt;&lt;li&gt;You should be able to mentor other engineers in all Xtext related areas&lt;/li&gt;&lt;li&gt;You should be able to express yourself very good (both spoken/written) in English or German&lt;/li&gt;&lt;li&gt;You should have fun reading thread dumps and debugging unknown code&lt;/li&gt;&lt;li&gt;You should have very good both computer science education and core Java knowledge&lt;/li&gt;&lt;li&gt;Ideally you should have experience with open source projects development&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;The position is in my team, I will be your team lead.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;We speak English (main job language), German, Java and few other languages here. &lt;/div&gt;&lt;div&gt;If you are interested, just drop me a mail.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 15 Aug 2023 14:16:51 +0000</pubDate>
	<author>noreply@blogger.com (Andrey Loskutov)</author>
</item>
<item>
	<title>Donald Raab: Bonus Slides from QCon NY 2023</title>
	<guid isPermaLink="false">https://medium.com/p/40a3cd019c9</guid>
	<link>https://donraab.medium.com/bonus-slides-from-qcon-ny-2023-40a3cd019c9?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;The slides that didn’t make the 50 minute time limit for our talk.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/0*d1aSKP0pHoXhZpQl&quot; /&gt;&lt;figcaption&gt;Photo by &lt;a href=&quot;https://unsplash.com/@themakerjess?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;The Maker Jess&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;No time? No problem.&lt;/h3&gt;&lt;p&gt;While working on a &lt;a href=&quot;https://qconnewyork.com/presentation/jun2023/performance-and-scale-domain-oriented-objects-vs-tabular-data-structures&quot;&gt;performance talk for QCon New York&lt;/a&gt;, my co-speaker &lt;a href=&quot;https://medium.com/u/cc0e8a7ae567&quot;&gt;Rustam Mehmandarov&lt;/a&gt; and I had more material than we had time for during our presentation. Our solution was simple. Don’t delete the slides. Move them to the Appendix.&lt;/p&gt;&lt;p&gt;The slides are available as AsciiDoc in &lt;a href=&quot;https://github.com/mehmandarov/java-collection-dataframes-perf/tree/main/presentation&quot;&gt;this GitHub repo&lt;/a&gt;. The talk was about memory-efficiency, and the Appendix contains some more examples folks might find interesting.&lt;/p&gt;&lt;p&gt;I also wrote a prequel blog for the talk, which goes into much more detail about the historical context for the talk. The following is the link to the prequel blog titled “Sweating the small stuff in Java.”&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://betterprogramming.pub/sweating-the-small-stuff-in-java-dbd695166d13&quot;&gt;Sweating the small stuff in Java&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Writing the prequel blog saved about 15 minutes from the talk.&lt;/p&gt;&lt;h3&gt;Does anyone ever look at the Appendix?&lt;/h3&gt;&lt;p&gt;I know I do occasionally. Here’s the &lt;a href=&quot;https://github.com/mehmandarov/java-collection-dataframes-perf/blob/main/presentation/A0_appendix.adoc&quot;&gt;Appendix&lt;/a&gt; for our talk. You will find some links to resources on the first page, but there is more. The following sections of the blog will show the slides as they would appear in IntelliJ which is what we used along with AsciiDoc in the live presentation.&lt;/p&gt;&lt;h3&gt;Appendix 0 — Resources&lt;/h3&gt;&lt;p&gt;The first page has some useful links to resources we used or referenced in the talk.&lt;/p&gt;&lt;h4&gt;GitHub Repos&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; (creator: &lt;a href=&quot;https://medium.com/u/df39b86e9f04&quot;&gt;Donald Raab&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/vmzakharov/dataframe-ec&quot;&gt;DataFrame-EC&lt;/a&gt; (creator: &lt;a href=&quot;https://medium.com/u/7db07b72520d&quot;&gt;Vladimir Zakharov&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/FasterXML/jackson-dataformats-text&quot;&gt;Jackson Dataformat CSV&lt;/a&gt; (creator: &lt;a href=&quot;https://medium.com/u/b9b3ec1cfbf7&quot;&gt;@cowtowncoder&lt;/a&gt; )&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/FasterXML/jackson-datatypes-collections&quot;&gt;Jackson Datatypes Collections&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Kata Repos&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections-kata&quot;&gt;Eclipse Collections Kata&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/vmzakharov/dataframe-ec-kata&quot;&gt;DataFrame-EC Kata&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Articles&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/wiki/Articles&quot;&gt;Eclipse Collections&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/vmzakharov/dataframe-ec/blob/master/README.md&quot;&gt;DataFrame-EC&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/tag/jackson&quot;&gt;Jackson on Medium&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;We had referenced the Java Object Layout tool earlier in our talk, which is the tool we used for measuring memory footprints. Here’s a link to the &lt;a href=&quot;https://github.com/mehmandarov/java-collection-dataframes-perf/blob/main/presentation/06_measuring_memory_cost.adoc&quot;&gt;slide&lt;/a&gt; with the references to JOL that will help explain how we came up with some of the example slides that follow. The following image shows the slide as it appeared in our talk.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*4uTLdWofBPrB2ZjHhO4DjA.png&quot; /&gt;&lt;figcaption&gt;Measuring Memory Cost in Java using JOL&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Appendix 1 — Boxed vs. Primitive Lists&lt;/h3&gt;&lt;p&gt;We didn’t have time to show every memory cost comparison during the talk that we did, so here’s the one where we compared a java.util.ArrayList of Integer with an IntArrayList. Each List contains integer values 1 through 10.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*B6ikCSMj0veu6Bv01pnAAw.png&quot; /&gt;&lt;figcaption&gt;Memory Footprint — Boxed vs. Primitive Lists&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Note, the extra cost here of 160 bytes for ArrayList is due to the boxing of int values as Integer instances.&lt;/p&gt;&lt;h3&gt;Appendix 2 — Mutable vs. Immutable Lists&lt;/h3&gt;&lt;p&gt;The JDK provides both Mutable and Immutable List implementations now. They both implement the List interface. Most folks won’t realize that the Immutable List implementations are more memory efficient than their Mutable counterparts. This is because they are trimmed-to-size since they don’t change. There are ImmutableCollections$ListN and ImmutableCollections$List12 implementations. The latter should be read as ListOneTwo, not ListTwelve, which is how I read it when I first saw the class. This class contains either one or two elements.&lt;/p&gt;&lt;p&gt;In this example, we created a List with two Integer instances. The first class we used is ArrayList and then we created a copy of the ArrayList into an Immutable List using List.copyOf().&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*9Vhzxw67EIxxI2zqUDm_iw.png&quot; /&gt;&lt;figcaption&gt;Memory Footprint — Mutable vs. Immutable Lists&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;The boxing cost is the same between the Mutable and Immutable List implementations in the JDK, but the List12 instance does not have a default sized array of size 10 like the ArrayList.&lt;/p&gt;&lt;h3&gt;Appendix 3 — Boxed vs. Primitive Map of Long → Set of Long&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/seinecle/status/1661467087523422208&quot;&gt;I was asked on Twitter&lt;/a&gt; if there was a more efficient way of creating a Map of Long to Set of Long for 200,000 Long keys using Eclipse Collections. The short answer is yes, as long as you don’t box the Long values.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*eVLUczXKyN9XoCXiKeQpDA.png&quot; /&gt;&lt;figcaption&gt;Boxed vs. Primitive Map of Long → Set of Long&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;24 bytes for each Long object. These can add up quickly depending on your use cases. Don’t box!&lt;/p&gt;&lt;h3&gt;Appendix 4 — Caching vs. Pooling&lt;/h3&gt;&lt;p&gt;We discussed pooling in our talk, and desxcribed some of the pools built into the JDK like String.intern() and the boxed Number pools available through valueOf methods on the integral value types Byte, Short, Integer, and Long. Caching is subtly different in that lookups for an object are usually provided via some index. Pooling provides uniquing and lookup is based on the instance you are looking for.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*Ou4nInfskvDaIK87oTEXmw.png&quot; /&gt;&lt;figcaption&gt;Caching vs. Pooling&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Country is implemented as a record, and we keep a cache of Country instances indexed by the country name in a Map.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*4uTp8O4Weq54LfXjF8Vgqw.png&quot; /&gt;&lt;figcaption&gt;Cache of Country instances by country name&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Appendix 5 — Scaling Conferences x50&lt;/h3&gt;&lt;p&gt;In the talk, we covered an example that scaled from 1 million Conference instances to 25 million. A few days before the talk, we tried it again with 50 million and 100 million instances, with the memory tuning done for one of the four row based solutions (Eclipse Collections ImmutableList). The attempt to load 100 million instances failed with OutOfMemoryError. I did not have time to research what the cause of the OutOfMemoryError and see if it was fixable.&lt;/p&gt;&lt;p&gt;Here is the slide with 50 million instances of Conference.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*iPKS1O6grQRSKVsD06zGVw.png&quot; /&gt;&lt;figcaption&gt;Conference Explorer — Memory Cost — Scaling Conferences x50&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;The intent here is to show how scaling impacts total memory savings. By manually tuning one of the row based solutions with a savings of 16 bytes per Conference, we were able to save over 800MB of memory. If you target the multipliers in your data, even small memory savings can become significant.&lt;/p&gt;&lt;h3&gt;Thank you and Enjoy!&lt;/h3&gt;&lt;p&gt;Rustam and I had a blast presenting at QCon New York this year, and wanted to thank the conference organizers, our track host &lt;a href=&quot;https://medium.com/u/fd242ea950aa&quot;&gt;Neha Sardana&lt;/a&gt;, and everyone who attended our talk! I hope you enjoy the bonus slides I shared here that didn’t make the cut for the talk.&lt;/p&gt;&lt;p&gt;Thank you for reading, and Happy Father’s Day!&lt;/p&gt;&lt;p&gt;&lt;em&gt;I am the creator of and committer for the &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; OSS project, which is managed at the &lt;/em&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/technology.collections&quot;&gt;&lt;em&gt;Eclipse Foundation&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. Eclipse Collections is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=40a3cd019c9&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 05 Aug 2023 18:12:18 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: Rich, Lazy, Mutable, and Immutable Interfaces in Eclipse Collections</title>
	<guid isPermaLink="false">https://medium.com/p/ce64a31b5936</guid>
	<link>https://betterprogramming.pub/rich-lazy-mutable-and-immutable-interfaces-in-eclipse-collections-ce64a31b5936?source=rss-df39b86e9f04------2</link>
	<description>&lt;h4&gt;Learn about Java collection interfaces with intention revealing names.&lt;/h4&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*0nHOXlL1FebyUlUagcmT8g.png&quot; /&gt;&lt;/figure&gt;&lt;h3&gt;A quick guide to reading this blog&lt;/h3&gt;&lt;p&gt;I wrote this blog to help explain the design of the &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; interface hierarchies to folks who are new to the library and might find the large number of interfaces disorienting to learn by browsing through code and/or Javadoc. This blog should also be a good reference for folks that understand the design of Eclipse Collections, but occasionally want a quick link to find, validate, or explain some things.&lt;/p&gt;&lt;p&gt;The rest of this blog will explain the relationship between Rich, Lazy, Mutable, and Immutable types in &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt;. The end of this blog has a &lt;a href=&quot;https://medium.com/feed/@donraab#93e8&quot;&gt;reference section&lt;/a&gt; with a list of all the unique methods that show why Eclipse Collection is a “rich” collections library for Java. Click the link to skip there if that is what you are looking for.&lt;/p&gt;&lt;p&gt;Enjoy!&lt;/p&gt;&lt;h3&gt;Everything (almost) extends Iterable&lt;/h3&gt;&lt;p&gt;All object containers in &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt;, with the exception of Multimap types, extend java.lang.Iterable. This design decision makes it possible to use any Eclipse Collections interface with a Java 5 style for each loop. This provides the most basic and flexible form of external iteration you expect from a Java Iterable.&lt;/p&gt;&lt;p&gt;All container types in Eclipse Collections, including Multimap types, favor providing &lt;em&gt;internal&lt;/em&gt; iterators like forEach that take a Functional Interface as a parameter that can be expressed as a lambda or method reference. It is not necessary to extend java.lang.Iterable to support internal iterators. As of Java 8, even java.lang.Iterable added a default forEach method to make &lt;em&gt;internal&lt;/em&gt; iterators possible on JDK types.&lt;/p&gt;&lt;p&gt;Eclipse Collections has an interface named InteralIterable that inherits directly from java.lang.Iterable. The purpose of InternalIterable is to provide internal iterators like forEach to all Eclipse Collections types. There are also two other methods defined on InternalIterable named forEachWith and forEachWithIndex.&lt;/p&gt;&lt;p&gt;The forEachWithIndex method is marked as deprecated because with unordered collections, an index is not meaningful and winds up being just an iteration counter instead. If you are looking for something to have an iteration counter over an unordered type, then forEachWithIndex (while poorly named) might be useful to you.&lt;/p&gt;&lt;p&gt;The following code shows how a for loop, forEach and forEachWith method can be used with any InternalIterable in Eclipse Collections.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void forLoopVsForEachVsForEachWith()&lt;br /&gt;{&lt;br /&gt;    InternalIterable&amp;lt;String&amp;gt; iterable = Lists.immutable.with(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);&lt;br /&gt;&lt;br /&gt;    // Java 5 for each loop&lt;br /&gt;    for (String each : iterable)&lt;br /&gt;    {&lt;br /&gt;        this.output(each, String::toUpperCase);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    // forEach with lambda&lt;br /&gt;    iterable.forEach(each -&amp;gt; this.output(each, String::toUpperCase));&lt;br /&gt;&lt;br /&gt;    // forEachWith with method reference&lt;br /&gt;    iterable.forEachWith(this::output, String::toUpperCase);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;public void output(String each, Function&amp;lt;String, String&amp;gt; function)&lt;br /&gt;{&lt;br /&gt;    System.out.print(function.valueOf(each));&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;// Output:&lt;br /&gt;// ABCABCABC&lt;/pre&gt;&lt;p&gt;The methods forEach, forEachWith, forEachWithIndex are occasionally useful. There are many more useful methods on the RichIterable interface and its child interfaces LazyIterable, MutableCollection, and ImmutableCollection.&lt;/p&gt;&lt;h3&gt;The Child and Grandchildren of InternalIterable&lt;/h3&gt;&lt;p&gt;The four “rich” types in Eclipse Collections that extend InternalIterable are RichIterable, LazyIterable, MutableCollection and ImmutableCollection. The hierarchy of these types is shown in the following class diagram.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/892/1*wVi8fFy4vUDATHM5zfeVlA.png&quot; /&gt;&lt;figcaption&gt;The “Rich” Interfaces of Eclipse Collections&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;The interfaces in the preceding diagram communicate their capabilities through the prefix in their names — Rich, Lazy, Mutable, and Immutable. Developers can leverage these names to communicate their intent to developers who use their APIs.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Rich — Read-only, serial. Lazy or eager behavior (up to implementation).&lt;/li&gt;&lt;li&gt;Lazy — Read-only, serial, lazy behavior for non-terminal methods.&lt;/li&gt;&lt;li&gt;Mutable — Serial, eager, with mutating methods for growth&lt;/li&gt;&lt;li&gt;Immutable — Serial, eager, with non-mutating methods for growth&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;What does the “Rich” in RichIterable mean?&lt;/h3&gt;&lt;p&gt;The design philosophy behind RichIterable favored defining useful internal iteration patterns that were seen in production code directly on the interface. There are many useful iteration patterns we saw in production code over the years, so we named them as best we could, and added them as features to the RichIterable interface. We thought the plethora of methods made this a feature-&lt;em&gt;rich&lt;/em&gt; interface. This is how we arrived at the name RichIterable for the parent interface for most of the types in Eclipse Collections. RichIterable is an Iterable that is feature-rich.&lt;/p&gt;&lt;p&gt;RichIterable provides many methods that iterate over a container or view and perform some useful algorithms. RichIterable is a &lt;em&gt;serial&lt;/em&gt; and &lt;em&gt;read-only&lt;/em&gt; interface, so it has no methods that mutate the underlying container. RichIterable can be useful as both a parameter and return type. Methods that employ RichIterable can either accept or return LazyIterable, MutableCollection, or ImmutableCollection types, while only exposing the &lt;em&gt;read-only&lt;/em&gt; API. There is no guarantee that methods on RichIterable are &lt;em&gt;lazy&lt;/em&gt; or &lt;em&gt;eager&lt;/em&gt;, or that the types are &lt;em&gt;mutable&lt;/em&gt; or &lt;em&gt;immutable&lt;/em&gt;. That decision is left up to the implementation types. If you want something to explicitly be &lt;em&gt;mutable&lt;/em&gt; or &lt;em&gt;immutable&lt;/em&gt;, then it is better to use the more explicit named types with these prefixes.&lt;/p&gt;&lt;h4&gt;How many methods makes a feature-rich interface?&lt;/h4&gt;&lt;p&gt;I don’t know if there is a minimum method count for an interface to qualify as feature-rich. I counted 176 methods defined in RichIterable that were not defined in InternalIterable or Iterable. I believe this method count qualifies.&lt;/p&gt;&lt;blockquote&gt;One Hundred Seventy Six methods = Most certainly feature-rich&lt;/blockquote&gt;&lt;p&gt;Click &lt;a href=&quot;https://medium.com/feed/@donraab#93e8&quot;&gt;this link&lt;/a&gt; or scroll to the bottom of the blog to see the list of &lt;em&gt;unique&lt;/em&gt; methods with return types defined on RichIterable&amp;lt;T&amp;gt;. I moved this list to the bottom of the blog because it has &lt;strong&gt;130&lt;/strong&gt; unique methods. That is a lot to scroll past to continue reading. I do encourage you to check out the list and see what kind of useful methods are included in RichIterable.&lt;/p&gt;&lt;p&gt;The following sections will show the methods in RichIterable that have covariant overrides in LazyIterable, MutableCollection, and ImmutableCollection.&lt;/p&gt;&lt;h3&gt;LazyIterable&lt;/h3&gt;&lt;p&gt;LazyIterable is similar to RichIterable in that it is &lt;em&gt;serial&lt;/em&gt;, &lt;em&gt;read-only&lt;/em&gt; and inherits all of the same methods. All of the methods that return an Iterable type in RichIterable have covariant overrides in LazyIterable that return LazyIterable. All the non-terminal methods on LazyIterable are &lt;em&gt;lazy&lt;/em&gt;. LazyIterable is similar to java.util.stream.Stream in that it supports lazy iteration patterns, but it is different in that a LazyIterable instance can be reused safely for multiple operations without throwing an “exhausted” RuntimeException.&lt;/p&gt;&lt;h4&gt;Covariant Overrides&lt;/h4&gt;&lt;p&gt;The following methods are overridden from RichIterable on LazyIterable and use covariant returns. What this means is that the return types are more specific in LazyIterable than the return types in RichIterable. The return types must be a subtype of the return type defined in RichIterable.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/LazyIterable.html#chunk(int)&quot;&gt;chunk&lt;/a&gt; ➡️ LazyIterable&amp;lt;RichIterable&amp;lt;T&amp;gt;&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/LazyIterable.html#collect(org.eclipse.collections.api.block.function.Function)&quot;&gt;collect&lt;/a&gt; ➡️ LazyIterable&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/LazyIterable.html#collectBoolean(org.eclipse.collections.api.block.function.primitive.BooleanFunction)&quot;&gt;collectBoolean&lt;/a&gt; ➡️ LazyBooleanIterable&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/LazyIterable.html#collectByte(org.eclipse.collections.api.block.function.primitive.ByteFunction)&quot;&gt;collectByte&lt;/a&gt; ➡️ LazyByteIterable&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/LazyIterable.html#collectChar(org.eclipse.collections.api.block.function.primitive.CharFunction)&quot;&gt;collectChar&lt;/a&gt; ➡️ LazyCharIterable&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/LazyIterable.html#collectDouble(org.eclipse.collections.api.block.function.primitive.DoubleFunction)&quot;&gt;collectDouble&lt;/a&gt; ➡️ LazyDoubleIterable&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/LazyIterable.html#collectFloat(org.eclipse.collections.api.block.function.primitive.FloatFunction)&quot;&gt;collectFloat&lt;/a&gt; ➡️ LazyFloatIterable&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/LazyIterable.html#collectIf(org.eclipse.collections.api.block.predicate.Predicate,org.eclipse.collections.api.block.function.Function)&quot;&gt;collectIf&lt;/a&gt; ➡️ LazyIterable&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/LazyIterable.html#collectInt(org.eclipse.collections.api.block.function.primitive.IntFunction)&quot;&gt;collectInt&lt;/a&gt; ➡️ LazyIntIterable&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/LazyIterable.html#collectLong(org.eclipse.collections.api.block.function.primitive.LongFunction)&quot;&gt;collectLong&lt;/a&gt; ➡️ LazyLongIterable&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/LazyIterable.html#collectShort(org.eclipse.collections.api.block.function.primitive.ShortFunction)&quot;&gt;collectShort&lt;/a&gt; ➡️ LazyShortIterable&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/LazyIterable.html#collectWith(org.eclipse.collections.api.block.function.Function2,P)&quot;&gt;collectWith&lt;/a&gt; ➡️ LazyIterable&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/LazyIterable.html#flatCollect(org.eclipse.collections.api.block.function.Function)&quot;&gt;flatCollect&lt;/a&gt; ➡️ LazyIterable&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/LazyIterable.html#flatCollectWith(org.eclipse.collections.api.block.function.Function2,P)&quot;&gt;flatCollectWith&lt;/a&gt; ➡️ LazyIterable&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/LazyIterable.html#reject(org.eclipse.collections.api.block.predicate.Predicate)&quot;&gt;reject&lt;/a&gt; ➡️ LazyIterable&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/LazyIterable.html#rejectWith(org.eclipse.collections.api.block.predicate.Predicate2,P)&quot;&gt;rejectWith&lt;/a&gt; ➡️ LazyIterable&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/LazyIterable.html#select(org.eclipse.collections.api.block.predicate.Predicate)&quot;&gt;select&lt;/a&gt; ➡️ LazyIterable&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/LazyIterable.html#selectInstancesOf(java.lang.Class)&quot;&gt;selectInstancesOf&lt;/a&gt; ➡️ LazyIterable&amp;lt;S&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/LazyIterable.html#selectWith(org.eclipse.collections.api.block.predicate.Predicate2,P)&quot;&gt;selectWith&lt;/a&gt; ➡️ LazyIterable&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/LazyIterable.html#tap(org.eclipse.collections.api.block.procedure.Procedure)&quot;&gt;tap&lt;/a&gt; ➡️ LazyIterable&amp;lt;T&amp;gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;MutableCollection&lt;/h3&gt;&lt;p&gt;MutableCollection inherits all of the methods of RichIterable, and it is &lt;em&gt;mutable&lt;/em&gt; as the prefix implies. Methods that mutate the underlying container such as add and remove are provided. All of the methods that return an Iterable type have covariant overrides in MutableCollection that return MutableCollection. All methods on MutableCollection, with the exception of asLazy, are &lt;em&gt;serial&lt;/em&gt; and &lt;em&gt;eager&lt;/em&gt;. Eager iteration patterns are very easy to understand, as they most closely resemble the code a developer would write by hand implementing an iteration pattern using a for loop.&lt;/p&gt;&lt;h4&gt;Covariant Overrides&lt;/h4&gt;&lt;p&gt;The following methods are overridden from RichIterable on MutableCollection and use covariant returns. What this means is that the return types are more specific in MutableCollection than the return types in RichIterable. The return types must be a subtype of the return type defined in RichIterable.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#aggregateBy(org.eclipse.collections.api.block.function.Function,org.eclipse.collections.api.block.function.Function0,org.eclipse.collections.api.block.function.Function2)&quot;&gt;aggregateBy&lt;/a&gt; ➡️ MutableMap&amp;lt;K, V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#aggregateInPlaceBy(org.eclipse.collections.api.block.function.Function,org.eclipse.collections.api.block.function.Function0,org.eclipse.collections.api.block.procedure.Procedure2)&quot;&gt;aggregateInPlaceBy&lt;/a&gt; ➡️ MutableMap&amp;lt;K, V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#collect(org.eclipse.collections.api.block.function.Function)&quot;&gt;collect&lt;/a&gt; ➡️ MutableCollection&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#collectBoolean(org.eclipse.collections.api.block.function.primitive.BooleanFunction)&quot;&gt;collectBoolean&lt;/a&gt; ➡️ MutableBooleanCollection&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#collectByte(org.eclipse.collections.api.block.function.primitive.ByteFunction)&quot;&gt;collectByte&lt;/a&gt; ➡️ MutableByteCollection&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#collectChar(org.eclipse.collections.api.block.function.primitive.CharFunction)&quot;&gt;collectChar&lt;/a&gt; ➡️ MutableCharCollection&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#collectDouble(org.eclipse.collections.api.block.function.primitive.DoubleFunction)&quot;&gt;collectDouble&lt;/a&gt; ➡️ MutableDoubleCollection&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#collectFloat(org.eclipse.collections.api.block.function.primitive.FloatFunction)&quot;&gt;collectFloat&lt;/a&gt; ➡️ MutableFloatCollection&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#collectIf(org.eclipse.collections.api.block.predicate.Predicate,org.eclipse.collections.api.block.function.Function)&quot;&gt;collectIf&lt;/a&gt; ➡️ MutableCollection&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#collectInt(org.eclipse.collections.api.block.function.primitive.IntFunction)&quot;&gt;collectInt&lt;/a&gt; ➡️ MutableIntCollection&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#collectLong(org.eclipse.collections.api.block.function.primitive.LongFunction)&quot;&gt;collectLong&lt;/a&gt; ➡️ MutableLongCollection&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#collectShort(org.eclipse.collections.api.block.function.primitive.ShortFunction)&quot;&gt;collectShort&lt;/a&gt; ➡️ MutableShortCollection&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#collectWith(org.eclipse.collections.api.block.function.Function2,P)&quot;&gt;collectWith&lt;/a&gt; ➡️ MutableCollection&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#countBy(org.eclipse.collections.api.block.function.Function)&quot;&gt;countBy&lt;/a&gt; ➡️ MutableBag&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#countByEach(org.eclipse.collections.api.block.function.Function)&quot;&gt;countByEach&lt;/a&gt; ➡️ MutableBag&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#countByWith(org.eclipse.collections.api.block.function.Function2,P)&quot;&gt;countByWith&lt;/a&gt; ➡️ MutableBag&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#flatCollect(org.eclipse.collections.api.block.function.Function)&quot;&gt;flatCollect&lt;/a&gt; ➡️ MutableCollection&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#flatCollectWith(org.eclipse.collections.api.block.function.Function2,P)&quot;&gt;flatCollectWith&lt;/a&gt; ➡️ MutableCollection&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#groupBy(org.eclipse.collections.api.block.function.Function)&quot;&gt;groupBy&lt;/a&gt; ➡️ MutableMultimap&amp;lt;V, T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#groupByEach(org.eclipse.collections.api.block.function.Function)&quot;&gt;groupByEach&lt;/a&gt; ➡️ MutableMultimap&amp;lt;V, T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#groupByUniqueKey(org.eclipse.collections.api.block.function.Function)&quot;&gt;groupByUniqueKey&lt;/a&gt; ➡️ MutableMap&amp;lt;V, T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#partition(org.eclipse.collections.api.block.predicate.Predicate)&quot;&gt;partition&lt;/a&gt; ➡️ PartitionMutableCollection&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#partitionWith(org.eclipse.collections.api.block.predicate.Predicate2,P)&quot;&gt;partitionWith&lt;/a&gt; ➡️ PartitionMutableCollection&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#reject(org.eclipse.collections.api.block.predicate.Predicate)&quot;&gt;reject&lt;/a&gt; ➡️ MutableCollection&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#rejectWith(org.eclipse.collections.api.block.predicate.Predicate2,P)&quot;&gt;rejectWith&lt;/a&gt; ➡️ MutableCollection&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#select(org.eclipse.collections.api.block.predicate.Predicate)&quot;&gt;select&lt;/a&gt; ➡️ MutableCollection&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#selectInstancesOf(java.lang.Class)&quot;&gt;selectInstancesOf&lt;/a&gt; ➡️ MutableCollection&amp;lt;S&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#selectWith(org.eclipse.collections.api.block.predicate.Predicate2,P)&quot;&gt;selectWith&lt;/a&gt; ➡️ MutableCollection&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#sumByDouble(org.eclipse.collections.api.block.function.Function,org.eclipse.collections.api.block.function.primitive.DoubleFunction)&quot;&gt;sumByDouble&lt;/a&gt; ➡️ MutableObjectDoubleMap&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#sumByFloat(org.eclipse.collections.api.block.function.Function,org.eclipse.collections.api.block.function.primitive.FloatFunction)&quot;&gt;sumByFloat&lt;/a&gt; ➡️ MutableObjectDoubleMap&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#sumByInt(org.eclipse.collections.api.block.function.Function,org.eclipse.collections.api.block.function.primitive.IntFunction)&quot;&gt;sumByInt&lt;/a&gt; ➡️ MutableObjectLongMap&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#sumByLong(org.eclipse.collections.api.block.function.Function,org.eclipse.collections.api.block.function.primitive.LongFunction)&quot;&gt;sumByLong&lt;/a&gt; ➡️ MutableObjectLongMap&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html#tap(org.eclipse.collections.api.block.procedure.Procedure)&quot;&gt;tap&lt;/a&gt; ➡️ MutableCollection&amp;lt;T&amp;gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;ImmutableCollection&lt;/h3&gt;&lt;p&gt;ImmutableCollection is similar to RichIterable in that it is read-only and inherits all of the same methods. All of the methods that return an Iterable type have covariant overrides in ImmutableCollection that return ImmutableCollection. All methods on ImutableCollection, with the exception of asLazy, are &lt;em&gt;serial&lt;/em&gt; and &lt;em&gt;eager&lt;/em&gt;. Eager iteration patterns are very easy to understand, as they most closely resemble the code a developer would write by hand implementing an iteration pattern using a for loop.&lt;/p&gt;&lt;h4&gt;Covariant Overrides&lt;/h4&gt;&lt;p&gt;The following methods are overridden from RichIterable on ImmutableCollection and use covariant returns. What this means is that the return types are more specific in ImmutableCollection than the return types in RichIterable. The return types must be a subtype of the return type defined in RichIterable.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#aggregateBy(org.eclipse.collections.api.block.function.Function,org.eclipse.collections.api.block.function.Function0,org.eclipse.collections.api.block.function.Function2)&quot;&gt;aggregateBy&lt;/a&gt; ➡️ ImmutableMap&amp;lt;K, V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#aggregateInPlaceBy(org.eclipse.collections.api.block.function.Function,org.eclipse.collections.api.block.function.Function0,org.eclipse.collections.api.block.procedure.Procedure2)&quot;&gt;aggregateInPlaceBy&lt;/a&gt; ➡️ ImmutableMap&amp;lt;K, V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#collect(org.eclipse.collections.api.block.function.Function)&quot;&gt;collect&lt;/a&gt; ➡️ ImmutableCollection&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#collectBoolean(org.eclipse.collections.api.block.function.primitive.BooleanFunction)&quot;&gt;collectBoolean&lt;/a&gt; ➡️ ImmutableBooleanCollection&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#collectByte(org.eclipse.collections.api.block.function.primitive.ByteFunction)&quot;&gt;collectByte&lt;/a&gt; ➡️ ImmutableByteCollection&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#collectChar(org.eclipse.collections.api.block.function.primitive.CharFunction)&quot;&gt;collectChar&lt;/a&gt; ➡️ ImmutableCharCollection&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#collectDouble(org.eclipse.collections.api.block.function.primitive.DoubleFunction)&quot;&gt;collectDouble&lt;/a&gt; ➡️ ImmutableDoubleCollection&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#collectFloat(org.eclipse.collections.api.block.function.primitive.FloatFunction)&quot;&gt;collectFloat&lt;/a&gt; ➡️ ImmutableFloatCollection&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#collectIf(org.eclipse.collections.api.block.predicate.Predicate,org.eclipse.collections.api.block.function.Function)&quot;&gt;collectIf&lt;/a&gt; ➡️ ImmutableCollection&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#collectInt(org.eclipse.collections.api.block.function.primitive.IntFunction)&quot;&gt;collectInt&lt;/a&gt; ➡️ ImmutableIntCollection&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#collectLong(org.eclipse.collections.api.block.function.primitive.LongFunction)&quot;&gt;collectLong&lt;/a&gt; ➡️ ImmutableLongCollection&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#collectShort(org.eclipse.collections.api.block.function.primitive.ShortFunction)&quot;&gt;collectShort&lt;/a&gt; ➡️ ImmutableShortCollection&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#collectWith(org.eclipse.collections.api.block.function.Function2,P)&quot;&gt;collectWith&lt;/a&gt; ➡️ ImmutableCollection&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#countBy(org.eclipse.collections.api.block.function.Function)&quot;&gt;countBy&lt;/a&gt; ➡️ ImmutableBag&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#countByEach(org.eclipse.collections.api.block.function.Function)&quot;&gt;countByEach&lt;/a&gt; ➡️ ImmutableBag&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#countByWith(org.eclipse.collections.api.block.function.Function2,P)&quot;&gt;countByWith&lt;/a&gt; ➡️ ImmutableBag&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#flatCollect(org.eclipse.collections.api.block.function.Function)&quot;&gt;flatCollect&lt;/a&gt; ➡️ ImmutableCollection&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#flatCollectWith(org.eclipse.collections.api.block.function.Function2,P)&quot;&gt;flatCollectWith&lt;/a&gt; ➡️ ImmutableCollection&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#groupBy(org.eclipse.collections.api.block.function.Function)&quot;&gt;groupBy&lt;/a&gt; ➡️ ImmutableMultimap&amp;lt;V, T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#groupByEach(org.eclipse.collections.api.block.function.Function)&quot;&gt;groupByEach&lt;/a&gt; ➡️ ImmutableMultimap&amp;lt;V, T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#groupByUniqueKey(org.eclipse.collections.api.block.function.Function)&quot;&gt;groupByUniqueKey&lt;/a&gt; ➡️ ImmutableMap&amp;lt;V, T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#partition(org.eclipse.collections.api.block.predicate.Predicate)&quot;&gt;partition&lt;/a&gt; ➡️ PartitionImmutableCollection&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#partitionWith(org.eclipse.collections.api.block.predicate.Predicate2,P)&quot;&gt;partitionWith&lt;/a&gt; ➡️ PartitionImmutableCollection&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#reject(org.eclipse.collections.api.block.predicate.Predicate)&quot;&gt;reject&lt;/a&gt; ➡️ ImmutableCollection&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#rejectWith(org.eclipse.collections.api.block.predicate.Predicate2,P)&quot;&gt;rejectWith&lt;/a&gt; ➡️ ImmutableCollection&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#select(org.eclipse.collections.api.block.predicate.Predicate)&quot;&gt;select&lt;/a&gt; ➡️ ImmutableCollection&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#selectInstancesOf(java.lang.Class)&quot;&gt;selectInstancesOf&lt;/a&gt; ➡️ ImmutableCollection&amp;lt;S&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#selectWith(org.eclipse.collections.api.block.predicate.Predicate2,P)&quot;&gt;selectWith&lt;/a&gt; ➡️ ImmutableCollection&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#sumByDouble(org.eclipse.collections.api.block.function.Function,org.eclipse.collections.api.block.function.primitive.DoubleFunction)&quot;&gt;sumByDouble&lt;/a&gt; ➡️ ImmutableObjectDoubleMap&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#sumByFloat(org.eclipse.collections.api.block.function.Function,org.eclipse.collections.api.block.function.primitive.FloatFunction)&quot;&gt;sumByFloat&lt;/a&gt; ➡️ ImmutableObjectDoubleMap&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#sumByInt(org.eclipse.collections.api.block.function.Function,org.eclipse.collections.api.block.function.primitive.IntFunction)&quot;&gt;sumByInt&lt;/a&gt; ➡️ ImmutableObjectLongMap&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#sumByLong(org.eclipse.collections.api.block.function.Function,org.eclipse.collections.api.block.function.primitive.LongFunction)&quot;&gt;sumByLong&lt;/a&gt; ➡️ ImmutableObjectLongMap&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/ImmutableCollection.html#tap(org.eclipse.collections.api.block.procedure.Procedure)&quot;&gt;tap&lt;/a&gt; ➡️ ImmutableCollection&amp;lt;T&amp;gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;Diamonds grow on trees&lt;/h3&gt;&lt;p&gt;Some of the Diamond hierarchies that formed in Eclipse Collections were the result of the Mutable part of the Eclipse Collections hierarchy intersecting with the JDK interfaces (Collection ➡️ &lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/MutableCollection.html&quot;&gt;MutableCollection&lt;/a&gt;, List ➡️ &lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/list/MutableList.html&quot;&gt;MutableList&lt;/a&gt;, Set ➡️ &lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/set/MutableSet.html&quot;&gt;MutableSet&lt;/a&gt;). I described some of these diamonds in the following blog.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://betterprogramming.pub/polishing-diamonds-in-java-3965efcdc437?source=friends_link&amp;amp;sk=5b5a2435a528b099fd741d651809ff9e&quot;&gt;Polishing Diamonds in Java&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Other diamonds become visible as you move down the hierarchy to more specific types. There is a pattern in the type hierarchy that formed at the top which results in many instances of tree hierarchies with an Iterable, Mutable, and Immutable type.&lt;/p&gt;&lt;p&gt;For each container type in the following list, there is a tree with an Iterable, Mutable, and Immutable type.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/bag/Bag.html&quot;&gt;Bag&lt;/a&gt; ➡️ &lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/bag/MutableBag.html&quot;&gt;MutableBag&lt;/a&gt; / &lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/bag/ImmutableBag.html&quot;&gt;ImmutableBag&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/list/ListIterable.html&quot;&gt;ListIterable&lt;/a&gt; ➡️ &lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/list/MutableList.html&quot;&gt;MutableList&lt;/a&gt; / &lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/list/ImmutableList.html&quot;&gt;ImmutableList&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/set/SetIterable.html&quot;&gt;SetIterable&lt;/a&gt; ➡️ &lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/set/MutableSet.html&quot;&gt;MutableSet&lt;/a&gt; / &lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/set/ImmutableSet.html&quot;&gt;ImmutableSet&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/stack/StackIterable.html&quot;&gt;StackIterable&lt;/a&gt; ➡️ &lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/stack/MutableStack.html&quot;&gt;MutableStack&lt;/a&gt; / &lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/stack/ImmutableStack.html&quot;&gt;ImmutableStack&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/map/MapIterable.html&quot;&gt;MapIterable&lt;/a&gt; ➡️ &lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/map/MutableMap.html&quot;&gt;MutableMap&lt;/a&gt; / &lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/map/ImmutableMap.html&quot;&gt;ImmutableMap&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/multimap/Multimap.html&quot;&gt;Multimap&lt;/a&gt; ➡️ &lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/multimap/MutableMultimap.html&quot;&gt;MutableMultimap&lt;/a&gt; / &lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/multimap/ImmutableMultimap.html&quot;&gt;ImmutableMultimap&lt;/a&gt;&lt;/li&gt;&lt;li&gt;etc.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The following diagram shows the diamonds that form as the RichIterable and ListIterable trees connect. A similar diamond formation happens for each container type listed above.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*t-3MtqeAN6UkdusaVTB4aA.png&quot; /&gt;&lt;figcaption&gt;Diamonds growing on trees&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;A similar symmetry exists in the Eclipse Collections primitive interface hierarchy as well. There are a lot more types in the primitive hierarchy because the hierarchy is a combination of container type and primitive type. At the top of the hierarchy is a type called PrimitiveIterable, which has a small set of common methods between primitive types. The following list shows a sample of the trees that exist for the primitive types in Eclipse Collections using the int type as an example.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/IntIterable.html&quot;&gt;IntIterable&lt;/a&gt; ➡️ &lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/primitive/MutableIntCollection.html&quot;&gt;MutableIntCollection&lt;/a&gt; / &lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/collection/primitive/ImmutableIntCollection.html&quot;&gt;ImmutableIntCollection&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/list/primitive/IntList.html&quot;&gt;IntList&lt;/a&gt; ➡️ &lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/list/primitive/MutableIntList.html&quot;&gt;MutableIntList&lt;/a&gt; / &lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/list/primitive/ImmutableIntList.html&quot;&gt;ImmutableIntList&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/set/primitive/IntSet.html&quot;&gt;IntSet&lt;/a&gt; ➡️ &lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/set/primitive/MutableIntSet.html&quot;&gt;MutableIntSet&lt;/a&gt; / &lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/set/primitive/ImmutableIntSet.html&quot;&gt;ImmutableIntSet&lt;/a&gt;&lt;/li&gt;&lt;li&gt;etc.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The following diagram shows the diamonds that form as the IntIterable and IntList trees connect.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*IypiR7sP47z_RiCrcS6vsA.png&quot; /&gt;&lt;figcaption&gt;Diamonds grow on primitive trees as well&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;I hope these diagrams share a small bit of the symmetry that exists in Eclipse Collections. I have included the select method in both the object and primitive hiearchy examples to illustrate the covariant return types at each interface level.&lt;/p&gt;&lt;h3&gt;Symmetry in most things&lt;/h3&gt;&lt;p&gt;Understanding the symmetry that exists between Iterable, Mutable, and Immutable types across different containers should make it easier to understand the various types, trees and diamonds that exist in the Eclipse Collections library. This library has evolved over almost two decades, and occasionally we still find some asymmetry that exists. We will fix issues like this when there is a measurable benefit. For the most part, if you would expect something to exist based on your understanding of how other things are defined, the symmetry will probably exist and meet your expectations.&lt;/p&gt;&lt;p&gt;Thank you for reading this blog, and I hope you learned something useful about the library along the way!&lt;/p&gt;&lt;h3&gt;All 130 Unique Methods on RichIterable&lt;/h3&gt;&lt;p&gt;The list below has all 130 unique methods in RichIterable with links to Javadoc. This list is a bit more concise than the Javadoc for &lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html&quot;&gt;RichIterable&lt;/a&gt; and should make it easier to find things quickly. The method names appear first with the return types second separated by the ➡️ emoji.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#aggregateBy(org.eclipse.collections.api.block.function.Function,org.eclipse.collections.api.block.function.Function0,org.eclipse.collections.api.block.function.Function2)&quot;&gt;aggregateBy&lt;/a&gt; ➡️ MapIterable&amp;lt;K, V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#aggregateInPlaceBy(org.eclipse.collections.api.block.function.Function,org.eclipse.collections.api.block.function.Function0,org.eclipse.collections.api.block.procedure.Procedure2)&quot;&gt;aggregateInPlaceBy&lt;/a&gt; ➡️ MapIterable&amp;lt;K, V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#allSatisfy(org.eclipse.collections.api.block.predicate.Predicate)&quot;&gt;allSatisfy&lt;/a&gt; ➡️ boolean&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#allSatisfyWith(org.eclipse.collections.api.block.predicate.Predicate2,P)&quot;&gt;allSatisfyWith&lt;/a&gt; ➡️ boolean&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#anySatisfy(org.eclipse.collections.api.block.predicate.Predicate)&quot;&gt;anySatisfy&lt;/a&gt; ➡️ boolean&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#anySatisfyWith(org.eclipse.collections.api.block.predicate.Predicate2,P)&quot;&gt;anySatisfyWith&lt;/a&gt; ➡️ boolean&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#appendString(java.lang.Appendable)&quot;&gt;appendString&lt;/a&gt; ➡️ void&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#asLazy()&quot;&gt;asLazy&lt;/a&gt; ➡️ LazyIterable&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#chunk(int)&quot;&gt;chunk&lt;/a&gt; ➡️ RichIterable&amp;lt;RichIterable&amp;lt;T&amp;gt;&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#collect(org.eclipse.collections.api.block.function.Function)&quot;&gt;collect&lt;/a&gt; ➡️ RichIterable&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#collectBoolean(org.eclipse.collections.api.block.function.primitive.BooleanFunction)&quot;&gt;collectBoolean&lt;/a&gt; ➡️ BooleanIterable&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#collectByte(org.eclipse.collections.api.block.function.primitive.ByteFunction)&quot;&gt;collectByte&lt;/a&gt; ➡️ ByteIterable&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#collectChar(org.eclipse.collections.api.block.function.primitive.CharFunction)&quot;&gt;collectChar&lt;/a&gt; ➡️ CharIterable&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#collectDouble(org.eclipse.collections.api.block.function.primitive.DoubleFunction)&quot;&gt;collectDouble&lt;/a&gt; ➡️ DoubleIterable&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#collectFloat(org.eclipse.collections.api.block.function.primitive.FloatFunction)&quot;&gt;collectFloat&lt;/a&gt; ➡️ FloatIterable&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#collectIf(org.eclipse.collections.api.block.predicate.Predicate,org.eclipse.collections.api.block.function.Function)&quot;&gt;collectIf&lt;/a&gt; ➡️ RichIterable&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#collectInt(org.eclipse.collections.api.block.function.primitive.IntFunction)&quot;&gt;collectInt&lt;/a&gt; ➡️ IntIterable&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#collectLong(org.eclipse.collections.api.block.function.primitive.LongFunction)&quot;&gt;collectLong&lt;/a&gt; ➡️ LongIterable&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#collectShort(org.eclipse.collections.api.block.function.primitive.ShortFunction)&quot;&gt;collectShort&lt;/a&gt; ➡️ ShortIterable&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#collectWith(org.eclipse.collections.api.block.function.Function2,P)&quot;&gt;collectWith&lt;/a&gt; ➡️ RichIterable&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#contains(java.lang.Object)&quot;&gt;contains&lt;/a&gt; ➡️ boolean&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#containsAll(java.util.Collection)&quot;&gt;containsAll&lt;/a&gt; ➡️ boolean&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#containsAllArguments(java.lang.Object...)&quot;&gt;containsAllArguments&lt;/a&gt; ➡️ boolean&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#containsAllIterable(java.lang.Iterable)&quot;&gt;containsAllIterable&lt;/a&gt; ➡️ boolean&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#containsAny(java.util.Collection)&quot;&gt;containsAny&lt;/a&gt; ➡️ boolean&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#containsAnyIterable(java.lang.Iterable)&quot;&gt;containsAnyIterable&lt;/a&gt; ➡️ boolean&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#containsBy(org.eclipse.collections.api.block.function.Function,V)&quot;&gt;containsBy&lt;/a&gt; ➡️ boolean&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#containsNone(java.util.Collection)&quot;&gt;containsNone&lt;/a&gt; ➡️ boolean&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#containsNoneIterable(java.lang.Iterable)&quot;&gt;containsNoneIterable&lt;/a&gt; ➡️ boolean&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#count(org.eclipse.collections.api.block.predicate.Predicate)&quot;&gt;count&lt;/a&gt; ➡️ int&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#countBy(org.eclipse.collections.api.block.function.Function)&quot;&gt;countBy&lt;/a&gt; ➡️ Bag&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#countByEach(org.eclipse.collections.api.block.function.Function)&quot;&gt;countByEach&lt;/a&gt; ➡️ Bag&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#countByWith(org.eclipse.collections.api.block.function.Function2,P)&quot;&gt;countByWith&lt;/a&gt; ➡️ Bag&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#countWith(org.eclipse.collections.api.block.predicate.Predicate2,P)&quot;&gt;countWith&lt;/a&gt; ➡️ int&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#detect(org.eclipse.collections.api.block.predicate.Predicate)&quot;&gt;detect&lt;/a&gt; ➡️ T&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#detectIfNone(org.eclipse.collections.api.block.predicate.Predicate,org.eclipse.collections.api.block.function.Function0)&quot;&gt;detectIfNone&lt;/a&gt; ➡️ T&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#detectOptional(org.eclipse.collections.api.block.predicate.Predicate)&quot;&gt;detectOptional&lt;/a&gt; ➡️ Optional&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#detectWith(org.eclipse.collections.api.block.predicate.Predicate2,P)&quot;&gt;detectWith&lt;/a&gt; ➡️ T&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#detectWithIfNone(org.eclipse.collections.api.block.predicate.Predicate2,P,org.eclipse.collections.api.block.function.Function0)&quot;&gt;detectWithIfNone&lt;/a&gt; ➡️ T&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#detectWithOptional(org.eclipse.collections.api.block.predicate.Predicate2,P)&quot;&gt;detectWithOptional&lt;/a&gt; ➡️ Optional&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#each(org.eclipse.collections.api.block.procedure.Procedure)&quot;&gt;each&lt;/a&gt; ➡️ void&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#flatCollect(org.eclipse.collections.api.block.function.Function)&quot;&gt;flatCollect&lt;/a&gt; ➡️ RichIterable&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#flatCollectBoolean(org.eclipse.collections.api.block.function.Function,R)&quot;&gt;flatCollectBoolean&lt;/a&gt; ➡️ R extends BooleanIterable&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#flatCollectByte(org.eclipse.collections.api.block.function.Function,R)&quot;&gt;flatCollectByte&lt;/a&gt; ➡️ R extends ByteIterable&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#flatCollectChar(org.eclipse.collections.api.block.function.Function,R)&quot;&gt;flatCollectChar&lt;/a&gt; ➡️ R extends CharIterable&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#flatCollectDouble(org.eclipse.collections.api.block.function.Function,R)&quot;&gt;flatCollectDouble&lt;/a&gt; ➡️ R extends DoubleIterable&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#flatCollectFloat(org.eclipse.collections.api.block.function.Function,R)&quot;&gt;flatCollectFloat&lt;/a&gt; ➡️ R extends FloatIterable&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#flatCollectInt(org.eclipse.collections.api.block.function.Function,R)&quot;&gt;flatCollectInt&lt;/a&gt; ➡️ R extends IntIterable&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#flatCollectLong(org.eclipse.collections.api.block.function.Function,R)&quot;&gt;flatCollectLong&lt;/a&gt; ➡️ R extends LongIterable&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#flatCollectShort(org.eclipse.collections.api.block.function.Function,R)&quot;&gt;flatCollectShort&lt;/a&gt; ➡️ R extends ShortIterable&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#flatCollectWith(org.eclipse.collections.api.block.function.Function2,P)&quot;&gt;flatCollectWith&lt;/a&gt; ➡️ RichIterable&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#forEach(org.eclipse.collections.api.block.procedure.Procedure)&quot;&gt;forEach&lt;/a&gt; ➡️ void&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#getAny()&quot;&gt;getAny&lt;/a&gt; ➡️ T&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#getFirst()&quot;&gt;getFirst&lt;/a&gt; ➡️ T&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#getLast()&quot;&gt;getLast&lt;/a&gt; ➡️ T&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#getOnly()&quot;&gt;getOnly&lt;/a&gt; ➡️ T&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#groupBy(org.eclipse.collections.api.block.function.Function)&quot;&gt;groupBy&lt;/a&gt; ➡️ Multimap&amp;lt;V, T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#groupByAndCollect(org.eclipse.collections.api.block.function.Function,org.eclipse.collections.api.block.function.Function,R)&quot;&gt;groupByAndCollect&lt;/a&gt; ➡️ R extends MutableMultimap&amp;lt;K, V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#groupByEach(org.eclipse.collections.api.block.function.Function)&quot;&gt;groupByEach&lt;/a&gt; ➡️ Multimap&amp;lt;V, T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#groupByUniqueKey(org.eclipse.collections.api.block.function.Function)&quot;&gt;groupByUniqueKey&lt;/a&gt; ➡️ MapIterable&amp;lt;V, T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#injectInto(IV,org.eclipse.collections.api.block.function.Function2)&quot;&gt;injectInto&lt;/a&gt; ➡️ IV&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#injectIntoDouble(double,org.eclipse.collections.api.block.function.primitive.DoubleObjectToDoubleFunction)&quot;&gt;injectIntoDouble&lt;/a&gt; ➡️ double&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#injectIntoFloat(float,org.eclipse.collections.api.block.function.primitive.FloatObjectToFloatFunction)&quot;&gt;injectIntoFloat&lt;/a&gt; ➡️ float&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#injectIntoInt(int,org.eclipse.collections.api.block.function.primitive.IntObjectToIntFunction)&quot;&gt;injectIntoInt&lt;/a&gt; ➡️ int&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#injectIntoLong(long,org.eclipse.collections.api.block.function.primitive.LongObjectToLongFunction)&quot;&gt;injectIntoLong&lt;/a&gt; ➡️ long&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#into(R)&quot;&gt;into&lt;/a&gt; ➡️ R&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#isEmpty()&quot;&gt;isEmpty&lt;/a&gt; ➡️ boolean&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#makeString()&quot;&gt;makeString&lt;/a&gt; ➡️ String&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#max()&quot;&gt;max&lt;/a&gt; ➡️ T&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#maxBy(org.eclipse.collections.api.block.function.Function)&quot;&gt;maxBy&lt;/a&gt; ➡️ T&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#maxByOptional(org.eclipse.collections.api.block.function.Function)&quot;&gt;maxByOptional&lt;/a&gt; ➡️ Optional&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#maxOptional()&quot;&gt;maxOptional&lt;/a&gt; ➡️ Optional&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#min()&quot;&gt;min&lt;/a&gt; ➡️ T&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#minBy(org.eclipse.collections.api.block.function.Function)&quot;&gt;minBy&lt;/a&gt; ➡️ T&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#minByOptional(org.eclipse.collections.api.block.function.Function)&quot;&gt;minByOptional&lt;/a&gt; ➡️ Optional&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#minOptional()&quot;&gt;minOptional&lt;/a&gt; ➡️ Optional&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#noneSatisfy(org.eclipse.collections.api.block.predicate.Predicate)&quot;&gt;noneSatisfy&lt;/a&gt; ➡️ boolean&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#noneSatisfyWith(org.eclipse.collections.api.block.predicate.Predicate2,P)&quot;&gt;noneSatisfyWith&lt;/a&gt; ➡️ boolean&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#notEmpty()&quot;&gt;notEmpty&lt;/a&gt; ➡️ boolean&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#partition(org.eclipse.collections.api.block.predicate.Predicate)&quot;&gt;partition&lt;/a&gt; ➡️ PartitionIterable&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#partitionWith(org.eclipse.collections.api.block.predicate.Predicate2,P)&quot;&gt;partitionWith&lt;/a&gt; ➡️ PartitionIterable&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#reduce(java.util.function.BinaryOperator)&quot;&gt;reduce&lt;/a&gt; ➡️ Optional&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#reduceInPlace(java.util.function.Supplier,java.util.function.BiConsumer)&quot;&gt;reduceInPlace&lt;/a&gt; ➡️ R&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#reject(org.eclipse.collections.api.block.predicate.Predicate)&quot;&gt;reject&lt;/a&gt; ➡️ RichIterable&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#rejectWith(org.eclipse.collections.api.block.predicate.Predicate2,P)&quot;&gt;rejectWith&lt;/a&gt; ➡️ RichIterable&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#select(org.eclipse.collections.api.block.predicate.Predicate)&quot;&gt;select&lt;/a&gt; ➡️ RichIterable&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#selectInstancesOf(java.lang.Class)&quot;&gt;selectInstancesOf&lt;/a&gt; ➡️ RichIterable&amp;lt;S&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#selectWith(org.eclipse.collections.api.block.predicate.Predicate2,P)&quot;&gt;selectWith&lt;/a&gt; ➡️ RichIterable&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#size()&quot;&gt;size&lt;/a&gt; ➡️ int&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#sumByDouble(org.eclipse.collections.api.block.function.Function,org.eclipse.collections.api.block.function.primitive.DoubleFunction)&quot;&gt;sumByDouble&lt;/a&gt; ➡️ ObjectDoubleMap&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#sumByFloat(org.eclipse.collections.api.block.function.Function,org.eclipse.collections.api.block.function.primitive.FloatFunction)&quot;&gt;sumByFloat&lt;/a&gt; ➡️ ObjectDoubleMap&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#sumByInt(org.eclipse.collections.api.block.function.Function,org.eclipse.collections.api.block.function.primitive.IntFunction)&quot;&gt;sumByInt&lt;/a&gt; ➡️ ObjectLongMap&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#sumByLong(org.eclipse.collections.api.block.function.Function,org.eclipse.collections.api.block.function.primitive.LongFunction)&quot;&gt;sumByLong&lt;/a&gt; ➡️ ObjectLongMap&amp;lt;V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#summarizeDouble(org.eclipse.collections.api.block.function.primitive.DoubleFunction)&quot;&gt;summarizeDouble&lt;/a&gt; ➡️ DoubleSummaryStatistics&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#summarizeFloat(org.eclipse.collections.api.block.function.primitive.FloatFunction)&quot;&gt;summarizeFloat&lt;/a&gt; ➡️ DoubleSummaryStatistics&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#summarizeInt(org.eclipse.collections.api.block.function.primitive.IntFunction)&quot;&gt;summarizeInt&lt;/a&gt; ➡️ IntSummaryStatistics&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#summarizeLong(org.eclipse.collections.api.block.function.primitive.LongFunction)&quot;&gt;summarizeLong&lt;/a&gt; ➡️ LongSummaryStatistics&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#sumOfDouble(org.eclipse.collections.api.block.function.primitive.DoubleFunction)&quot;&gt;sumOfDouble&lt;/a&gt; ➡️ double&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#sumOfFloat(org.eclipse.collections.api.block.function.primitive.FloatFunction)&quot;&gt;sumOfFloat&lt;/a&gt; ➡️ double&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#sumOfInt(org.eclipse.collections.api.block.function.primitive.IntFunction)&quot;&gt;sumOfInt&lt;/a&gt; ➡️ long&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#sumOfLong(org.eclipse.collections.api.block.function.primitive.LongFunction)&quot;&gt;sumOfLong&lt;/a&gt; ➡️ long&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#tap(org.eclipse.collections.api.block.procedure.Procedure)&quot;&gt;tap&lt;/a&gt; ➡️ RichIterable&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#toArray()&quot;&gt;toArray&lt;/a&gt; ➡️ Object[]&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#toBag()&quot;&gt;toBag&lt;/a&gt; ➡️ MutableBag&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#toBiMap(org.eclipse.collections.api.block.function.Function,org.eclipse.collections.api.block.function.Function)&quot;&gt;toBiMap&lt;/a&gt; ➡️ MutableBiMap&amp;lt;K, V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#toImmutableBag()&quot;&gt;toImmutableBag&lt;/a&gt; ➡️ ImmutableBag&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#toImmutableBiMap(org.eclipse.collections.api.block.function.Function,org.eclipse.collections.api.block.function.Function)&quot;&gt;toImmutableBiMap&lt;/a&gt; ➡️ ImmutableBiMap&amp;lt;K, V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#toImmutableList()&quot;&gt;toImmutableList&lt;/a&gt; ➡️ ImmutableList&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#toImmutableMap(org.eclipse.collections.api.block.function.Function,org.eclipse.collections.api.block.function.Function)&quot;&gt;toImmutableMap&lt;/a&gt; ➡️ ImmutableMap&amp;lt;K, V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#toImmutableSet()&quot;&gt;toImmutableSet&lt;/a&gt; ➡️ ImmutableSet&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#toImmutableSortedBag()&quot;&gt;toImmutableSortedBag&lt;/a&gt; ➡️ ImmutableSortedBag&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#toImmutableSortedBagBy(org.eclipse.collections.api.block.function.Function)&quot;&gt;toImmutableSortedBagBy&lt;/a&gt; ➡️ ImmutableSortedBag&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#toImmutableSortedList()&quot;&gt;toImmutableSortedList&lt;/a&gt; ➡️ ImmutableList&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#toImmutableSortedListBy(org.eclipse.collections.api.block.function.Function)&quot;&gt;toImmutableSortedListBy&lt;/a&gt; ➡️ ImmutableList&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#toImmutableSortedSet()&quot;&gt;toImmutableSortedSet&lt;/a&gt; ➡️ ImmutableSortedSet&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#toImmutableSortedSetBy(org.eclipse.collections.api.block.function.Function)&quot;&gt;toImmutableSortedSetBy&lt;/a&gt; ➡️ ImmutableSortedSet&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#toList()&quot;&gt;toList&lt;/a&gt; ➡️ MutableList&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#toMap(org.eclipse.collections.api.block.function.Function,org.eclipse.collections.api.block.function.Function)&quot;&gt;toMap️&lt;/a&gt; ➡️ MutableMap&amp;lt;K, V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#toSet()&quot;&gt;toSet&lt;/a&gt; ➡️ MutableSet&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#toSortedBag()&quot;&gt;toSortedBag&lt;/a&gt; ➡️ MutableSortedBag&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#toSortedBagBy(org.eclipse.collections.api.block.function.Function)&quot;&gt;toSortedBagBy&lt;/a&gt; ➡️ MutableSortedBag&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#toSortedList()&quot;&gt;toSortedList&lt;/a&gt; ➡️ MutableList&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#toSortedListBy(org.eclipse.collections.api.block.function.Function)&quot;&gt;toSortedListBy&lt;/a&gt; ➡️ MutableList&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#toSortedMap(java.util.Comparator,org.eclipse.collections.api.block.function.Function,org.eclipse.collections.api.block.function.Function)&quot;&gt;toSortedMap&lt;/a&gt; ➡️ MutableSortedMap&amp;lt;K, V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#toSortedMapBy(org.eclipse.collections.api.block.function.Function,org.eclipse.collections.api.block.function.Function,org.eclipse.collections.api.block.function.Function)&quot;&gt;toSortedMapBy&lt;/a&gt; ➡️ MutableSortedMap&amp;lt;K, V&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#toSortedSet()&quot;&gt;toSortedSet&lt;/a&gt; ➡️ MutableSortedSet&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#toSortedSetBy(org.eclipse.collections.api.block.function.Function)&quot;&gt;toSortedSetBy&lt;/a&gt; ➡️ MutableSortedSet&amp;lt;T&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#toString()&quot;&gt;toString&lt;/a&gt; ➡️ String&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#zip(java.lang.Iterable)&quot;&gt;zip&lt;/a&gt; ➡️ RichIterable&amp;lt;Pair&amp;lt;T, S&amp;gt;&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipse.dev/collections/javadoc/11.1.0/org/eclipse/collections/api/RichIterable.html#zipWithIndex(R)&quot;&gt;zipWithIndex&lt;/a&gt; ➡️ RichIterable&amp;lt;Pair&amp;lt;T, Integer&amp;gt;&amp;gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;em&gt;I am the creator of and committer for the &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; OSS project, which is managed at the &lt;/em&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/technology.collections&quot;&gt;&lt;em&gt;Eclipse Foundation&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. Eclipse Collections is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=ce64a31b5936&quot; width=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://betterprogramming.pub/rich-lazy-mutable-and-immutable-interfaces-in-eclipse-collections-ce64a31b5936&quot;&gt;Rich, Lazy, Mutable, and Immutable Interfaces in Eclipse Collections&lt;/a&gt; was originally published in &lt;a href=&quot;https://betterprogramming.pub&quot;&gt;Better Programming&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</description>
	<pubDate>Tue, 01 Aug 2023 19:30:10 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: Eclipse Theia 1.40 Release: News and Noteworthy</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2023/08/01/eclipse-theia-1-40-release-news-and-noteworthy/</guid>
	<link>https://eclipsesource.com/blogs/2023/08/01/eclipse-theia-1-40-release-news-and-noteworthy/</link>
	<description>&lt;p&gt;We are happy to announce the Eclipse Theia 1.40 release! Even though we are in vacation season, the release contains 33 merged pull requests and we welcome two new contributors. In this article we...&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2023/08/01/eclipse-theia-1-40-release-news-and-noteworthy/&quot; rel=&quot;nofollow&quot;&gt; Eclipse Theia 1.40 Release: News and Noteworthy&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Tue, 01 Aug 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: My Sixth Blogiversary</title>
	<guid isPermaLink="false">https://medium.com/p/710a529549f3</guid>
	<link>https://donraab.medium.com/my-sixth-blogiversary-710a529549f3?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;After 6 years of blogging, it’s time to write some more.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/0*8FcFi15zxeZK90iO&quot; /&gt;&lt;figcaption&gt;Photo by &lt;a href=&quot;https://unsplash.com/@retrosupply?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;RetroSupply&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;No commitment, No problem&lt;/h3&gt;&lt;p&gt;Last year I decided to release myself from the commitment to blog at least once per month. So how did I do this past year in terms of writing?&lt;/p&gt;&lt;p&gt;I wrote 34 blogs in the past year. So 2–3 blogs per month with zero commitment to a quota. I can live with that pace, without having to commit to it.&lt;/p&gt;&lt;p&gt;I love writing.&lt;/p&gt;&lt;h3&gt;My Favorite Blog This Past Year&lt;/h3&gt;&lt;p&gt;The biggest surprise I had this past blogging year was writing about my experiment building a ToDoList in Java using JavaFX. It reminded me of what coding used to be like when I would build UIs in a flash in Smalltalk.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/javarevisited/my-first-javafx-application-ee70a1d48cb3&quot;&gt;My first JavaFX application&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The blog turned into four part series. I got to code with emojis, use Java Records and experiment with using Jackson to persist my ToDoList. It was a lot of fun to code and to write about. I hope the blogs are informational and fun to read.&lt;/p&gt;&lt;h3&gt;Writing makes me happy, so I will keep writing&lt;/h3&gt;&lt;p&gt;I hope along the way I will again see some of that humanity and caring I witnessed online during the pandemic. Little things like the happiness of a cup of coffee shared virtually in TheCoffeeClub, or a collaborative celebration of a friend or colleague who does something awesome, regardless of how big or small. I hope to continue to see other developers writing more, so I can dedicate some of my time to enjoying their words.&lt;/p&gt;&lt;p&gt;Be safe. Be kind. Be mindful. Be happy. Self care. Write. Hugs.&lt;/p&gt;&lt;p&gt;&lt;em&gt;I am the creator of and committer for the &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; OSS project, which is managed at the &lt;/em&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/technology.collections&quot;&gt;&lt;em&gt;Eclipse Foundation&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. Eclipse Collections is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=710a529549f3&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 31 Jul 2023 21:13:30 +0000</pubDate>
</item>
<item>
	<title>John Kellerman: Eclipse Cloud DevTools Contributor Award: Mark Sujew for extraordinary contributions to Theia</title>
	<guid isPermaLink="false">7378 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/john-kellerman/eclipse-cloud-devtools-contributor-award-mark-sujew-extraordinary-contributions</link>
	<description>&lt;span&gt;Eclipse Cloud DevTools Contributor Award: Mark Sujew for extraordinary contributions to Theia&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;p&gt;The Eclipse Cloud Developer Tools contributor award for July goes to Mark Sujew at &lt;a href=&quot;https://www.eclipse.org/membership/showMember.php?member_id=1194&quot;&gt;TypeFox&lt;/a&gt; for his continuous, strategic and valuable contributions to Eclipse Theia, including recently for example, his contributions to enable remote SSH support for Eclipse Theia!&lt;/p&gt;&lt;img alt=&quot;Theia&quot; class=&quot;align-center&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/2023-07/image1.png&quot; width=&quot;59.67%&quot; /&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;Mark has been working on Eclipse Theia since 2021 and he has become one of the core committers in the project. Mark is technically very knowledgeable and has a great overview of the Theia code base. This enables him to regularly contribute strategic features, such as the &lt;a href=&quot;https://blogs.eclipse.org/post/john-kellerman/eclipse-cloud-devtools-contributor-award-internationalization-eclipse-theia&quot;&gt;internationalization&lt;/a&gt; support and, recently, the &lt;a href=&quot;https://github.com/eclipse-theia/theia/pull/12618&quot;&gt;support for remote SSH.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Besides technical skills, Mark is also a great community member. He regularly joins the weekly developer calls and actively participates in discussions and decision making. Mark has an opinion about key questions and expresses his valuable thoughts. He always has a view for the global health of the Theia ecosystem and often contributes to general improvements. Last but not least, Mark is an active and accurate reviewer, which contributes to the overall quality of Eclipse Theia.&lt;/p&gt;&lt;p&gt;Of course, great technologies such as Eclipse Theia depend on many contributors and we are pleased  to have a very active and diverse ecosystem in the project. However, it is also important to recognize single developers who make a difference and Mark is definitely one of them. Thanks and congratulations, Mark!&lt;/p&gt;&lt;p&gt;The &lt;a href=&quot;https://ecdtools.eclipse.org/&quot;&gt;Cloud DevTools Working Group&lt;/a&gt; provides a vendor-neutral ecosystem of open-source projects focused on defining, implementing and promoting best-in-class web and cloud-based development tools. It is hosted at the Eclipse Foundation, current members of the group include &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=848&quot;&gt;AMD&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=823&quot;&gt;Arm&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=690&quot;&gt;EclipseSource&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=682&quot;&gt;Ericsson&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=863&quot;&gt;Obeo&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=731&quot;&gt;RedHat&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=1069&quot;&gt;Renesas&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=800&quot;&gt;STMicroelectronics&lt;/a&gt; and &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=1194&quot;&gt;TypeFox&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;This Eclipse Cloud DevTools contributor award is sponsored by &lt;a href=&quot;https://eclipsesource.com/&quot;&gt;EclipseSource&lt;/a&gt;, providing &lt;a href=&quot;https://eclipsesource.com/services/tools/&quot;&gt;consulting and implementation services&lt;/a&gt; for &lt;a href=&quot;https://eclipsesource.com/web-and-cloud-based-tools/&quot;&gt;web-based tools&lt;/a&gt;, &lt;a href=&quot;https://eclipsesource.com/technology/eclipse-glsp/&quot;&gt;Eclipse GLSP&lt;/a&gt;,  &lt;a href=&quot;https://eclipsesource.com/technology/eclipse-theia/&quot;&gt;Eclipse Theia&lt;/a&gt;, and &lt;a href=&quot;https://eclipsesource.com/technology/vs-code/&quot;&gt;VS Code&lt;/a&gt;.   &lt;/p&gt;&lt;/div&gt;
      
&lt;span&gt;&lt;span&gt;John Kellerman&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;Mon, 2023-07-24 13:42&lt;/span&gt;

  &lt;div class=&quot;field field--name-field-blog-tags field--type-entity-reference field--label-above&quot;&gt;
    &lt;div class=&quot;field--label&quot;&gt;Tags&lt;/div&gt;
          &lt;div class=&quot;field--items&quot;&gt;
              &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/ecdtools&quot; hreflang=&quot;en&quot;&gt;ECDTools&lt;/a&gt;&lt;/div&gt;
          &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/clouddevtools-0&quot; hreflang=&quot;en&quot;&gt;CloudDevTools&lt;/a&gt;&lt;/div&gt;
          &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/theia&quot; hreflang=&quot;en&quot;&gt;Theia&lt;/a&gt;&lt;/div&gt;
          &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/theia-contributor-award&quot; hreflang=&quot;en&quot;&gt;Theia Contributor Award&lt;/a&gt;&lt;/div&gt;
              &lt;/div&gt;
      &lt;/div&gt;</description>
	<pubDate>Mon, 24 Jul 2023 17:42:20 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: Polishing Diamonds in Java</title>
	<guid isPermaLink="false">https://medium.com/p/3965efcdc437</guid>
	<link>https://betterprogramming.pub/polishing-diamonds-in-java-3965efcdc437?source=rss-df39b86e9f04------2</link>
	<description>&lt;h4&gt;Managing interface change in diamond hierarchies.&lt;/h4&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/0*ooOloMqJyqPHqDgS&quot; /&gt;&lt;figcaption&gt;Photo by &lt;a href=&quot;https://unsplash.com/pt-br/@edgardo1987?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Edgar Soto&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Inheriting Diamonds in Java&lt;/h3&gt;&lt;p&gt;Java is an object-oriented language that supports single inheritance for classes. A class can inherit from at most one single parent class. Java also supports classes implementing multiple interfaces. Interfaces may extend multiple interfaces as well.&lt;/p&gt;&lt;p&gt;The following class diagram illustrates the two kinds of inheritance models supported in Java.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/838/1*ugeV6suBJdLZDK6oWKlGLQ.png&quot; /&gt;&lt;figcaption&gt;Single Class Inheritance and Multiple Interface Inheritance in Java&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Before Java 8, methods on interfaces could only be abstract. It was the responsibility of classes to define the behavior of methods defined on interfaces.&lt;/p&gt;&lt;p&gt;Java 8 introduced an extremely powerful feature called default methods. A default method provides both the signature of a method, and a “default” implementation in a method body that can be used by classes that don’t override the behavior. The default methods feature can help make old interfaces new again.&lt;/p&gt;&lt;p&gt;Change happens. Unfortunately, change sometimes comes with a cost. Open Source Java projects have to be able to understand and respond quickly to change with the six month release cadence of OpenJDK feature releases. Open Source Java projects have a great feedback loop if they participate in the &lt;a href=&quot;https://wiki.openjdk.org/display/quality/Quality+Outreach&quot;&gt;OpenJDK Quality Outreach Program&lt;/a&gt;. This program notifies members of the availability of early access releases of the OpenJDK that they can test their projects against.&lt;/p&gt;&lt;p&gt;The availability of early access releases of the OpenJDK has helped the &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; open source project discover, understand, report, and address issues before new versions of the OpenJDK are released. In this blog, I will explain three times we had to make changes in &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; after default methods were added to existing interfaces in the JDK.&lt;/p&gt;&lt;h4&gt;Diamond Hierarchies&lt;/h4&gt;&lt;p&gt;Inheriting from multiple interfaces can lead to the creation of diamond hierarchies. A diamond hierarchy gets its name from the shape of the hierarchy. Consider the following diagram showing 5 interfaces and a class in a diamond hierarchy relationship.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/726/1*agR5fday7Cyx5nlOKB6tww.png&quot; /&gt;&lt;figcaption&gt;The shape of a diamond interface hierarchy&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;You may see different interface inheritance shapes in the wild. The shapes may not be diamonds. Sometimes you may encounter upside down trees. The diamond shapes themselves are not all that important. The most important characteristic that can lead to issues is that there exists a child interface or class at the bottom of a hierarchy that has multiple parents. Having multiple parent interfaces can lead to method signature collisions that may break compilation and potentially runtime behavior.&lt;/p&gt;&lt;h4&gt;Diamond Hierarchies before Java 8&lt;/h4&gt;&lt;p&gt;The primary interface inheritance problem before Java 8 occurred if two or more interfaces have the same method signatures with different return types.&lt;/p&gt;&lt;p&gt;Consider the following diamond hierarchy diagram that defines all abstract foo methods that are ultimately implemented by ClassD.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/721/1*r2cMkEHM-fZ99SFtwoMA0w.png&quot; /&gt;&lt;figcaption&gt;Method foo defined with covariant overrides on interfaces A, B, and C and also on class ClassD&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;The interfaces A, B, C in this diagram all define foo methods that return different types that are covariant overrides of the parent interface Top. In order for ClassD to compile, it must override the foo method and return a type that is compatible with the foo methods from all three interfaces. The solution here is to override foo in ClassD and return ClassD. ClassD is a subtype of A, B, and C. ClassD is a &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se20/html/jls-8.html#d5e15569&quot;&gt;covariant return type&lt;/a&gt;. Covariance is an important feature of Java return types that was added in Java 5.&lt;/p&gt;&lt;p&gt;Interfaces in the JDK were extremely stable before Java 8. We never saw any interface evolution issues in our diamond hierarchies in Eclipse Collections that integrated with Java types like Iterable, Collection, Map, List and Set. That changed slightly after Java 8.&lt;/p&gt;&lt;h4&gt;Diamond Hierarchies after Java 8&lt;/h4&gt;&lt;p&gt;Java 8 introduced a new feature called default methods. A default method allows a developer to add behavior to an existing interface without theoretically requiring any changes to classes that extend that interface. The default method feature has allowed the JDK to evolve interfaces that are decades old. We use default methods extensively in Eclipse Collections to reduce code duplication across abstract class hierarchies. There are a few gotchas to be aware of when using default methods, especially where there are diamond hierarchies that depend on interfaces that evolve over time.&lt;/p&gt;&lt;p&gt;Every default method that is added to decades-old interfaces like Iterable, Collection, Map, List, Set creates a possibility for unexpected method signature collisions to happen. Don’t be too alarmed for your applications. Most applications will probably never encounter the diamond hierarchy issues that Eclipse Collections and other libraries that provide Collection types that integrate with Java types may run into.&lt;/p&gt;&lt;p&gt;The following diagram shows the default methods that were added to the basic Collection interfaces in Java 8. Did any of these default methods break your applications when they arrived in Java 8? My guess would be, probably not.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*99MtQc0ie0_nQ1uINB73Og.png&quot; /&gt;&lt;figcaption&gt;Default methods added to interfaces in Java Collection Framework in Java 8&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;The Map interface had the most notable evolution in Java 8 based on the number of default methods added. The methods that were added to Map were a much needed improvement for the Java community. While Eclipse Collections MutableMap has some functional overlap with methods in the Map interface, there were, fortunately, no method signature collisions with the new default methods that were added. Awesome!&lt;/p&gt;&lt;p&gt;The other Java Collection Framework interfaces had more modest additions, as most of the functionality was provided by the new Stream API. The spliterator, stream and parallelStream methods theoretically had the greatest possibility of collisions in the wild because the methods had zero arguments. In practice, I never saw or heard of any collisions that happened with these three methods. Awesome!&lt;/p&gt;&lt;p&gt;On the other hand, the forEach, removeIf, and replaceAll methods had method name collisions in frameworks like Eclipse Collections. Since the one argument types the methods required were all new in Java 8 (Consumer, Predicate, UnaryOperator), any collisions were simply considered overloads by the compiler. Awesome!&lt;/p&gt;&lt;p&gt;The method sort on List, which takes a decades-old interface named Comparator would result in collisions that created scratches in some diamonds in the wild. This was unfortunate, but sometimes the JDK needs to break some eggs in order to evolve and improve. List should have had a sort method from the beginning of its existence. Thankfully, it does now.&lt;/p&gt;&lt;h3&gt;Scratching a Diamond by evolving interfaces&lt;/h3&gt;&lt;p&gt;Every once in a while, a change can be made in an interface that requires “polishing” a diamond hierarchy. Interface changes may be out of your control if you have a relationship with an interface that is managed by another library or the JDK itself. Your only option may be to fix compilation failures once they are found and determine if there is also a binary incompatibility that may require a new release of your library or application in order for your clients to use a new version of the JDK or another library.&lt;/p&gt;&lt;p&gt;The following sections describe three different issues that may be encountered with evolving interfaces in diamond hierarchies. These are real examples that illustrate where Eclipse Collections had to address issues caused by the evolution of interfaces with default methods after Java 8.&lt;/p&gt;&lt;h4&gt;Method collisions with different return types&lt;/h4&gt;&lt;p&gt;The worst gotcha you can encounter with a diamond hierarchy is with methods signatures colliding with different return types. There is only one good solution to this problem. One of the methods must be renamed, and all client calls to the renamed method must be renamed as well.&lt;/p&gt;&lt;p&gt;When Java 8 was released, a default method sort was added to the java.util.List interface that had a void return type. Before we open sourced GS Collections, we had a sort method on the MutableList interface that returned MutableList. MutableList extends java.util.List, so our only option was to rename our method and change all of our client code to call the new method. Thankfully, all of the client code was in one company, so this was manageable with some explanation that compile errors would happen and there was a simple fix to change calls to sort that required a return type to sortThis.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/812/1*d0T3b3voCG4K5_TjfISx6w.png&quot; /&gt;&lt;figcaption&gt;Method signature collision on sort added to List interface in Java 8&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;This is what the sortThis method signatures looks like today on MutableList. These two methods were added as default methods on MutableList in the Eclipse Collections 10.0 release to reduce some code duplication.&lt;/p&gt;&lt;pre&gt;default MutableList&amp;lt;T&amp;gt; sortThis(Comparator&amp;lt;? super T&amp;gt; comparator)&lt;br /&gt;{&lt;br /&gt;    this.sort(comparator);&lt;br /&gt;    return this;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;default MutableList&amp;lt;T&amp;gt; sortThis()&lt;br /&gt;{&lt;br /&gt;    return this.sortThis(null);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;The method sortThis delegates to the method sort, which was added to the java.util.List interface as default method in Java 8. The sort method is then overridden in FastList, which implements MutableList.&lt;/p&gt;&lt;pre&gt;@Override&lt;br /&gt;public void sort(Comparator&amp;lt;? super T&amp;gt; comparator)&lt;br /&gt;{&lt;br /&gt;   Arrays.sort(this.items, 0, this.size, comparator);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;If it isn’t obvious, the reason sortThis returns this, is so that it can be used fluently and directly as a return result in a method. This is an amazing convenience that often reduces lines of code when using sortThis.&lt;/p&gt;&lt;p&gt;The List change in Java 8 was described in this recent blog by &lt;a href=&quot;https://medium.com/u/48b32292b19c&quot;&gt;Stuart Marks&lt;/a&gt;:&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://stuartmarks.wordpress.com/2023/02/22/the-importance-of-writing-stuff-down/&quot;&gt;The Importance of Writing Stuff Down&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Following the advice in this blog, I am writing all of these experiences down for other maintainers to learn from. Thank you, Stuart!&lt;/p&gt;&lt;h4&gt;Default method collisions can result in ambiguity&lt;/h4&gt;&lt;p&gt;Another gotcha happens when two parent interfaces define default methods with the same exact signature. When this happens then a child interface must also override that default method as well to remove the ambiguity that arises. The compiler and runtime will not be able to determine which default method should be chosen as the implementation. This results in an ambiguity at compile time and runtime.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/oracledevs/eclipse-collections-10-4-0-released-7c5b3f43c0f0&quot;&gt;Eclipse Collections encountered this particular problem&lt;/a&gt; with JDK 15. &lt;a href=&quot;https://medium.com/u/48b32292b19c&quot;&gt;Stuart Marks&lt;/a&gt; wrote a great blog describing the issue as well.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://stuartmarks.wordpress.com/2020/09/22/incompatibilities-with-jdk-15-charsequence-isempty/&quot;&gt;Incompatibilities with JDK 15 CharSequence.isEmpty&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The only thing this blog is missing is a diagram to help visualize the issue. The following picture shows the colliding default methods in the hierarchy for CharAdapter.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/704/1*A3exX0eN1Ysq8-YZYT1HlA.png&quot; /&gt;&lt;figcaption&gt;CharSequence and PrimitiveIterable are parent interfaces of CharAdapter that define isEmpty default methods&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;The solution to this problem was to add an override of isEmpty in the CharAdapter class.&lt;/p&gt;&lt;p&gt;This hierarchy doesn’t have a full diamond shape. It does have the colliding method issue with isEmpty caused by extending multiple interfaces with the same method signatures for default methods.&lt;/p&gt;&lt;h4&gt;Abstract and Default method collisions&lt;/h4&gt;&lt;p&gt;In JDK 21, a new interface called SequencedCollection was added in between Collection and List that has methods like getFirst and getLast. These default methods collided with abstract methods with the same signature that were defined in RichIterable, OrderedIterable, and ListIterable in Eclipse Collections.&lt;/p&gt;&lt;p&gt;The following diagram shows the diamond hierarchy in Eclipse Collections and where the methods ultimately collide in the child interface MutableList.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/844/1*hSW_wVVaafrO3Ta2WgSnKA.png&quot; /&gt;&lt;figcaption&gt;Diamond Hierarchy for MutableList interface in Eclipse Collections&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4&gt;Compilation Only Error&lt;/h4&gt;&lt;p&gt;The collision between abstract getFirst methods in the Eclipse Collections types on the left and the default getFirst method in SequencedCollection on the right resulted in a compilation error in our JDK 21 EA builds for Eclipse Collections. All previous JDK versions compiled fine. What was unclear was whether this was only a compilation error, or if this would require a release of a new version of Eclipse Collections in order for the library to work with JDK 21 when it is released.&lt;/p&gt;&lt;p&gt;I checked to see if getFirst or getLast was used in either of the two OSS repos that I am a committer for that have an Eclipse Collections dependency and have a JDK 21 EA build. Both repos had tests that use getFirst. The code ran on JDK 21 EA using Eclipse Collections 11.1 without issue. The two repos are the &lt;a href=&quot;https://github.com/eclipse/eclipse-collections-kata&quot;&gt;Eclipse Collections Kata&lt;/a&gt; and &lt;a href=&quot;https://github.com/BNYMellon/CodeKatas&quot;&gt;BNY Mellon CodeKatas&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;This should verify that the issue is compilation only. I found the section in the JLS that I believe covers this situation with colliding abstract and default methods in interface hierarchies.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html#jls-9.4.1.3&quot;&gt;Chapter 9. Interfaces&lt;/a&gt;&lt;/p&gt;&lt;p&gt;This is a new kind of issue we hadn’t seen before that we can now be on the lookout for with future releases of the JDK.&lt;/p&gt;&lt;h4&gt;Polishing this issue away&lt;/h4&gt;&lt;p&gt;I am going to include code examples here which show how the problem manifest itself at compile time and the two potential solutions.&lt;/p&gt;&lt;p&gt;The following is a compilation error and the example code that creates the compilation issue with a diamond hierarchy.&lt;/p&gt;&lt;blockquote&gt;java: types Diamond.SequencedCollection&amp;lt;E&amp;gt; and Diamond.ListIterable&amp;lt;T&amp;gt; are incompatible; interface Diamond.MutableList&amp;lt;T&amp;gt; inherits abstract and default for getFirst() from types Diamond.SequencedCollection and Diamond.ListIterable&lt;/blockquote&gt;&lt;pre&gt;public class Diamond&lt;br /&gt;{&lt;br /&gt;    interface Iterable&amp;lt;E&amp;gt;&lt;br /&gt;    {&lt;br /&gt;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    interface OrderedIterable&amp;lt;T&amp;gt; extends Iterable&amp;lt;T&amp;gt;&lt;br /&gt;    {&lt;br /&gt;        T getFirst();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    interface ListIterable&amp;lt;T&amp;gt; extends OrderedIterable&amp;lt;T&amp;gt;&lt;br /&gt;    {&lt;br /&gt;        T getFirst();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    interface Collection&amp;lt;E&amp;gt; extends Iterable&amp;lt;E&amp;gt;&lt;br /&gt;    {&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    interface SequencedCollection&amp;lt;E&amp;gt; extends Collection&amp;lt;E&amp;gt;&lt;br /&gt;    {&lt;br /&gt;        default E getFirst()&lt;br /&gt;        {&lt;br /&gt;            return null;&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    interface List&amp;lt;E&amp;gt; extends SequencedCollection&amp;lt;E&amp;gt;&lt;br /&gt;    {&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    interface MutableCollection&amp;lt;T&amp;gt; extends Collection&amp;lt;T&amp;gt;&lt;br /&gt;    {&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    interface MutableList&amp;lt;T&amp;gt; extends MutableCollection&amp;lt;T&amp;gt;, ListIterable&amp;lt;T&amp;gt;, List&amp;lt;T&amp;gt;&lt;br /&gt;    {&lt;br /&gt;        // This code doesn't compile and fails with error below:&lt;br /&gt;        &lt;br /&gt;        // java: types Diamond.SequencedCollection&amp;lt;E&amp;gt; and &lt;br /&gt;        // Diamond.ListIterable&amp;lt;T&amp;gt; are incompatible;&lt;br /&gt;        // interface Diamond.MutableList&amp;lt;T&amp;gt; inherits abstract and default &lt;br /&gt;        // for getFirst() from types &lt;br /&gt;        // Diamond.SequencedCollection and Diamond.ListIterable       &lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    static class MyList&amp;lt;T&amp;gt; implements MutableList&amp;lt;T&amp;gt;, List&amp;lt;T&amp;gt;&lt;br /&gt;    {&lt;br /&gt;        public T getFirst()&lt;br /&gt;        {&lt;br /&gt;            return null;&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public static void main(String[] args)&lt;br /&gt;    {&lt;br /&gt;        OrderedIterable&amp;lt;String&amp;gt; a = new MyList&amp;lt;&amp;gt;();&lt;br /&gt;        ListIterable&amp;lt;String&amp;gt; b = new MyList&amp;lt;&amp;gt;();&lt;br /&gt;        SequencedCollection&amp;lt;String&amp;gt; c = new MyList&amp;lt;&amp;gt;();&lt;br /&gt;        List&amp;lt;String&amp;gt; d = new MyList&amp;lt;&amp;gt;();&lt;br /&gt;        MutableList&amp;lt;String&amp;gt; e = new MyList&amp;lt;&amp;gt;();&lt;br /&gt;        MyList&amp;lt;String&amp;gt; f = new MyList&amp;lt;&amp;gt;();&lt;br /&gt;        System.out.println(a.getFirst());&lt;br /&gt;        System.out.println(b.getFirst());&lt;br /&gt;        System.out.println(c.getFirst());&lt;br /&gt;        System.out.println(d.getFirst());&lt;br /&gt;        System.out.println(e.getFirst());&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;There are two possible solutions to solving this compilation issue. One solution is to add an abstract getFirst method in MutableList . The other solution is to add a default implementation for getFirst in MutableList.&lt;/p&gt;&lt;p&gt;The actual solution I used to solve the compilation issue in Eclipse Collections was to add default methods to MutableList for getFirst and getLast.&lt;/p&gt;&lt;pre&gt;@Override&lt;br /&gt;default T getFirst()&lt;br /&gt;{&lt;br /&gt;    return this.isEmpty() ? null : this.get(0);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;@Override&lt;br /&gt;default T getLast()&lt;br /&gt;{&lt;br /&gt;    return this.isEmpty() ? null : this.get(this.size() - 1);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;This getLast default method implementation would be suboptimal for LinkedList, but these two methods already have appropriate overrides in abstract and concrete classes. This solution's primary goal was to make the compiler happy.&lt;/p&gt;&lt;h3&gt;Diamonds are forever so prepare to polish them&lt;/h3&gt;&lt;p&gt;When diamond hierarchies or any multiple interface inheritance exist in a code base, care needs to be taken to upkeep them when interface evolution happens. Change does and will happen. I hope this blog demonstrates some useful real world example where rules in the Java Language Specification collide with real world libraries that are integrated with JDK interfaces.&lt;/p&gt;&lt;p&gt;I am quite happy as an Eclipse Collections maintainer how the ecosystem has evolved with Early Access versions of the JDK being provided with easy automation that we can leverage to use them. Getting a heads up months in advance on an upcoming change in the JDK is a huge improvement. Early warning capability for JDK and library developers is really amazing.&lt;/p&gt;&lt;p&gt;In case you want to learn more about the benefits of participating in the &lt;a href=&quot;https://wiki.openjdk.org/display/quality/Quality+Outreach&quot;&gt;OpenJDK Quality Outreach Program&lt;/a&gt;, I will shamelessly plug my recent blog on the topic below.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://donraab.medium.com/the-benefits-of-participating-in-the-openjdk-quality-outreach-program-590b86382f20&quot;&gt;The benefits of participating in the OpenJDK Quality Outreach Program&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Thank you for reading this blog! I hope you found the information and examples here useful. Enjoy!&lt;/p&gt;&lt;p&gt;&lt;em&gt;I am the creator of and committer for the &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; OSS project, which is managed at the &lt;/em&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/technology.collections&quot;&gt;&lt;em&gt;Eclipse Foundation&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. Eclipse Collections is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=3965efcdc437&quot; width=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://betterprogramming.pub/polishing-diamonds-in-java-3965efcdc437&quot;&gt;Polishing Diamonds in Java&lt;/a&gt; was originally published in &lt;a href=&quot;https://betterprogramming.pub&quot;&gt;Better Programming&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</description>
	<pubDate>Sat, 15 Jul 2023 18:45:01 +0000</pubDate>
</item>
<item>
	<title>John Kellerman: Eclipse Cloud DevTools Digest - May and June 2023</title>
	<guid isPermaLink="false">7375 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/john-kellerman/eclipse-cloud-devtools-digest-may-and-june-2023</link>
	<description>&lt;span&gt;Eclipse Cloud DevTools Digest - May and June 2023&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;h3&gt;Open VSX Working Group Formed&lt;/h3&gt;&lt;img class=&quot;align-center&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/2023-05/open-vsx_0.png&quot; width=&quot;72.95%&quot; /&gt;&lt;p&gt;We &lt;a href=&quot;https://www.globenewswire.com/news-release/2023/06/27/2695137/0/en/The-Open-VSX-Registry-a-Vendor-Neutral-Community-Supported-Alternative-to-the-Visual-Studio-Marketplace-Gets-its-Own-Working-Group-at-the-Eclipse-Foundation.html&quot;&gt;announced&lt;/a&gt; the formation of a working group to take responsibility for the Open VSX Registry deployment. &lt;span&gt;The working group’s mandate is to supervise and expedite the adoption of the Open VSX Registry, a vendor-neutral, community-backed alternative to Microsoft’s Visual Studio Marketplace. Initial members include &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/membership/showMember.php?member_id=1592&quot;&gt;&lt;span&gt;Google&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/membership/showMember.php?member_id=1380&quot;&gt;&lt;span&gt;Huawei&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/membership/showMember.php?member_id=1629&quot;&gt;&lt;span&gt;Posit&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/membership/showMember.php?member_id=1220&quot;&gt;&lt;span&gt;Salesforce&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/membership/showMember.php?member_id=895&quot;&gt;&lt;span&gt;Siemens&lt;/span&gt;&lt;/a&gt;&lt;span&gt; and &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/membership/showMember.php?member_id=800&quot;&gt;&lt;span&gt;STMicroelectronics&lt;/span&gt;&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;Open VSX Registry Recognized by SD Times&lt;/h3&gt;&lt;p&gt;In a related article, &lt;a href=&quot;https://sdtimes.com/&quot;&gt;SD Times&lt;/a&gt; recognized Open VSX Registry as its &lt;a href=&quot;https://sdtimes.com/softwaredev/sd-times-open-source-project-of-the-week-open-vsx-registry/&quot;&gt;open source project of the week&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;Contributor Awards to Red Hat and Yining Wang&lt;/h3&gt;&lt;p&gt;Cloud DevTools recognized Yining Wang of &lt;a href=&quot;https://www.eclipse.org/membership/showMember.php?member_id=682&quot;&gt;Ericsson&lt;/a&gt; in May for her contributions to &lt;a href=&quot;https://github.com/eclipse/openvsx&quot;&gt;github.com/eclipse/openvsx&lt;/a&gt; and &lt;a href=&quot;https://github.com/EclipseFdn/open-vsx.org&quot;&gt;github.com/EclipseFdn/open-vsx.org&lt;/a&gt; and the deployment at &lt;a href=&quot;https://open-vsx.org/&quot;&gt;Open VSX Registry.&lt;/a&gt; We also recognized Red Hat in June for its initial contribution of the VS Code Extension API to Theia. This allows regular VS Code extensions to run directly in Theia and any Theia-based product. &lt;/p&gt;&lt;h3&gt;CDT Cloud Blueprint&lt;/h3&gt;&lt;img class=&quot;align-center&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/2023-07/CDTCloudBlueprintLogo.png&quot; width=&quot;36.5%&quot; /&gt;&lt;p&gt;In a series of three articles, &lt;a href=&quot;https://eclipsesource.com/blogs/author/jonas-maximilian-and-philip/&quot;&gt;Jonas, Maximillian and Philip&lt;/a&gt; discuss CDT Cloud Blueprint, a customizable tool for C/C++ development based on web technologies: &lt;a href=&quot;https://eclipsesource.com/blogs/2023/06/19/cdt-cloud-blueprint-coding/&quot;&gt;introduction&lt;/a&gt;, &lt;a href=&quot;https://eclipsesource.com/blogs/2023/05/16/cdt-cloud-blueprint-getting-started/&quot;&gt;getting started&lt;/a&gt;, &lt;a href=&quot;https://eclipsesource.com/blogs/2023/05/24/cdt-cloud-blueprint-dynamic-toolbar/&quot;&gt;dynamic toolbar&lt;/a&gt;. &lt;/p&gt;&lt;h3&gt;Langium Becomes a Cloud DevTools Project&lt;/h3&gt;&lt;p&gt;The Cloud DevTools Steering Committee voted to include &lt;a href=&quot;https://langium.org/&quot;&gt;Langium&lt;/a&gt; as a project of interest to the working group. Langium is an open source language engineering tool, written in TypeScript and running in Node.js, with support for the Language Server Protocol. It enables domain-specific languages in VS Code, Eclipse Theia, web applications, and more. &lt;/p&gt;&lt;h3&gt;JKube 1.13 is Available&lt;/h3&gt;&lt;img class=&quot;align-center&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/2023-07/1%20VPk4GCUqHoQwIQ_v5bqWCw.png&quot; width=&quot;41.66%&quot; /&gt;&lt;p&gt;&lt;a href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-13&quot;&gt;Eclipse JKube 1.13 is now available&lt;/a&gt;. Improvements include support for Helm Chart YAML fragments and the introduction of a security profile to improve the overall security of the generated Kubernetes resources.&lt;/p&gt;&lt;h3&gt;Multiple Theia Releases&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2023/06/12/the-eclipse-theia-community-release-2023-05/&quot;&gt;The Eclipse Theia Community Release 2023-05&lt;/a&gt; is available. Community releases are provided every quarter by the Theia project and designed to be more hardened releases that tend to align with related technologies, such as &lt;a href=&quot;https://www.eclipse.org/glsp/&quot;&gt;Eclipse GLSP&lt;/a&gt; or &lt;a href=&quot;https://www.eclipse.org/cdt-cloud/&quot;&gt;CDT Cloud&lt;/a&gt;. Learn more about the &lt;a href=&quot;https://eclipsesource.com/blogs/2022/08/16/introducing-the-eclipse-theia-community-release/&quot;&gt;advantages of the Theia community release&lt;/a&gt; and visit the &lt;a href=&quot;https://theia-ide.org/releases/&quot;&gt;Theia release page&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2023/05/08/eclipse-theia-1-37-release-news-and-noteworthy/&quot;&gt;Eclipse Theia 1.37 Release&lt;/a&gt; adds improvements to tabs, keybindings and support for VS Code Extensions API 1.74.2.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2023/06/05/eclipse-theia-1-38-release-news-and-noteworthy/&quot;&gt;Eclipse Theia 1.38 Release&lt;/a&gt; adds further improvements to tabs, workspace search and support for VS Code Extensions API 1.77.&lt;/p&gt;&lt;h3 dir=&quot;ltr&quot; id=&quot;docs-internal-guid-43f0a3ab-7fff-bbb2-de02-ff8761145c8d&quot;&gt;TheiaCon 2023 and Community Day at EclipseCon Events&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;The Eclipse Cloud DevTools and Open VSX Working Groups will be co-hosting a Community Day event at EclipseCon on October 16th. Last year’s Community Day was well-attended and a very informative and enjoyable time was had by all. Be sure to &lt;/span&gt;&lt;a href=&quot;https://forms.gle/iESfeFPgccnEnh6Z8&quot;&gt;&lt;span&gt;submit your topics&lt;/span&gt;&lt;/a&gt;&lt;span&gt; for this years event.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The &lt;/span&gt;&lt;a href=&quot;https://docs.google.com/forms/d/e/1FAIpQLScj5BE1K_Yo6spy7eZKUEePluqFuF8QgLMnj57zmyBhH8-L-g/viewform&quot;&gt;&lt;span&gt;Call for Presentations&lt;/span&gt;&lt;/a&gt;&lt;span&gt; is also now live for &lt;/span&gt;&lt;a href=&quot;https://events.eclipse.org/2023/theiacon/&quot;&gt;&lt;span&gt;TheiaCon 2023&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, which will be held virtually on November 15-16. We look forward to another excellent program and encourage you to submit your proposals early. &lt;/span&gt;&lt;/p&gt;&lt;h3&gt;Cloud Tool Time Webinars&lt;/h3&gt;&lt;img class=&quot;align-center&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/2023-07/Cloud%20Tool%20Time.jpg&quot; width=&quot;38.67%&quot; /&gt;&lt;p&gt;We are now scheduling Cloud Tool Time webinars for 2023. Be sure to &lt;a href=&quot;https://forms.gle/K8ZuJ26YqoyMC9dD7&quot;&gt;Sign up&lt;/a&gt; now to get on the calendar and let us help tell your story. You can see past sessions on our &lt;a href=&quot;https://www.youtube.com/playlist?list=PLy7t4z5SYNaSBxx8gLh0i9LlN2bZW6H1L&quot;&gt;Youtube channel&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;Eclipse Cloud DevTools Projects&lt;/h3&gt;&lt;img class=&quot;align-center&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/2023-07/Cloud%20DevTools.png&quot; /&gt;&lt;p&gt;Explore the &lt;a href=&quot;https://ecdtools.eclipse.org/projects/&quot;&gt;Eclipse Cloud DevTools ecosystem&lt;/a&gt;! Check out our projects page to find out more about open source innovation for cloud IDEs, extension marketplaces, frameworks and more.&lt;/p&gt;&lt;h3&gt;Getting Listed on the Cloud DevTools Blog&lt;/h3&gt;&lt;p&gt;If you are working with, or on, anything in the Cloud DevTools space, &lt;a href=&quot;https://blogs.eclipse.org/post/brian-king/getting-listed-cloud-devtools-blog&quot;&gt;learn how to get your writings posted&lt;/a&gt; in our &lt;a href=&quot;https://ecdtools.eclipse.org/resources/blogs/&quot;&gt;blog section&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
      
&lt;span&gt;&lt;span&gt;John Kellerman&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;Thu, 2023-07-13 14:11&lt;/span&gt;

  &lt;div class=&quot;field field--name-field-blog-tags field--type-entity-reference field--label-above&quot;&gt;
    &lt;div class=&quot;field--label&quot;&gt;Tags&lt;/div&gt;
          &lt;div class=&quot;field--items&quot;&gt;
              &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/ecdtools&quot; hreflang=&quot;en&quot;&gt;ECDTools&lt;/a&gt;&lt;/div&gt;
          &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/clouddevtools-0&quot; hreflang=&quot;en&quot;&gt;CloudDevTools&lt;/a&gt;&lt;/div&gt;
          &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/opensource-0&quot; hreflang=&quot;en&quot;&gt;OpenSource&lt;/a&gt;&lt;/div&gt;
          &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/openvsx&quot; hreflang=&quot;en&quot;&gt;OpenVSX&lt;/a&gt;&lt;/div&gt;
              &lt;/div&gt;
      &lt;/div&gt;</description>
	<pubDate>Thu, 13 Jul 2023 18:11:13 +0000</pubDate>
</item>
<item>
	<title>Mikael Barbero: Eclipse Foundation Publishes Results of Equinox p2 Security Audit</title>
	<guid isPermaLink="true">https://mikael.barbero.tech/blog/post/2023-07-12-equinox-p2-security-audit-results/</guid>
	<link>https://mikael.barbero.tech/blog/post/2023-07-12-equinox-p2-security-audit-results/</link>
	<description>&lt;p&gt;Over the past year, the Eclipse Foundation has made securing the open source software supply chain a priority. By growing our security team and laying the groundwork for the Cyber Risk Initiative, we’ve made strides to improve the security posture of our open source projects.&lt;/p&gt;
&lt;p&gt;Today, we’re taking another step forward with the completion of the &lt;a href=&quot;https://5413615.fs1.hubspotusercontent-na1.net/hubfs/5413615/OSTIF_-_Equinox_p2_Report.pdf&quot;&gt;security audit&lt;/a&gt; for Equinox p2, the provisioning component of the Eclipse IDE.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://eclipse.dev/equinox/p2/&quot;&gt;Equinox p2&lt;/a&gt; was a logical choice for our first security audit because of its new signature verification mechanism. The plugin authentication mechanism incorporates PGP digital signatures, and is one of the new security features included in the &lt;a href=&quot;https://eclipseide.org/&quot;&gt;2023-06 Eclipse IDE release&lt;/a&gt;. The existing mechanism for provisioning new plugins and extensions into the IDE to verify their signatures is an industry standard (&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/deployment/jar/signing.html&quot;&gt;jar signing&lt;/a&gt;), but that is not the case for PGP digital signatures support.&lt;/p&gt;
&lt;p&gt;This lack of assurance that the new mechanism was secure led us to order the audit, which was done in partnership with the &lt;a href=&quot;https://ostif.org/&quot;&gt;Open Source Technology Improvement Fund&lt;/a&gt; (OSTIF) and completed by &lt;a href=&quot;https://includesecurity.com/&quot;&gt;IncludeSecurity&lt;/a&gt;. The audit revealed that a number of fixes were required, including providing users with more information so they can decide whether the extensions they are installing are safe.&lt;/p&gt;
&lt;p&gt;All vulnerabilities that were identified, including one critical risk, have since been resolved. Check out the &lt;a href=&quot;https://5413615.fs1.hubspotusercontent-na1.net/hubfs/5413615/OSTIF_-_Equinox_p2_Report.pdf&quot;&gt;full report&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;Identifying and addressing vulnerabilities of any provisioning system through a security audit is a critically important aspect of supply chain security. In this case, these fixes will lower the risk of installing malware when developers obtain extensions from the internet.&lt;/p&gt;
&lt;p&gt;The Eclipse IDE, and all extensible IDEs in the market, play a crucial role in the software supply chain. These are the tools used for writing, testing, and deploying software. If an IDE becomes infected with malware, significant damage to the downstream supply chain can follow.&lt;/p&gt;
&lt;p&gt;We’re thrilled with the outcomes of the audit, and this proactive approach to security will save us time and effort in the long run.&lt;/p&gt;
&lt;p&gt;This is the first time the Eclipse Foundation has funded a security audit for an Eclipse project, with three more audits in progress, and an additional three to be conducted later this year. The six upcoming audits are possible because of the funding the Eclipse Foundation received from the &lt;a href=&quot;https://openssf.org/community/alpha-omega/&quot;&gt;Alpha-Omega&lt;/a&gt; Project.&lt;/p&gt;
&lt;h2 id=&quot;get-involved&quot;&gt;Get Involved&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Join the &lt;a href=&quot;https://eclipseide.org/working-group/&quot;&gt;Eclipse IDE Working Group&lt;/a&gt; to help strengthen the IDE&lt;/li&gt;
&lt;li&gt;Learn more about the &lt;a href=&quot;https://www.eclipse.org/org/workinggroups/eclipse-cyber-risk-concept.php&quot;&gt;Eclipse Cyber Risk Initiative&lt;/a&gt;, and how your organization can join the effort to strengthen the open source supply chain. Please subscribe to the &lt;a href=&quot;https://accounts.eclipse.org/mailing-list/eclipse-cyber-risk-initiative&quot;&gt;ECRI mailing list&lt;/a&gt; to join the initiative, or to follow its progress.&lt;/li&gt;
&lt;li&gt;Government regulation of the software industry is coming, and pending legislation in Europe such as the Cyber Resilience Act and the Product Liability Directive pose enormous risks to the &lt;a href=&quot;https://outreach.eclipse.foundation/cyber-resilience-act-open-source&quot;&gt;open source community and ecosystem&lt;/a&gt;. We will be &lt;a href=&quot;https://www.crowdcast.io/e/cra-july13/register&quot;&gt;holding an all members call&lt;/a&gt; next &lt;strong&gt;Thursday, July 13, at 14:30 CEST&lt;/strong&gt; to provide an update on the challenges we face as a community and as an industry.&lt;/li&gt;
&lt;/ul&gt;</description>
	<pubDate>Wed, 12 Jul 2023 14:00:00 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: The benefits of participating in the OpenJDK Quality Outreach Program</title>
	<guid isPermaLink="false">https://medium.com/p/590b86382f20</guid>
	<link>https://donraab.medium.com/the-benefits-of-participating-in-the-openjdk-quality-outreach-program-590b86382f20?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;FOSS Projects and OpenJDK collaborating for a more robust Java platform.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/0*SX7AuvrVcopiRbBN&quot; /&gt;&lt;figcaption&gt;Photo by &lt;a href=&quot;https://unsplash.com/@alinnnaaaa?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Alina Grubnyak&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;The OpenJDK Quality Outreach Program&lt;/h3&gt;&lt;p&gt;I’d like to tell you about an amazing OpenJDK Program that FOSS Java project maintainers should consider joining, to help guarantee that the Java Platform remains the best and most stable platform for software developers. An introduction to the OpenJDK Quality Outreach Progam (QOP), which is run by the OpenJDK Quality Group is available at the following link.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://wiki.openjdk.org/display/quality/Quality+Outreach&quot;&gt;Quality Outreach&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Joining the OpenJDK Quality Outreach Program is easy, and the benefits are real. The above link also has instructions for joining the program in a section titled “How to join the Quality Outreach Program”.&lt;/p&gt;&lt;p&gt;Once you join the program, and actively report your test results against early access versions of the OpenJDK, the benefits begin. Your test suite(s) become part of the overall suite of tests that can help validate the quality of the next OpenJDK release.&lt;/p&gt;&lt;p&gt;It’s that simple. You run the tests of your open source project against early access builds that can be easily setup if your project has automated builds setup with GitHub Actions.&lt;/p&gt;&lt;p&gt;Worst case, you never find a problem but still contribute to your own confidence level that the next release of the OpenJDK will work fine with your project. Win!&lt;/p&gt;&lt;p&gt;Best case, you discover a real problem that you report in time for the OpenJDK Core team to submit a bug fix before the next release. Win!&lt;/p&gt;&lt;h3&gt;Eclipse Collections is an active member of QOP&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; has been actively reporting testing status against early access versions of the OpenJDK for several years. We email &lt;a href=&quot;https://medium.com/u/d8a30ebc013f&quot;&gt;David Delabassee&lt;/a&gt; and he updates the project status on the OpenJDK Quality Outreach Program Wiki.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*DHw2WM5FACrAaHNnr1gY-A.png&quot; /&gt;&lt;figcaption&gt;Green test status for Eclipse Collections against OpenJDK 11 and 17&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/u/4285d8a2ca86&quot;&gt;Nikhil Nanivadekar&lt;/a&gt; and I are the co-project leads for Eclipse Collections. We take turns reporting testing status to David and the OpenJDK Quality Outreach Program.&lt;/p&gt;&lt;h3&gt;Early Access testing with the OpenJDK&lt;/h3&gt;&lt;p&gt;I began testing GS Collections, before it became Eclipse Collections, with early access binary versions of the OpenJDK for the much anticipated Java 8 release. I was a member of the JSR 335 Expert Group, so was actively testing and reporting my experience to the Expert Group, testing Lambdas and Java Streams with GS Collections. Among other things, I discovered and reported a performance issue related to parallel Java Streams and non-JDK RandomAccess List implementations. I blogged about this experience at the following link.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://donraab.medium.com/traveling-the-road-from-idea-all-the-way-to-openjdk-fc7ae04371a5&quot;&gt;Traveling the road from Idea all the way to OpenJDK&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The parallel Stream performance problem I discovered was verified and addressed with a fix in time for the JDK 9 release. The fix resulted in the creation of a class named RandomAccessSpliterator.&lt;/p&gt;&lt;h3&gt;Enter the OpenJDK Quality Outreach Program&lt;/h3&gt;&lt;p&gt;I scanned the &lt;a href=&quot;https://mail.openjdk.org/pipermail/quality-discuss/&quot;&gt;quality-discuss&lt;/a&gt; mail list archive to see if I could find when the OpenJDK Quality Outreach Program became a formal program. The mail list and Quality Group dates all the way back to 2007. I discovered &lt;a href=&quot;https://mail.openjdk.org/pipermail/quality-discuss/2014-August/000289.html&quot;&gt;this email&lt;/a&gt; from Rory O’Donnell in August 2014 that looks like the beginning of the expansion of QA Outreach for the OpenJDK. This email corresponds with this Quarterly Report from Q1 2014.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://wiki.openjdk.org/display/Adoption/Quarterly+Report+for+Q1+2014&quot;&gt;Quarterly Report for Q1 2014&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Screenshot from above link&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*eOIBTWpU0VF3ehFG9ScDjA.png&quot; /&gt;&lt;figcaption&gt;QA Outreach&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;By 2015, the Quality Outreach Program was moved to the OpenJDK Quality Group as mentioned in &lt;a href=&quot;https://mail.openjdk.org/pipermail/quality-discuss/2015-September/000415.html&quot;&gt;this email&lt;/a&gt; from Rory. There were &lt;strong&gt;48&lt;/strong&gt; participating FOSS projects at that time.&lt;/p&gt;&lt;p&gt;Based on a manual counting of projects on the Quality Outreach Program wiki today, the program now has &lt;strong&gt;168&lt;/strong&gt; FOSS projects participating.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://wiki.openjdk.org/display/quality/Quality+Outreach&quot;&gt;Quality Outreach&lt;/a&gt;&lt;/p&gt;&lt;p&gt;I’m going to share some discoveries in the sections that follow that the Eclipse Collections project has made during Early Access testing of OpenJDK releases over the past few years. I hope these stories encourage more FOSS Java projects to join the program.&lt;/p&gt;&lt;h3&gt;A discovery in JDK 15&lt;/h3&gt;&lt;p&gt;During testing of the Early Access version of JDK 15, Nikhil discovered an issue with a default isEmpty method that was added to CharSequence. The new default method clashed with a default isEmpty method we had defined much earlier on a type named PrimitiveIterable.&lt;/p&gt;&lt;p&gt;Nikhil reported the issue to the OpenJDK Quality Outreach Program. We decided the fix to the problem should happen in Eclipse Collections so we added implementations of isEmpty to all concrete types where the two default implementations resulted in ambiguity.&lt;/p&gt;&lt;p&gt;Stuart Marks wrote a great blog describing the problem we discovered with CharSequence.isEmpty.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://stuartmarks.wordpress.com/2020/09/22/incompatibilities-with-jdk-15-charsequence-isempty/&quot;&gt;Incompatibilities with JDK 15 CharSequence.isEmpty&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The problem we discovered had more far reaching implications to the testing of default methods when they are added to existing interfaces in the OpenJDK or other widely used JVM Languages and Libraries. What we learned was that since the default method feature was introduced in Java 8, there exists the possibility for collisions of default and abstract methods to happen in diamond interface hierarchies with methods with identical signatures. Stuart describes this in depth in the article above.&lt;/p&gt;&lt;h3&gt;Discoveries in JDK 21&lt;/h3&gt;&lt;p&gt;During recent testing of the Early Access version of JDK 21, I discovered two issues. One issue was similar to the issue we discovered in JDK 15. New default methods were added along with new interfaces in &lt;a href=&quot;https://openjdk.org/jeps/431&quot;&gt;JEP 431&lt;/a&gt;. The new default methods clashed with existing abstract methods we had defined in Eclipse Collections. The entire Java community was given a heads up on the potential impact of this JEP being included in JDK 21. This heads up helped me spot and understand the issue quickly. Thank you!&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://inside.java/2023/05/12/quality-heads-up/&quot;&gt;Quality Outreach Heads-up - JDK 21: Sequenced Collections Incompatibilities&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We had expected potential compilation issues in Eclipse Collections with the addition of Sequenced Collections in JDK 21. We have had getFirst and getLast methods defined on the OrderedIterable interface in Eclipse Collections for many years, and on RichIterable since version 1.0 of the library. The compilation issues we encountered &lt;em&gt;may&lt;/em&gt; result in us releasing a new version of Eclipse Collections (12.0) that existing users of Eclipse Collections will have to upgrade to in order to use the library with JDK 21. I consider this an acceptable cost for the continued improvement of the Collections Framework in the JDK.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Update (July 8, 2023)&lt;/strong&gt;: It looks like a new release will not be necessary for Eclipse Collections to work with JDK 21. It looks like the issue with getFirst and getLast is a compilation only issue. I validated this looking at GitHub Actions builds using JDK 21 and Eclipse Collections 11.1 in the &lt;a href=&quot;https://github.com/eclipse/eclipse-collections-kata/actions&quot;&gt;Eclipse Collections Kata&lt;/a&gt; and &lt;a href=&quot;https://github.com/BNYMellon/CodeKatas/actions&quot;&gt;BNY Mellon CodeKatas&lt;/a&gt; Repos. This is good news! Thanks to &lt;a href=&quot;https://medium.com/u/62d4a2cf0eec&quot;&gt;Nicolai Parlog&lt;/a&gt; for asking me the question!&lt;/p&gt;&lt;p&gt;There was a second issue that I encountered that was unexpected, and has resulted in a fix being applied in the JDK itself. We have a battery of serialization tests in Eclipse Collections, that wind up testing some of the serialization of JDK types like ArrayList, HashSet, HashMap. We have never seen a failure for JDK types in our serialization tests. In our automated tests, I was seeing a failure of serialization for LinkedHashMap. I reported the failure I was seeing in our tests to the OpenJDK Quality Outreach Program. It turns out I had discovered and reported a real issue that has been since fixed for JDK 22 and backported for JDK 21.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://inside.java/2023/06/26/quality-heads-up/&quot;&gt;Quality Outreach Heads-up - On The Importance of Testing With Early-Access Build&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Contributing to Java’s continued stability&lt;/h3&gt;&lt;p&gt;I encourage other FOSS maintainers to join the OpenJDK Quality Outreach Program and participate in Early Access JDK testing. The more we collaboratively test the early access Java Platform releases, the more we collectively guarantee Java’s continued stability. Java is evolving rapidly, and this is a good thing. Evolving safely without breaking existing functionality is much better.&lt;/p&gt;&lt;p&gt;I have championed the participation of two other FOSS projects at my current employer in the OpenJDK Quality Outreach Program.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*wo1N2chB2D0Ma1fPOjPbkg.png&quot; /&gt;&lt;figcaption&gt;BNY Mellon Spring Training and Code Katas participate in the OpenJDK Quality Outreach Program&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4&gt;Spring Kata&lt;/h4&gt;&lt;p&gt;A great set of Spring and Spring Boot code katas from Java Champion, &lt;a href=&quot;https://twitter.com/CGuntur&quot;&gt;Chandra Guntur&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/BNYMellon/spring-kata&quot;&gt;GitHub - BNYMellon/spring-kata: Code katas for learning Spring® and Spring Boot.&lt;/a&gt;&lt;/p&gt;&lt;h4&gt;Code Katas&lt;/h4&gt;&lt;p&gt;A great set of Java code katas maintained by &lt;a href=&quot;https://medium.com/u/b220de0951d0&quot;&gt;Emilie Robichaud&lt;/a&gt; and &lt;a href=&quot;https://medium.com/u/aa39c8c851a0&quot;&gt;Aqsa Malik&lt;/a&gt;, who also blog here on Medium.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/BNYMellon/CodeKatas&quot;&gt;GitHub - BNYMellon/CodeKatas: Code Kata collection for JVM Languages and Libraries.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Thank you for reading this blog! I hope you will consider adding your FOSS projects to the OpenJDK Quality Outreach Program. The folks in the &lt;a href=&quot;https://wiki.openjdk.org/display/quality/Quality+Outreach&quot;&gt;OpenJDK Quality Group&lt;/a&gt; are very supportive and appreciative of testing and contributions, as you can see in some of the links above. I enjoy working in this community, and I hope you will too. Together we can help guarantee that Java remains the best and most stable platform to work with for software developers.&lt;/p&gt;&lt;p&gt;&lt;em&gt;I am the creator of and committer for the &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; OSS project, which is managed at the &lt;/em&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/technology.collections&quot;&gt;&lt;em&gt;Eclipse Foundation&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. Eclipse Collections is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=590b86382f20&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 08 Jul 2023 23:55:12 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: Eclipse Theia 1.39 Release: News and Noteworthy</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2023/07/06/eclipse-theia-1-39-release-news-and-noteworthy/</guid>
	<link>https://eclipsesource.com/blogs/2023/07/06/eclipse-theia-1-39-release-news-and-noteworthy/</link>
	<description>&lt;p&gt;We are happy to announce the Eclipse Theia 1.39 release! The release contains 41 merged pull requests and we welcome two new contributors. In this article we will highlight some selected improvements...&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2023/07/06/eclipse-theia-1-39-release-news-and-noteworthy/&quot; rel=&quot;nofollow&quot;&gt; Eclipse Theia 1.39 Release: News and Noteworthy&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Thu, 06 Jul 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: JBoss Tools 4.28.0.Final for Eclipse 2023-03</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/4.28.0.final.html</guid>
	<link>https://tools.jboss.org/blog/4.28.0.final.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Happy to announce 4.28.0.Final build for Eclipse 2023-06.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Downloads available at &lt;a href=&quot;https://tools.jboss.org/downloads/jbosstools/2023-06/4.28.0.Final.html&quot;&gt;JBoss Tools 4.28.0 Final&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#what-is-new&quot;&gt;&lt;/a&gt;What is New?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Full info is at &lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.28.0.Final.html&quot;&gt;this page&lt;/a&gt;. Some highlights are below.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;general&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#general&quot;&gt;&lt;/a&gt;General&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;components-depreciation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#components-depreciation&quot;&gt;&lt;/a&gt;Components Depreciation&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As communicated in a previous blog article, the following components are now deprecated:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Openshift CDK Tooling&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Openshift Explorer view (already hidden by default) and wizards, targeting Openshift v3&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The current openshift Application Explorer view, based on odo v3 is now the default supported tooling.&lt;/p&gt;
      &lt;/div&gt;
      &lt;p&gt;Related JIRA: &lt;a href=&quot;https://issues.jboss.org/browse/JBIDE-29044&quot;&gt;JBIDE-29044&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;hibernate-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#hibernate-tools&quot;&gt;&lt;/a&gt;Hibernate Tools&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;runtime-provider-updates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#runtime-provider-updates&quot;&gt;&lt;/a&gt;Runtime Provider Updates&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Hibernate 6.2 runtime provider now incorporates Hibernate Core version 6.2.5.Final, Hibernate Ant version 6.2.5.Final and Hibernate Tools version 6.2.5.Final.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Hibernate 5.3 runtime provider now incorporates Hibernate Core version 5.3.30.Final and Hibernate Tools version 5.3.30.Final.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;new-back-end-usage&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#new-back-end-usage&quot;&gt;&lt;/a&gt;New Back-end usage&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We changed the backend system used in the usage bundle from Google Analytocs to Segment. This as no impact on how we collected usage inforamtion, neither change the opt-in choice made in previous version of JBossTools.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As always, neither Eclipse nor JBoss will use any information unless a user has opted in, nor is there ever any personal information sent unless it is provided on the Preferences page.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;and-more&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#and-more&quot;&gt;&lt;/a&gt;And more…​&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can find more noteworthy updates in on &lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.28.0.Final.html&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enjoy!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Stéphane Bouchet&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 05 Jul 2023 10:12:25 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: JBoss Tools for Eclipse 2023-06M2</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/4.28.0.am1.html</guid>
	<link>https://tools.jboss.org/blog/4.28.0.am1.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Happy to announce 4.28.0.AM1 (Developer Milestone 1) build for Eclipse 2023-06M2.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Downloads available at &lt;a href=&quot;https://tools.jboss.org/downloads/jbosstools/2023-06/4.28.0.AM1.html&quot;&gt;JBoss Tools 4.28.0 AM1&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#what-is-new&quot;&gt;&lt;/a&gt;What is New?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Full info is at &lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.28.0.AM1.html&quot;&gt;this page&lt;/a&gt;. Some highlights are below.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;general&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#general&quot;&gt;&lt;/a&gt;General&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;components-depreciation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#components-depreciation&quot;&gt;&lt;/a&gt;Components Depreciation&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Fuse Tooling is now deprecated. &lt;a href=&quot;https://issues.redhat.com/browse/FUSETOOLS-3685&quot;&gt;More information here.&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;components-removal&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#components-removal&quot;&gt;&lt;/a&gt;Components Removal&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As previously announced &lt;a href=&quot;https://issues.redhat.com/browse/JBIDE-28678&quot;&gt;here&lt;/a&gt;, we’ve removed the Central / update tab, SEAM and JSF support from JBossTools.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For central update tab, all the existing central extensions can be installed with the marketplace client, using the entries listed &lt;a href=&quot;https://issues.redhat.com/browse/JBIDE-28853&quot;&gt;here.&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;future-releases-cadences&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#future-releases-cadences&quot;&gt;&lt;/a&gt;Future releases cadences&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Starting from 4.28.0.Final, there will be no more .AM1 releases. The .Final releases can be now scheduled close to the Eclipse releases.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;hibernate-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#hibernate-tools&quot;&gt;&lt;/a&gt;Hibernate Tools&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;runtime-provider-updates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#runtime-provider-updates&quot;&gt;&lt;/a&gt;Runtime Provider Updates&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Hibernate 6.2 runtime provider incorporates Hibernate Core version 6.2.3.Final, Hibernate Ant version 6.2.3.Final and Hibernate Tools version 6.2.3.Final.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;and-more&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#and-more&quot;&gt;&lt;/a&gt;And more…​&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can find more noteworthy updates in on &lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.28.0.AM1.html&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enjoy!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Stéphane Bouchet&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 05 Jul 2023 10:12:25 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: JBoss Tools 4.27.0.Final for Eclipse 2023-03</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/4.27.0.final.html</guid>
	<link>https://tools.jboss.org/blog/4.27.0.final.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Happy to announce 4.27.0.Final build for Eclipse 2023-03.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Downloads available at &lt;a href=&quot;https://tools.jboss.org/downloads/jbosstools/2023-03/4.27.0.Final.html&quot;&gt;JBoss Tools 4.27.0 Final&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#what-is-new&quot;&gt;&lt;/a&gt;What is New?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Full info is at &lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.27.0.Final.html&quot;&gt;this page&lt;/a&gt;. Some highlights are below.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;general&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#general&quot;&gt;&lt;/a&gt;General&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We made several fixes in our server and javaee component to support jakarta namespaces.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;hibernate-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#hibernate-tools&quot;&gt;&lt;/a&gt;Hibernate Tools&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;runtime-provider-updates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#runtime-provider-updates&quot;&gt;&lt;/a&gt;Runtime Provider Updates&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Hibernate 6.2 runtime provider now incorporates Hibernate Core version 6.2.0.CR4, Hibernate Ant version 6.2.0.CR4 and Hibernate Tools version 6.2.0.CR4.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;and-more&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#and-more&quot;&gt;&lt;/a&gt;And more…​&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can find more noteworthy updates in on &lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.27.0.Final.html&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enjoy!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Stéphane Bouchet&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 05 Jul 2023 10:12:25 +0000</pubDate>
</item>
<item>
	<title>Ekkehard Gentz: 45 years working as a developer</title>
	<guid isPermaLink="false">http://ekkescorner.wordpress.com/?p=4370</guid>
	<link>https://ekkescorner.wordpress.com/2023/07/03/45-years-working-as-a-developer/</link>
	<description>&lt;p&gt;Today 45 years working as a developer.&lt;br /&gt;Started 1978-07-03 at Kienzle Datensysteme Hannover with &lt;strong&gt;Assembler&lt;/strong&gt;, soon followed by &lt;strong&gt;Cobol&lt;/strong&gt;.&lt;/p&gt;



&lt;p&gt;Some highlights from last decades:&lt;br /&gt;Apps for Apple/// with &lt;strong&gt;SystemB&lt;/strong&gt; by Hermann Bense&lt;br /&gt;App for AppleDealers with &lt;strong&gt;Omnis3/5/7&lt;/strong&gt;&lt;br /&gt;&lt;strong&gt;Eclipse RCP&lt;/strong&gt; Java Apps with &lt;strong&gt;Riena&lt;/strong&gt;&lt;br /&gt;Mobile Apps for &lt;strong&gt;BlackBerry10&lt;/strong&gt; / Cascades / C++/Qt 4.8 #BB10&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;MDSD&lt;/strong&gt; from #OpenArchitectureware to Xtext/Xtend &lt;/p&gt;



&lt;p&gt;Still using Eclipse &lt;strong&gt;Xtext/Xtend&lt;/strong&gt; to generate Entities / DTOs for Qt / C++ Code&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;BTLE&lt;/strong&gt; support for BarcodeScanner, Waiter Lock, SlattedFrame Motors (#Lattoflex) and more.&lt;/p&gt;



&lt;p&gt;IDE’s: Eclipse, Momentics, #QtCreator&lt;/p&gt;



&lt;p&gt;Since 2016:&lt;br /&gt;&lt;strong&gt;Mobile Apps&lt;/strong&gt; Android, iOS with Qt 5 / &lt;strong&gt;QtQuickControls2&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Speaker&lt;/strong&gt; at #JAX / W-JAX, EclipseCON, BBJAM, #QTWS&lt;/p&gt;



&lt;p&gt;Thx to all the developers committing to &lt;strong&gt;OpenSource Software&lt;/strong&gt;, enabling me to develop complex Apps cross-platform as a single independent developer.&lt;/p&gt;



&lt;p&gt;Current adventure:&lt;br /&gt;&lt;strong&gt;Porting my Apps from Qt 5 to Qt 6.6&lt;/strong&gt;&lt;br /&gt;Speaking about at &lt;strong&gt;#QtWS23&lt;/strong&gt; in &lt;a href=&quot;https://www.qt.io/qt-world-summit-2023&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Berlin 2023-11-29&lt;/a&gt; – my first developer conference after Corona.&lt;/p&gt;



&lt;figure class=&quot;wp-block-image size-large is-resized&quot;&gt;&lt;a href=&quot;https://ekkescorner.files.wordpress.com/2023/07/back_to_berlin.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;wp-image-4372&quot; height=&quot;218&quot; src=&quot;https://ekkescorner.files.wordpress.com/2023/07/back_to_berlin.png?w=786&quot; width=&quot;393&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;



&lt;p&gt;couldn’t wait &lt;img alt=&quot;ðŸ˜‰&quot; class=&quot;wp-smiley&quot; src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f609.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;



&lt;p&gt;Still fun developing mobile business Apps for customers.&lt;/p&gt;



&lt;p&gt;Find me at #QtWS23 or at &lt;a href=&quot;https://discord.gg/J3WHVDZY&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Qt Discord Server&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Looking forward celebrating my 50th anniversary in 2028 &lt;img alt=&quot;ðŸ™‚&quot; class=&quot;wp-smiley&quot; src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/strong&gt;&lt;/p&gt;</description>
	<pubDate>Mon, 03 Jul 2023 15:49:25 +0000</pubDate>
</item>
<item>
	<title>John Kellerman: Eclipse Cloud DevTools Contributor Award: Red Hat for VS Code compatibility in Eclipse Theia</title>
	<guid isPermaLink="false">7367 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/john-kellerman/eclipse-cloud-devtools-contributor-award-red-hat-vs-code-compatibility-eclipse</link>
	<description>&lt;span&gt;Eclipse Cloud DevTools Contributor Award: Red Hat for VS Code compatibility in Eclipse Theia&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;p&gt;The Eclipse Cloud Developer Tools contributor award for June goes to &lt;a href=&quot;https://www.eclipse.org/membership/showMember.php?member_id=731&quot;&gt;Red Hat&lt;/a&gt; for initially contributing the VS Code Extension API to Theia. This allows regular VS Code extensions to run directly in Theia and any Theia-based product.&lt;/p&gt;&lt;img alt=&quot;Well done&quot; class=&quot;align-center&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/2023-06/board-gc72b2e7ce_1280.jpg&quot; width=&quot;62.68%&quot; /&gt;&lt;p&gt;As you might know, you can use &lt;a href=&quot;https://theia-ide.org/docs/user_install_vscode_extensions/&quot;&gt;VS Code extensions in Eclipse Theia applications&lt;/a&gt;. This enables you to enhance your Theia-based application with a rich palette of features from a large, robust ecosystem of extensions available for VS Code, e.g. via the &lt;a href=&quot;https://open-vsx.org/&quot;&gt;Open VSX Registry&lt;/a&gt;. Running a VS Code extension in Theia is possible because Theia provides the VS Code extension API. This API was initially contributed by Red Hat.&lt;/p&gt;&lt;p&gt;It is worth noting that the VS Code extension API has of course been extended a lot since then, with the original work evolving over the years. The recent &lt;a href=&quot;https://github.com/eclipse-theia/theia/issues/12375&quot;&gt;Theia release 1.38 raises the compatibility level to VS Code 1.77&lt;/a&gt;, which is just one month behind VS Code and allows the vast majority of extensions to be installed in their latest versions.&lt;/p&gt;&lt;p&gt;Over the years, in addition to Red Hat, many others have contributed to this work including &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=800&quot;&gt;STMicroelectronics&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=682&quot;&gt;Ericsson&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=1194&quot;&gt;TypeFox&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=823&quot;&gt;Arm&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=690&quot;&gt;EclipseSource&lt;/a&gt;, and &lt;a href=&quot;https://gitpod.io/&quot;&gt;Gitpod&lt;/a&gt;. The VS Code Extension API is a great example of how open source collaboration works well; one stakeholder kicks off an effort and others join the initiative over time.&lt;/p&gt;&lt;p&gt;Congratulations and well done Read Hat!&lt;/p&gt;&lt;p&gt;The &lt;a href=&quot;https://ecdtools.eclipse.org/&quot;&gt;Cloud DevTools Working Group&lt;/a&gt; provides a vendor-neutral ecosystem of open-source projects focused on defining, implementing and promoting best-in-class web and cloud-based development tools. It is hosted at the Eclipse Foundation, current members of the group include &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=848&quot;&gt;AMD&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=823&quot;&gt;Arm&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=690&quot;&gt;EclipseSource&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=682&quot;&gt;Ericsson&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=863&quot;&gt;Obeo&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=731&quot;&gt;RedHat&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=1069&quot;&gt;Renesas&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=800&quot;&gt;STMicroelectronics&lt;/a&gt; and &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=1194&quot;&gt;TypeFox&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;This Eclipse Cloud DevTools contributor award is sponsored by &lt;a href=&quot;https://eclipsesource.com/&quot;&gt;EclipseSource&lt;/a&gt;, providing &lt;a href=&quot;https://eclipsesource.com/services/tools/&quot;&gt;consulting and implementation services&lt;/a&gt; for &lt;a href=&quot;https://eclipsesource.com/web-and-cloud-based-tools/&quot;&gt;web-based tools&lt;/a&gt;, &lt;a href=&quot;https://eclipsesource.com/technology/eclipse-glsp/&quot;&gt;Eclipse GLSP&lt;/a&gt;,  &lt;a href=&quot;https://eclipsesource.com/technology/eclipse-theia/&quot;&gt;Eclipse Theia&lt;/a&gt;, and &lt;a href=&quot;https://eclipsesource.com/technology/vs-code/&quot;&gt;VS Code&lt;/a&gt;.   &lt;br /&gt; &lt;/p&gt;&lt;/div&gt;
      
&lt;span&gt;&lt;span&gt;John Kellerman&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;Thu, 2023-06-29 13:55&lt;/span&gt;

  &lt;div class=&quot;field field--name-field-blog-tags field--type-entity-reference field--label-above&quot;&gt;
    &lt;div class=&quot;field--label&quot;&gt;Tags&lt;/div&gt;
          &lt;div class=&quot;field--items&quot;&gt;
              &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/ecdtools&quot; hreflang=&quot;en&quot;&gt;ECDTools&lt;/a&gt;&lt;/div&gt;
          &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/clouddevtools-0&quot; hreflang=&quot;en&quot;&gt;CloudDevTools&lt;/a&gt;&lt;/div&gt;
          &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/theia&quot; hreflang=&quot;en&quot;&gt;Theia&lt;/a&gt;&lt;/div&gt;
          &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/theia-contributor-award&quot; hreflang=&quot;en&quot;&gt;Theia Contributor Award&lt;/a&gt;&lt;/div&gt;
              &lt;/div&gt;
      &lt;/div&gt;</description>
	<pubDate>Thu, 29 Jun 2023 17:55:20 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: Iterate over any Iterable in Java</title>
	<guid isPermaLink="false">https://medium.com/p/bec78eeeb452</guid>
	<link>https://medium.com/javarevisited/iterate-over-any-iterable-in-java-bec78eeeb452?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;Eclipse Collections supplies iteration patterns for any Iterable type.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/0*iwxVapkRyg03Nptg&quot; /&gt;&lt;figcaption&gt;Photo by &lt;a href=&quot;https://unsplash.com/de/@mangofantasy?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Tim Johnson&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Iterating over collections&lt;/h3&gt;&lt;p&gt;Iterating over collections is a fundamental feature of any modern programming language. There are many common iteration patterns that have well known names and alternatives like filter (select/reject), map (collect), reduce (injectInto), groupBy. There are four approaches to implementing iteration patterns — eager/serial, eager/parallel, lazy/serial, and lazy/parallel. Java Streams provide lazy/serial and lazy/parallel iteration patterns. Terminal operations like forEach, collect, any/all/noneMatch, force iteration execution to happen. Terminal operations are eager operations.&lt;/p&gt;&lt;p&gt;Eclipse Collections has offered eager/serial and eager/parallel iteration patterns for a very long time. Eager iteration patterns execute immediately. They are the equivalent of iteration code developers would write by hand using for loops.&lt;/p&gt;&lt;p&gt;Eclipse Collections also offers lazy/serial and lazy/parallel iteration patterns. I will not discuss lazy/parallel iteration in this blog. Instead I wanted to describe the eager/serial, eager/parallel and lazy/serial iteration patterns that were implemented in Eclipse Collections via utility classes that works with any java.lang.Iterable type. These classes still exist in Eclipse Collections today and can be useful for executing eager or lazy operations against any Iterable type.&lt;/p&gt;&lt;p&gt;If you’d like to understand more about eager and lazy iteration, the following blog explains the differences in detail.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/javarevisited/eager-is-easy-lazy-is-labyrinthine-b12605f13048&quot;&gt;Eager is Easy, Lazy is Labyrinthine&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Looping with Iterable&lt;/h3&gt;&lt;p&gt;Since Java 5, the Java Collections framework has had the java.lang.Iterable interface, which is the parent interface of java.util.Collection. In Java 5, the enhanced for loop was added that would work with any implementation of Iterable. The enhanced for loop allowed developers to write more concise loops when iterating over Java Collection implementations and other Iterable types.&lt;/p&gt;&lt;p&gt;Before Java 5, we had to write code like this to iterate over a java.util.Collection using a for loop.&lt;/p&gt;&lt;pre&gt;Collection&amp;lt;Integer&amp;gt; list = Arrays.asList(1, 2, 3, 4, 5);&lt;br /&gt;for (Iterator&amp;lt;Integer&amp;gt; it = list.iterator(); it.hasNext(); )&lt;br /&gt;{&lt;br /&gt;    Integer each = it.next();&lt;br /&gt;    System.out.println(each);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;After Java 5, we could use the less verbose enhanced for loop as illustrated in the following example.&lt;/p&gt;&lt;pre&gt;Iterable&amp;lt;Integer&amp;gt; list = Arrays.asList(1, 2, 3, 4, 5);&lt;br /&gt;for (Integer each : list)&lt;br /&gt;{&lt;br /&gt;    System.out.println(each);&lt;br /&gt;}&lt;/pre&gt;&lt;h3&gt;Recharging Iterable with forEach&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; was initially developed using JDK 1.4. The first iteration method in Eclipse Collections, named forEach, was added to a utility class named Iterate and took a functional interface type called Procedure as a parameter. Before Java 5, we could use Iterate and forEach with any java.util.Collection. We had to resort to using anonymous inner classes to work with methods like forEach. After Java 5, the Iterate utility was updated to work with java.lang.Iterable instead of java.util.Collection.&lt;/p&gt;&lt;p&gt;The following code shows how you could use the Eclipse Collections Iterate utility and its forEach method after Java 5 and before Java 8.&lt;/p&gt;&lt;pre&gt;Iterable&amp;lt;Integer&amp;gt; list = Arrays.asList(1, 2, 3, 4, 5);&lt;br /&gt;Iterate.forEach(list, new Procedure&amp;lt;Integer&amp;gt;()&lt;br /&gt;{&lt;br /&gt;    @Override&lt;br /&gt;    public void value(Integer each)&lt;br /&gt;    {&lt;br /&gt;        System.out.println(each);&lt;br /&gt;    }&lt;br /&gt;});&lt;/pre&gt;&lt;p&gt;If your reaction to this code is “yuck!”, then you would not be alone. Why would anyone agree to write code like this? I believed since I started programming in Java that it was inevitable that Java would eventually get lambdas, and this style of coding with anonymous inner classes would eventually be replaced with something much more concise and readable. Once Java 8 provided support for lambdas and method references to the Java development community, coding patterns using anonymous inner classes were able to be converted using automated refactoring tools.&lt;/p&gt;&lt;p&gt;The same method when used with Java 8 or above looks as follows.&lt;/p&gt;&lt;pre&gt;Iterable&amp;lt;Integer&amp;gt; list = Arrays.asList(1, 2, 3, 4, 5);&lt;br /&gt;Iterate.forEach(list, each -&amp;gt; System.out.println(each));&lt;/pre&gt;&lt;p&gt;This code can be further simplified by using a method reference shown below.&lt;/p&gt;&lt;pre&gt;Iterable&amp;lt;Integer&amp;gt; list = Arrays.asList(1, 2, 3, 4, 5);&lt;br /&gt;Iterate.forEach(list, System.out::println);&lt;/pre&gt;&lt;p&gt;Since the release of Java 8, the need for Iterate.forEach was lessened by the addition of the default implementation of forEach that was added to Iterable. With the new default forEach method, the following code works with Iterable.&lt;/p&gt;&lt;pre&gt;Iterable&amp;lt;Integer&amp;gt; list = Arrays.asList(1, 2, 3, 4, 5);&lt;br /&gt;list.forEach(System.out::println);&lt;/pre&gt;&lt;h3&gt;Eager Iteration methods for any Iterable type&lt;/h3&gt;&lt;p&gt;The Iterate utility class provides much more than just forEach. There are many &lt;a href=&quot;https://medium.com/javarevisited/from-eager-to-fused-to-lazy-66450e290002?source=friends_link&amp;amp;sk=1c61f413a8148ece8e60e0a2a87137b3&quot;&gt;eager iteration methods&lt;/a&gt; provided for any Iterable type. Browse the Javadoc below to find out what methods are available.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/11.1.0/org/eclipse/collections/impl/utility/Iterate.html&quot;&gt;Iterate (Eclipse Collections - 11.1.0)&lt;/a&gt;&lt;/p&gt;&lt;h4&gt;Structure&lt;/h4&gt;&lt;p&gt;A more compact view of the methods on Iterate is available by using the Structure view in IntelliJ. There are over 130 methods available on the Iterate class. I include a code example of a method from the Iterate class contained in each screenshot in the sections that follow.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*RyllQOK5tMbOY6wcF04jjQ.png&quot; /&gt;&lt;figcaption&gt;Methods from addAllIterable to collectInt&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;Examples — any and all&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The methods anySatisfy and allSatisfy are the equivalents of Java Streams anyMatch and allMatch. The methods anySatisfyWith and allSatisfyWith take an extra parameter which makes it possible to use them with more method references.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void anyAndAllSatisfy()&lt;br /&gt;{&lt;br /&gt;    List&amp;lt;String&amp;gt; list = List.of(&quot;cat&quot;, &quot;bat&quot;, &quot;rat&quot;);&lt;br /&gt;&lt;br /&gt;   // Java Streams&lt;br /&gt;    Assertions.assertTrue(&lt;br /&gt;            list.stream().anyMatch(each -&amp;gt; each.contains(&quot;at&quot;)));&lt;br /&gt;    Assertions.assertTrue(&lt;br /&gt;            list.stream().allMatch(each -&amp;gt; each.contains(&quot;at&quot;)));&lt;br /&gt;&lt;br /&gt;    // Eclipse Collections Iterate&lt;br /&gt;    Assertions.assertTrue(&lt;br /&gt;            Iterate.anySatisfy(list, each -&amp;gt; each.contains(&quot;at&quot;)));&lt;br /&gt;    Assertions.assertTrue(&lt;br /&gt;            Iterate.allSatisfy(list, each -&amp;gt; each.contains(&quot;at&quot;)));&lt;br /&gt;&lt;br /&gt;    // Eclipse Collections Iterate &quot;With&quot;&lt;br /&gt;    Assertions.assertTrue(&lt;br /&gt;            Iterate.anySatisfyWith(list, String::contains, &quot;at&quot;));&lt;br /&gt;    Assertions.assertTrue(&lt;br /&gt;            Iterate.allSatisfyWith(list, String::contains, &quot;at&quot;));&lt;br /&gt;}&lt;/pre&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*F4owGikwqYAzpxfYMLXLMg.png&quot; /&gt;&lt;figcaption&gt;Methods from collectLong to getOnly&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;Examples — detect&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The method detect finds the first element that matches a Predicate. There are also detectOptional, detectWith, and detectWithOptional versions.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void detect()&lt;br /&gt;{&lt;br /&gt;    List&amp;lt;String&amp;gt; list = List.of(&quot;cat&quot;, &quot;bat&quot;, &quot;rat&quot;);&lt;br /&gt;&lt;br /&gt;    // Java Streams&lt;br /&gt;    Assertions.assertEquals(&lt;br /&gt;            &quot;cat&quot;,&lt;br /&gt;            list.stream()&lt;br /&gt;                    .filter(each -&amp;gt; each.contains(&quot;at&quot;))&lt;br /&gt;                    .findAny()&lt;br /&gt;                    .orElse(null));&lt;br /&gt;&lt;br /&gt;    // Eclipse Collections Iterate&lt;br /&gt;    Assertions.assertEquals(&lt;br /&gt;            &quot;cat&quot;,&lt;br /&gt;            Iterate.detectOptional(list, each -&amp;gt; each.contains(&quot;at&quot;))&lt;br /&gt;                    .orElse(null));&lt;br /&gt;    Assertions.assertEquals(&lt;br /&gt;            &quot;cat&quot;,&lt;br /&gt;            Iterate.detect(list, each -&amp;gt; each.contains(&quot;at&quot;)));&lt;br /&gt;&lt;br /&gt;    // Eclipse Collections Iterate &quot;With&quot;&lt;br /&gt;    Assertions.assertEquals(&lt;br /&gt;            &quot;cat&quot;,&lt;br /&gt;            Iterate.detectWithOptional(list, String::contains, &quot;at&quot;)&lt;br /&gt;                    .orElse(null));&lt;br /&gt;    Assertions.assertEquals(&lt;br /&gt;            &quot;cat&quot;,&lt;br /&gt;            Iterate.detectWith(list, String::contains, &quot;at&quot;));&lt;br /&gt;}&lt;/pre&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*ciQ8nUQp0jVky296cZzjkw.png&quot; /&gt;&lt;figcaption&gt;Methods from groupBy to reject&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;Example — makeString&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The method makeString is the equivalent of Collectors.joining. One notable difference is that makeString does not require an Object to be converted to a String first.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void makeString()&lt;br /&gt;{&lt;br /&gt;    List&amp;lt;Integer&amp;gt; integers = List.of(1, 2, 3);&lt;br /&gt;&lt;br /&gt;    // Java Streams&lt;br /&gt;    Assertions.assertEquals(&lt;br /&gt;            &quot;1, 2, 3&quot;,&lt;br /&gt;            integers.stream()&lt;br /&gt;                    .map(Object::toString)&lt;br /&gt;                    .collect(Collectors.joining(&quot;, &quot;)));&lt;br /&gt;&lt;br /&gt;    // Eclipse Collections Iterate&lt;br /&gt;    Assertions.assertEquals(&lt;br /&gt;            &quot;1, 2, 3&quot;,&lt;br /&gt;            Iterate.makeString(integers, &quot;, &quot;));&lt;br /&gt;}&lt;/pre&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*-hCEdymqoD9pmKadZnyODw.png&quot; /&gt;&lt;figcaption&gt;Methods from reject to take&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;Example — sumOfInt&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The method sumOfInt returns the sum of some IntFunction applied to each element of the Collection. The difference between IntStream.sum and sumOfInt is that IntStream returns an int, which may quietly overflow. The sumOfInt method widens to a long, which will handle summing much larger numbers.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void sumOfInt()&lt;br /&gt;{&lt;br /&gt;    List&amp;lt;Integer&amp;gt; integers = List.of(1, 2, 3);&lt;br /&gt;&lt;br /&gt;    // Java Streams&lt;br /&gt;    Assertions.assertEquals(&lt;br /&gt;            6,&lt;br /&gt;            integers.stream()&lt;br /&gt;                    .mapToInt(Integer::intValue)&lt;br /&gt;                    .sum());&lt;br /&gt;&lt;br /&gt;    // Eclipse Collections Iterate&lt;br /&gt;    Assertions.assertEquals(&lt;br /&gt;            6L,&lt;br /&gt;            Iterate.sumOfInt(integers, Integer::intValue));&lt;br /&gt;}&lt;/pre&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*lb56ugtrCgiw5JMJIw90nQ.png&quot; /&gt;&lt;figcaption&gt;Methods from toArray to zipWithIndex&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;Example — zip&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The method zip takes two Iterable instances, and creates a List of Pair instances. There is no equivalent in Java Stream, but this does work with any two Iterable instances.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void zip()&lt;br /&gt;{&lt;br /&gt;    List&amp;lt;Integer&amp;gt; integers = List.of(1, 2, 3);&lt;br /&gt;    List&amp;lt;String&amp;gt; strings = List.of(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;);&lt;br /&gt;&lt;br /&gt;    // Eclipse Collections Iterate&lt;br /&gt;    List&amp;lt;Pair&amp;lt;Integer, String&amp;gt;&amp;gt; zipped =&lt;br /&gt;            Iterate.zip(integers, strings, new ArrayList&amp;lt;&amp;gt;());&lt;br /&gt;&lt;br /&gt;    List&amp;lt;Pair&amp;lt;Integer, String&amp;gt;&amp;gt; expected = List.of(&lt;br /&gt;            Tuples.pair(1, &quot;1&quot;),&lt;br /&gt;            Tuples.pair(2, &quot;2&quot;),&lt;br /&gt;            Tuples.pair(3, &quot;3&quot;));&lt;br /&gt;    Assertions.assertEquals(expected, zipped);&lt;br /&gt;}&lt;/pre&gt;&lt;h3&gt;Optimized by type&lt;/h3&gt;&lt;p&gt;Iterate does its best to optimize each eager iteration method by type. There are instanceof checks that look for ArrayList, List, and RandomAccess.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*RC-qjpV5NGnA_N8d35mlJA.png&quot; /&gt;&lt;figcaption&gt;Select with a targetCollection optimized by type&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;The Futility of Utility&lt;/h3&gt;&lt;p&gt;Utility classes can be very useful for extending the capabilities of types without having the expand the interface of the types. Unfortunately, utility classes also have a problem — what type should they return?&lt;/p&gt;&lt;blockquote&gt;You only get one shot&lt;/blockquote&gt;&lt;p&gt;The Iterate utility takes Iterable as a parameter, and usually returns Collection as a result. Collection is the most usesful abstract type to return. Unfortunately, Collection is not as useful as List or Set in terms of communicating the capabilities of the result.&lt;/p&gt;&lt;p&gt;There are methods on Iterate that take the return result as a parameter, and return the same result. These methods, although slightly more verbose, are the most useful as they provide the most specific return type.&lt;/p&gt;&lt;p&gt;The following code example illustrates the differences of return type between the overloaded forms of collect on the Iterate class. The method collect in Eclipse Collections is the equivalent of map on Stream. The name collect used in Eclipse Collections comes from the same method name in the Collections framework in the Smalltalk-80 programming language, which has been around since 1980.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void collectOnIterate()&lt;br /&gt;{&lt;br /&gt;    Set&amp;lt;Integer&amp;gt; set = Set.of(1, 2, 3);&lt;br /&gt;    Set&amp;lt;String&amp;gt; expected = Set.of(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;);&lt;br /&gt;&lt;br /&gt;    // Return type of Collection&lt;br /&gt;    Collection&amp;lt;String&amp;gt; collect =&lt;br /&gt;            Iterate.collect(set, Object::toString);&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(expected, collect);&lt;br /&gt;&lt;br /&gt;    CopyOnWriteArraySet&amp;lt;String&amp;gt; target = new CopyOnWriteArraySet&amp;lt;&amp;gt;();&lt;br /&gt;    &lt;br /&gt;    // Return type is the same type as the target parameter&lt;br /&gt;    CopyOnWriteArraySet&amp;lt;String&amp;gt; collectWithTarget =&lt;br /&gt;            Iterate.collect(set, Object::toString, target);&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(expected, collectWithTarget);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;If I had the opportunity to re-build Iterate from scratch, I would only provide the methods which take a target collection as a parameter and return the same type as the target collection. While these methods are more verbose, they are also more versatile and useful.&lt;/p&gt;&lt;h3&gt;Iterate and other static utility classes&lt;/h3&gt;&lt;p&gt;In addition to Iterate, there are several other *Iterate static utility classes.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*D_KsXB4sWfrmRARmRjyBlQ.png&quot; /&gt;&lt;figcaption&gt;Iterate and friends&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;ParallelIterate is the eager/parallel equivalent of Iterate. ParallelIterate also takes Iterable as a parameter.&lt;/p&gt;&lt;p&gt;The following code example shows the equivalent of collect using ParallelIterate.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void collectOnParallelIterate()&lt;br /&gt;{&lt;br /&gt;    Set&amp;lt;Integer&amp;gt; set = Set.of(1, 2, 3);&lt;br /&gt;    Set&amp;lt;String&amp;gt; expected = Set.of(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;);&lt;br /&gt;&lt;br /&gt;    // Return type of Collection&lt;br /&gt;    Collection&amp;lt;String&amp;gt; collect =&lt;br /&gt;            ParallelIterate.collect(set, Object::toString);&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(expected, collect);&lt;br /&gt;&lt;br /&gt;    CopyOnWriteArraySet&amp;lt;String&amp;gt; target = new CopyOnWriteArraySet&amp;lt;&amp;gt;();&lt;br /&gt;&lt;br /&gt;    // Return type is the same type as the target parameter&lt;br /&gt;    CopyOnWriteArraySet&amp;lt;String&amp;gt; collectWithTarget =&lt;br /&gt;            ParallelIterate.collect(set, Object::toString, target, true);&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(expected, collectWithTarget);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;ListIterate returns MutableList instead of Collection. If you know you are iterating over a List, then using this utility class gives you access to methods that work with any List, and returns a MutableList, which has the extensive Eclipse Collections API available.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void collectOnListIterate()&lt;br /&gt;{&lt;br /&gt;    List&amp;lt;Integer&amp;gt; list = List.of(1, 2, 3);&lt;br /&gt;    List&amp;lt;String&amp;gt; expected = Lists.mutable.of(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;);&lt;br /&gt;&lt;br /&gt;    // Return type of MutableList&lt;br /&gt;    MutableList&amp;lt;String&amp;gt; collect =&lt;br /&gt;            ListIterate.collect(list, Object::toString);&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(expected, collect);&lt;br /&gt;    // Extensive Eclipse Collections API available on MutableList&lt;br /&gt;    Assertions.assertEquals(&quot;1, 2, 3&quot;, collect.makeString());&lt;br /&gt;&lt;br /&gt;    MultiReaderList&amp;lt;String&amp;gt; target = Lists.multiReader.empty();&lt;br /&gt;&lt;br /&gt;    // Return type is the same type as the target parameter&lt;br /&gt;    MultiReaderList&amp;lt;String&amp;gt; collectWithTarget =&lt;br /&gt;            ListIterate.collect(list, Object::toString, target);&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(expected, collectWithTarget);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;Over the years, many developers have opted for using ListIterate instead of Iterate. This is primarily because Iterable as a type has never seen widespread use. List and Set are much more commonly used types than either Iterable or Collection. ParallelIterate continues to demonstrate good performance for use cases where parallelism has been proven to be useful.&lt;/p&gt;&lt;h3&gt;Lazy Iteration methods for any Iterable type&lt;/h3&gt;&lt;p&gt;While Iterate and ParallelIterate provide eager iteration patterns for any Iterable, LazyIterate provides lazy iteration patterns for any Iterable. LazyIterate will create a LazyIterable that then requires a terminal operation to iterate over the collection, similar to how Java Stream operates. Browse the Javadoc below to find out what methods are available.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/11.1.0/org/eclipse/collections/impl/utility/LazyIterate.html&quot;&gt;LazyIterate (Eclipse Collections - 11.1.0)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;LazyIterate was created much later than Iterate and ParallelIterate. By the time LazyIterate was created, Eclipse Collections already had an extensive RichIterable interface hierarchy, which included the LazyIterable interface.&lt;/p&gt;&lt;h4&gt;Structure&lt;/h4&gt;&lt;p&gt;A concise view of the methods is available by using the Structure view in IntelliJ. In this case, concise refers to the method signatures which contain all of the information without as much of the structure.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*WMg9jORx-08X22Obt7Ljyw.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;Example — adapt&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The method adapt, adapts any Iterable as a LazyIterable, which has the complete API of RichIterable, which LazyIterable extends.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void adaptOnLazyIterate()&lt;br /&gt;{&lt;br /&gt;    List&amp;lt;Integer&amp;gt; list = List.of(1, 2, 3);&lt;br /&gt;    List&amp;lt;String&amp;gt; expected = Lists.mutable.of(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;);&lt;br /&gt;&lt;br /&gt;    // Adapt the List as a LazyIterable&lt;br /&gt;    LazyIterable&amp;lt;Integer&amp;gt; iterable = LazyIterate.adapt(list);&lt;br /&gt;    // Return type of MutableList&lt;br /&gt;    MutableList&amp;lt;String&amp;gt; collectToList = iterable&lt;br /&gt;            .collect(Object::toString)&lt;br /&gt;            .toList();&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(expected, collectToList);&lt;br /&gt;    // Extensive Eclipse Collections API available on MutableList&lt;br /&gt;    Assertions.assertEquals(&quot;1, 2, 3&quot;, collectToList.makeString());&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example — collect&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The lazy form of collect is very similar to map in Java Stream in terms of how it behaves. The difference between Stream and LazyIterable on the other hand is enormous.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void collectOnLazyIterate()&lt;br /&gt;{&lt;br /&gt;    List&amp;lt;Integer&amp;gt; list = List.of(1, 2, 3);&lt;br /&gt;    List&amp;lt;String&amp;gt; expected = Lists.mutable.of(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;);&lt;br /&gt;&lt;br /&gt;    // Return type of LazyIterable&lt;br /&gt;    LazyIterable&amp;lt;String&amp;gt; collect =&lt;br /&gt;            LazyIterate.collect(list, Object::toString);&lt;br /&gt;    // Return type of MutableList&lt;br /&gt;    MutableList&amp;lt;String&amp;gt; toList = collect.toList();&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(expected, toList);&lt;br /&gt;    // Extensive Eclipse Collections API available on MutableList&lt;br /&gt;    Assertions.assertEquals(&quot;1, 2, 3&quot;, toList.makeString());&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;The following is the equivalent code for comparison using Java Stream and the map method.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void mapOnStream()&lt;br /&gt;{&lt;br /&gt;    List&amp;lt;Integer&amp;gt; list = List.of(1, 2, 3);&lt;br /&gt;    List&amp;lt;String&amp;gt; expected = Lists.mutable.of(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;);&lt;br /&gt;&lt;br /&gt;    // Return type of Stream&lt;br /&gt;    Stream&amp;lt;String&amp;gt; map =&lt;br /&gt;            list.stream().map(Object::toString);&lt;br /&gt;    // Return type of List&lt;br /&gt;    List&amp;lt;String&amp;gt; toList = map.toList();&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(expected, toList);&lt;br /&gt;    Assertions.assertEquals(&quot;1, 2, 3&quot;, toList.stream()&lt;br /&gt;            .collect(Collectors.joining(&quot;, &quot;)));&lt;br /&gt;}&lt;/pre&gt;&lt;h3&gt;The Utility of Utility&lt;/h3&gt;&lt;p&gt;Utility classes allow you to extend the behavior of types you have no direct control over. In the cases described above, Eclipse Collections has extended the possibilities for all Iterable types in Java. Java Stream is great, but does not work directly with Iterable. Stream also provides mostly lazy behavior.&lt;/p&gt;&lt;p&gt;The Iterate, ParallelIterate and ListIterate utility classes provide eager behaviors for Iterable and List. There can be a challenge when it comes to choosing return types when using utility classes (you get one choice), but ListIterate and LazyIterate show that it is possible to bridge abstract and anemic types like Iterable with rich and fluent types like MutableList and LazyIterable.&lt;/p&gt;&lt;p&gt;Iterate was the first class in Eclipse Collections to provide a rich eager/serial API initially to java.util.Collection, and later to java.lang.Iterable. It has survived a long time in the library, and still continues to provide useful behaviors.&lt;/p&gt;&lt;p&gt;Thank you for reading this blog! I hope you have found it interesting and informational!&lt;/p&gt;&lt;p&gt;&lt;em&gt;I am the creator of and committer for the &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; OSS project, which is managed at the &lt;/em&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/technology.collections&quot;&gt;&lt;em&gt;Eclipse Foundation&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. Eclipse Collections is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=bec78eeeb452&quot; width=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/javarevisited/iterate-over-any-iterable-in-java-bec78eeeb452&quot;&gt;Iterate over any Iterable in Java&lt;/a&gt; was originally published in &lt;a href=&quot;https://medium.com/javarevisited&quot;&gt;Javarevisited&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</description>
	<pubDate>Thu, 29 Jun 2023 07:24:19 +0000</pubDate>
</item>
<item>
	<title>Eclipse Ditto: Announcing Eclipse Ditto Release 3.3.0</title>
	<guid isPermaLink="true">https://www.eclipse.dev/ditto/2023-06-23-release-announcement-330.html</guid>
	<link>https://www.eclipse.dev/ditto/2023-06-23-release-announcement-330.html</link>
	<description>&lt;p&gt;The Eclipse Ditto teams is proud to announce the availability of Eclipse Ditto 
&lt;a href=&quot;https://projects.eclipse.org/projects/iot.ditto/releases/3.3.0&quot;&gt;3.3.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Version 3.3.0 contains features improving &lt;strong&gt;merge/PATCH&lt;/strong&gt; commands, &lt;strong&gt;skipping modifications&lt;/strong&gt; of a twin if the
value would be equal after the modification and a more production ready Ditto Helm chart.&lt;/p&gt;

&lt;h2 id=&quot;adoption&quot;&gt;Adoption&lt;/h2&gt;

&lt;p&gt;Companies are willing to show their adoption of Eclipse Ditto publicly: 
&lt;a href=&quot;https://iot.eclipse.org/adopters/#iot.ditto&quot;&gt;https://iot.eclipse.org/adopters/?#iot.ditto&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you use Eclipse Ditto it would be great to support the project by putting your logo there.&lt;/p&gt;

&lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

&lt;p&gt;The main improvements and additions of Ditto 3.3.0 are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Support &lt;strong&gt;replacing certain json objects&lt;/strong&gt; in a &lt;strong&gt;merge/PATCH command&lt;/strong&gt; instead of merging their fields&lt;/li&gt;
  &lt;li&gt;Implicitly &lt;strong&gt;convert a merge/PATCH command&lt;/strong&gt; to a &lt;strong&gt;“Create Thing”&lt;/strong&gt; if thing is &lt;strong&gt;not yet existing&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Provide option to &lt;strong&gt;skip a modification&lt;/strong&gt; in the “twin” &lt;strong&gt;if the value “is equal”&lt;/strong&gt; to the previous value&lt;/li&gt;
  &lt;li&gt;Addition of the &lt;strong&gt;DevOps API endpoints&lt;/strong&gt; to Ditto’s &lt;strong&gt;OpenAPI&lt;/strong&gt; definition&lt;/li&gt;
  &lt;li&gt;Improve DittoProtocol MessagePath to be aware of message subject&lt;/li&gt;
  &lt;li&gt;Support alternative way of specifying &lt;strong&gt;“list” query parameters&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;UI enhancements:
    &lt;ul&gt;
      &lt;li&gt;Enhance Ditto-UI to dynamically configure log levels of Ditto&lt;/li&gt;
      &lt;li&gt;Building and packaging the UI with esbuild&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following non-functional enhancements are also included:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Provide &lt;strong&gt;official Eclipse Ditto Helm chart&lt;/strong&gt; via &lt;strong&gt;Docker Hub&lt;/strong&gt; and move its sources to Ditto Git repository
    &lt;ul&gt;
      &lt;li&gt;In addition, provide a lot more configuration options and hardening of the chart to make it more feasible
for productive use&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following notable fixes are included:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fix that redeliveries for acknowledgeable connectivity messages were issued too often&lt;/li&gt;
  &lt;li&gt;Fix WoT dispatcher starvation by adding timeouts to fetch models&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please have a look at the &lt;a href=&quot;https://eclipse.dev/ditto/release_notes_330.html&quot;&gt;3.3.0 release notes&lt;/a&gt; for a more detailed information on the release.&lt;/p&gt;

&lt;h2 id=&quot;artifacts&quot;&gt;Artifacts&lt;/h2&gt;

&lt;p&gt;The new Java artifacts have been published at the &lt;a href=&quot;https://repo.eclipse.org/content/repositories/ditto/&quot;&gt;Eclipse Maven repository&lt;/a&gt;
as well as &lt;a href=&quot;https://repo1.maven.org/maven2/org/eclipse/ditto/&quot;&gt;Maven central&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Ditto JavaScript client release was published on &lt;a href=&quot;https://www.npmjs.com/~eclipse_ditto&quot;&gt;npmjs.com&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/@eclipse-ditto/ditto-javascript-client-dom&quot;&gt;@eclipse-ditto/ditto-javascript-client-dom&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/@eclipse-ditto/ditto-javascript-client-node&quot;&gt;@eclipse-ditto/ditto-javascript-client-node&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Docker images have been pushed to Docker Hub:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-policies/&quot;&gt;eclipse/ditto-policies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things/&quot;&gt;eclipse/ditto-things&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things-search/&quot;&gt;eclipse/ditto-things-search&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-gateway/&quot;&gt;eclipse/ditto-gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-connectivity/&quot;&gt;eclipse/ditto-connectivity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Ditto Helm chart has been published to Docker Hub:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto/&quot;&gt;eclipse/ditto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;Ditto&quot; class=&quot;docimage&quot; src=&quot;https://eclipse.dev/ditto/images/ditto.svg&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;–&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;</description>
	<pubDate>Fri, 23 Jun 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: CDT Cloud Blueprint: Coding</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2023/06/19/cdt-cloud-blueprint-coding/</guid>
	<link>https://eclipsesource.com/blogs/2023/06/19/cdt-cloud-blueprint-coding/</link>
	<description>&lt;p&gt;Are you looking for a modern, web-based IDE for C/C++ development? Do you want to build a custom, domain-specific C/C++ IDE or tool? Then read on. In this article, we will demonstrate the language...&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2023/06/19/cdt-cloud-blueprint-coding/&quot; rel=&quot;nofollow&quot;&gt; CDT Cloud Blueprint: Coding&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Webtools News: WTP 3.30 Released!</title>
	<guid isPermaLink="false">http://eclipse.dev/webtools/news.php#permalink204</guid>
	<link>https://eclipse.org/webtools/releases/3.30</link>
	<description>&lt;div&gt;
      The Eclipse Web Tools Platform 3.30 has been released!
      &lt;a href=&quot;https://wiki.eclipse.org/WTP_FAQ#How_do_I_install_WTP.3F&quot;&gt;Installation&lt;/a&gt;
      and updates can be performed using the Eclipse IDE 2023-06
      &lt;a href=&quot;https://download.eclipse.org/releases/2023-06/&quot;&gt;Update Site&lt;/a&gt;
      or through any of the related
      &lt;a href=&quot;https://marketplace.eclipse.org/user/nitind/listings&quot;&gt;Eclipse Marketplace&lt;/a&gt;
      .
      Release 3.30 is included in the 2023-06
      &lt;a href=&quot;https://www.eclipse.org/downloads/packages/release/2023-06/r/eclipse-ide-enterprise-java-and-web-developers&quot;&gt;
        Eclipse IDE for Enterprise Java and Web Developers
      &lt;/a&gt;
      , with selected portions also included in several
      &lt;a href=&quot;https://www.eclipse.org/downloads/compare.php&quot;&gt;other packages&lt;/a&gt;
      . Adopters can download
      &lt;a href=&quot;https://download.eclipse.org/webtools/downloads/drops/R3.30.0/R-3.30.0-20230603084739/&quot;&gt;the R3.30 p2 repository&lt;/a&gt;
      directly and combine it with the necessary dependencies.&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;http://eclipse.dev/webtools/news.php#permalink204&quot;&gt;More news&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 14 Jun 2023 18:59:00 +0000</pubDate>
</item>
<item>
	<title>Marc Nuri: Eclipse JKube 1.13 is now available!</title>
	<guid isPermaLink="true">https://blog.marcnuri.com/eclipse-jkube-1-13</guid>
	<link>https://blog.marcnuri.com/eclipse-jkube-1-13</link>
	<description>&lt;div&gt;&lt;a href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-13&quot;&gt;Original post&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;alert &quot;&gt;A newer version of Eclipse JKube is available, jump to &lt;a class=&quot;post-link &quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-14&quot; title=&quot;Eclipse JKube 1.14 is now available!&quot;&gt;Eclipse JKube 1.14 announcement&lt;/a&gt;.&lt;/div&gt;
&lt;p&gt;On behalf of the &lt;a class=&quot;post-link &quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-introduction-kubernetes-openshift#null&quot; title=&quot;Eclipse JKube introduction: Java tools and plugins for Kubernetes and OpenShift&quot;&gt;Eclipse JKube&lt;/a&gt;
team and everyone who has contributed, I'm happy to announce that Eclipse JKube &lt;code&gt;1.13.1&lt;/code&gt; has been
&lt;a href=&quot;https://github.com/eclipse/jkube/releases/tag/v1.13.1&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://github.com/eclipse/jkube/releases/tag/v1.13.1&quot;&gt;released&lt;/a&gt; and is now available from
&lt;a href=&quot;https://repo1.maven.org/maven2/org/eclipse/jkube/kubernetes-maven-plugin/1.13.1/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://repo1.maven.org/maven2/org/eclipse/jkube/kubernetes-maven-plugin/1.13.1/&quot;&gt;Maven Central&lt;/a&gt; ğŸ�‰.&lt;/p&gt;
&lt;p&gt;Thanks to all of you who have contributed with issue reports, pull requests, feedback, and spreading the word
with blogs, videos, comments, and so on.
We really appreciate your help, keep it up!&lt;/p&gt;
&lt;h2 class=&quot;heading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-13/#whats-new&quot;&gt;&lt;i class=&quot;anchor__link fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;span id=&quot;whats-new&quot;&gt;&lt;/span&gt;What's new?&lt;/h2&gt;
&lt;p&gt;Without further ado, let's have a look at the most significant updates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;post-link &quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-13#helm-chart-fragments&quot; title=&quot;Link to the Support for Helm Chart.yaml fragments section&quot;&gt;Support for Helm &lt;code&gt;Chart.yaml&lt;/code&gt; fragments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;post-link &quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-13#kubernetes-security-hardening&quot; title=&quot;Link to the Kubernetes resource Security Hardening profile section&quot;&gt;Kubernetes resource Security Hardening profile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ğŸ�› Many other bug-fixes and minor improvements&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;heading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-13/#helm-chart-fragments&quot;&gt;&lt;i class=&quot;anchor__link fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;span id=&quot;helm-chart-fragments&quot;&gt;&lt;/span&gt;Support for Helm Chart.yaml fragments&lt;/h3&gt;
&lt;p&gt;JKube now allows you to use fragments to configure the resulting generated Helm &lt;code&gt;Chart.yaml&lt;/code&gt; file.
Until now, it was only possible to customize this file by providing XML or DSL configuration.&lt;/p&gt;
&lt;p&gt;With this new enhancement, you can now place a &lt;code&gt;Chart.helm.yaml&lt;/code&gt; file in the &lt;code&gt;src/main/jkube&lt;/code&gt; directory of your project
and JKube will merge the contents of this file with the generated &lt;code&gt;Chart.yaml&lt;/code&gt; file.
For example, the following &lt;code&gt;Chart.helm.yaml&lt;/code&gt; file will set the description of the generated Helm chart:&lt;/p&gt;
&lt;div class=&quot;code&quot; style=&quot;background: #232323;&quot;&gt;&lt;pre style=&quot;display: block; padding: 0.5em; background: #232323; color: #e6e1dc;&quot;&gt;&lt;code class=&quot;language-yaml&quot; style=&quot;white-space: pre;&quot;&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;description:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;The&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;description&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;provided&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;through&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;a&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;fragment&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The generated &lt;code&gt;Chart.yaml&lt;/code&gt; file will look like this:&lt;/p&gt;
&lt;div class=&quot;code&quot; style=&quot;background: #232323;&quot;&gt;&lt;pre style=&quot;display: block; padding: 0.5em; background: #232323; color: #e6e1dc;&quot;&gt;&lt;code class=&quot;language-yaml&quot; style=&quot;white-space: pre;&quot;&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;apiVersion:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;v1&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;name:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;the-fragment-name&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #6d9cbe;&quot;&gt;description:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;The&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;description&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;provided&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;through&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;a&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;fragment&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #bc9458; font-style: italic;&quot;&gt;# ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 class=&quot;heading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-13/#kubernetes-security-hardening&quot;&gt;&lt;i class=&quot;anchor__link fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;span id=&quot;kubernetes-security-hardening&quot;&gt;&lt;/span&gt;Kubernetes resource Security Hardening profile&lt;/h3&gt;
&lt;p&gt;To improve the overall security of the generated Kubernetes resources, JKube now provides a new profile called &lt;code&gt;security-hardening&lt;/code&gt;.
The profile enforces a set of rules, the following list contains a few of them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Disables the auto-mounting of the service account token.&lt;/li&gt;
&lt;li&gt;Prevents containers from running in privileged mode.&lt;/li&gt;
&lt;li&gt;Ensures containers do not allow privilege escalation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find the complete list of rules in the &lt;a href=&quot;https://www.eclipse.org/jkube/docs/kubernetes-maven-plugin/#jkube-security-hardening&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to the Kubernetes Maven Plugin documentation&quot;&gt;Kubernetes-Maven-Plugin documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This profile is not enabled by default (opt-in). You can enable it through the plugin configuration:&lt;/p&gt;
&lt;div class=&quot;code&quot; style=&quot;background: #232323;&quot;&gt;&lt;pre style=&quot;display: block; padding: 0.5em; background: #232323; color: #e6e1dc;&quot;&gt;&lt;code class=&quot;language-xml&quot; style=&quot;white-space: pre;&quot;&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;plugin&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;groupId&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;org.eclipse.jkube&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;groupId&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;artifactId&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;kubernetes-maven-plugin&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;artifactId&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;configuration&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;profile&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;security-hardening&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;profile&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span style=&quot;color: #bc9458; font-style: italic;&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;configuration&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;plugin&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or through a Maven/Gradle property. For example, in a Maven project you can do this from the command line:&lt;/p&gt;
&lt;div class=&quot;code&quot; style=&quot;background: #232323;&quot;&gt;&lt;pre style=&quot;display: block; padding: 0.5em; background: #232323; color: #e6e1dc;&quot;&gt;&lt;code class=&quot;language-bash&quot; style=&quot;white-space: pre;&quot;&gt;&lt;span&gt;mvn k8s:resource -Djkube.profile=security-hardening&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 class=&quot;heading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-13/#using-this-release&quot;&gt;&lt;i class=&quot;anchor__link fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;span id=&quot;using-this-release&quot;&gt;&lt;/span&gt;Using this release&lt;/h2&gt;
&lt;p&gt;If your project is based on Maven, you just need to add the Kubernetes Maven plugin or the OpenShift Maven
plugin to your plugin dependencies:&lt;/p&gt;
&lt;div class=&quot;code&quot; style=&quot;background: #232323;&quot;&gt;&lt;pre style=&quot;display: block; padding: 0.5em; background: #232323; color: #e6e1dc;&quot;&gt;&lt;code class=&quot;language-xml&quot; style=&quot;white-space: pre;&quot;&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;plugin&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;groupId&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;org.eclipse.jkube&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;groupId&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;artifactId&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;kubernetes-maven-plugin&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;artifactId&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;version&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;1.13.1&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;version&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;plugin&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If your project is based on Gradle, you just need to add the Kubernetes Gradle plugin or the OpenShift Gradle
plugin to your plugin dependencies:&lt;/p&gt;
&lt;div class=&quot;code&quot; style=&quot;background: #232323;&quot;&gt;&lt;pre style=&quot;display: block; padding: 0.5em; background: #232323; color: #e6e1dc;&quot;&gt;&lt;code class=&quot;language-groovy&quot; style=&quot;white-space: pre;&quot;&gt;&lt;span&gt;plugins {
&lt;/span&gt;&lt;span&gt;  id &lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;'org.eclipse.jkube.kubernetes'&lt;/span&gt;&lt;span&gt; version &lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;'1.13.1'&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 class=&quot;heading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-13/#how-can-you-help&quot;&gt;&lt;i class=&quot;anchor__link fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;span id=&quot;how-can-you-help&quot;&gt;&lt;/span&gt;How can you help?&lt;/h2&gt;
&lt;p&gt;If you're interested in helping out and are a first-time contributor, check out the
&lt;a href=&quot;https://github.com/eclipse/jkube/labels/first-timers-only&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://github.com/eclipse/jkube/labels/first-timers-only&quot;&gt;&quot;first-timers-only&quot;&lt;/a&gt;
tag in the issue repository.
We've tagged extremely easy issues so that you can get started contributing to Open Source and the Eclipse organization.&lt;/p&gt;
&lt;p&gt;If you are a more experienced developer or have already contributed to JKube, check the
&lt;a href=&quot;https://github.com/eclipse/jkube/labels/help%20wanted&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://github.com/eclipse/jkube/labels/help%20wanted&quot;&gt;&quot;help wanted&quot;&lt;/a&gt; tag.&lt;/p&gt;
&lt;p&gt;We're also excited to read articles and posts mentioning our project and sharing the user experience.
Feedback is the only way to improve.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.eclipse.org/jkube&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://www.eclipse.org/jkube&quot;&gt;Project Page&lt;/a&gt; |
&lt;a href=&quot;https://github.com/eclipse/jkube&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://github.com/eclipse/jkube&quot;&gt;GitHub&lt;/a&gt; |
&lt;a href=&quot;https://github.com/eclipse/jkube/issues&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://github.com/eclipse/jkube/issues&quot;&gt;Issues&lt;/a&gt; |
&lt;a href=&quot;https://gitter.im/eclipse/jkube&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://gitter.im/eclipse/jkube&quot;&gt;Gitter&lt;/a&gt; |
&lt;a href=&quot;https://accounts.eclipse.org/mailing-list/jkube-dev&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://accounts.eclipse.org/mailing-list/jkube-dev&quot;&gt;Mailing list&lt;/a&gt; |
&lt;a href=&quot;https://stackoverflow.com/questions/tagged/jkube&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://stackoverflow.com/questions/tagged/jkube&quot;&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;span style=&quot;text-align: center;&quot;&gt;&lt;span class=&quot;post-image__pusher &quot;&gt;&lt;/span&gt;&lt;figure class=&quot;post-image &quot;&gt;&lt;span class=&quot;post-image__scrim&quot;&gt;&lt;/span&gt;&lt;a class=&quot;post-image__link&quot; href=&quot;https://blog.marcnuri.com/static/af6673438e09cd98812665335c800cbf/e5189/JKube-blog-banner.jpg&quot; title=&quot;The logo of Eclipse JKube&quot;&gt;&lt;span class=&quot;post-image__image-container&quot;&gt;&lt;div class=&quot;gatsby-image-wrapper gatsby-image-wrapper-constrained post-image__image &quot;&gt;&lt;source type=&quot;image/webp&quot; /&gt;&lt;img alt=&quot;The logo of Eclipse JKube&quot; src=&quot;https://blog.marcnuri.com/static/af6673438e09cd98812665335c800cbf/e5189/JKube-blog-banner.jpg&quot; /&gt;&lt;/div&gt;&lt;/span&gt;&lt;/a&gt;&lt;/figure&gt;&lt;/span&gt;</description>
	<pubDate>Wed, 14 Jun 2023 12:45:00 +0000</pubDate>
        <enclosure url="https://blog.marcnuri.com/static/af6673438e09cd98812665335c800cbf/e5189/JKube-blog-banner.jpg" length="0" type="image/jpg"/>
</item>
<item>
	<title>Jonas, Maximilian and Philip: The Eclipse Theia Community Release 2023-05</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2023/06/12/the-eclipse-theia-community-release-2023-05/</guid>
	<link>https://eclipsesource.com/blogs/2023/06/12/the-eclipse-theia-community-release-2023-05/</link>
	<description>&lt;p&gt;We are happy to announce the third Eclipse Theia community release “2023-05”, version 1.37.x!
Don’t know about Eclipse Theia, yet? It is the next-generation platform for building IDEs and tools for...&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2023/06/12/the-eclipse-theia-community-release-2023-05/&quot; rel=&quot;nofollow&quot;&gt; The Eclipse Theia Community Release 2023-05&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Mon, 12 Jun 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Lorenzo Bettini: Xtext, monorepo and Maven/Tycho</title>
	<guid isPermaLink="false">https://www.lorenzobettini.it/?p=2684</guid>
	<link>https://www.lorenzobettini.it/2023/06/xtext-monorepo-and-maven-tycho/</link>
	<description>TL; DR: Xtext sources are now in a single Git monorepo (https://github.com/eclipse/xtext), and the build infrastructure is based entirely on Maven/Tycho (Gradle is not used anymore). Background A few years ago, Xtext sources were split into 6 separate GitHub repositories. I did not take part in that decision (I guess at that time, I wasn’t […]</description>
	<pubDate>Fri, 09 Jun 2023 09:38:07 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: Eclipse Theia 1.38 Release: News and Noteworthy</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2023/06/05/eclipse-theia-1-38-release-news-and-noteworthy/</guid>
	<link>https://eclipsesource.com/blogs/2023/06/05/eclipse-theia-1-38-release-news-and-noteworthy/</link>
	<description>&lt;p&gt;We are happy to announce the Eclipse Theia 1.38 release! The release contains 48 merged pull requests and we welcome six new contributors. In this article we will highlight some selected improvements...&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2023/06/05/eclipse-theia-1-38-release-news-and-noteworthy/&quot; rel=&quot;nofollow&quot;&gt; Eclipse Theia 1.38 Release: News and Noteworthy&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Mon, 05 Jun 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: Blog-is-fear</title>
	<guid isPermaLink="false">https://medium.com/p/3f4e3fd4bb73</guid>
	<link>https://donraab.medium.com/blog-is-fear-3f4e3fd4bb73?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;The blogosphere is intimidating. Build confidence through practice.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/0*eAfvQMRRPVvHyoPf&quot; /&gt;&lt;figcaption&gt;Photo by &lt;a href=&quot;https://unsplash.com/@oddityandgrace?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;hannah grace&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote&gt;&lt;strong&gt;Note&lt;/strong&gt;: I originally shared this on LinkedIn as an adhoc New Years 2023 post. I thought it was an important enough message to share in its own blog.&lt;/blockquote&gt;&lt;h3&gt;You don’t have the time not to write&lt;/h3&gt;&lt;p&gt;Many folks have told me over the years they would like to blog but don’t have the time, or don’t know what to blog about. My usual response… Just do it.&lt;/p&gt;&lt;p&gt;No one has the time. Folks who seem to have the time are merely prioritizing their time differently.&lt;/p&gt;&lt;p&gt;Not knowing what to blog about is a confidence problem. Everyone has something to write about. No one wants to write something that isn’t high quality or isn’t well liked. There is a natural fear of public embarrassment. The first blog you write will not be great and probably will not be well liked. It will also probably not get many reads. Set your expectations low and get ready to practice. Find a friend or two to read your first blog before posting if you’re worried. If you’re worried about your employer, then read your social media policy and/or talk to your manager first. The confidence problem is feeding the perceived time problem because folks think that it will take a long time to find a topic, or a long time to write about something that is great, or to get approval if necessary from their employer. This is a cycle of despair. Break the cycle by doing something.&lt;/p&gt;&lt;p&gt;Compared to most developers, I write a lot. I published 34 blogs on Medium in 2022. I have always written a lot, just not publicly until five years ago. I wrote a lot of poetry in high school. Some of it was decent enough to get published. I submitted a lot of the poetry I wrote to my high school literary magazine. I was the top contributor for three years in a row. I was definitely not the best writer. I just submitted the most writing. The practice, and candid feedback I received helped me to become a better writer. I’ve published some of my high school poetry on my Medium blog. I’m terrified sharing poetry from my teenage years. That is why I share it. It’s good to do things that terrify you occasionally. I care about what people think. I also don’t care about what people think.&lt;/p&gt;&lt;p&gt;To say farewell to 2022, I wrote a final blog on December 30th. I did not really have the time to write this blog. I prioritized my time on the 31st to spend with family to celebrate New Years. By the time I was ready to publish, it was already 2am on the 31st. I published and went to sleep.&lt;/p&gt;&lt;p&gt;I wanted to write this blog to show how unstructured blogging can be. A blog doesn’t have to be Shakespearean or Dickensian to be good enough to share. The blog I wrote is about nothing in particular, but the topics have some common meandering relationships and a final destination… the end of a stream of consciousness. It is a babbling brook, and potpourri. Each topic could have been a blog on its own.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://donraab.medium.com/i-forgot-how-to-write-this-blog-33f9e86cc2ed&quot;&gt;I forgot how to write this blog&lt;/a&gt;&lt;/p&gt;&lt;p&gt;I forgot how to write this blog, but I wrote it anyway. Enjoy, and Happy New Year! If you made a resolution to blog in 2023, I hope I get to read some of your writing. Best of luck!&lt;/p&gt;&lt;p&gt;&lt;em&gt;I am the creator of and a Committer for the &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; OSS project which is managed at the &lt;/em&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/technology.collections&quot;&gt;&lt;em&gt;Eclipse Foundation&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. Eclipse Collections is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=3f4e3fd4bb73&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 24 May 2023 01:33:57 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: CDT Cloud Blueprint: Dynamic Toolbar</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2023/05/24/cdt-cloud-blueprint-dynamic-toolbar/</guid>
	<link>https://eclipsesource.com/blogs/2023/05/24/cdt-cloud-blueprint-dynamic-toolbar/</link>
	<description>&lt;p&gt;Are you looking for a modern, web-based IDE for C/C++ development? Do you want to build a custom, domain specific C/C++ IDE or tool? Then read on. In this article we´ll show how to use the dynamic...&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2023/05/24/cdt-cloud-blueprint-dynamic-toolbar/&quot; rel=&quot;nofollow&quot;&gt; CDT Cloud Blueprint: Dynamic Toolbar&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>John Kellerman: Eclipse Cloud DevTools Digest - March and April, 2023</title>
	<guid isPermaLink="false">7355 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/john-kellerman/eclipse-cloud-devtools-digest-march-and-april-2023</link>
	<description>&lt;span&gt;Eclipse Cloud DevTools Digest - March and April, 2023&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;h3&gt;March and April, 2023&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://blogs.eclipse.org/post/john-kellerman/emerging-open-vsx-working-group&quot;&gt;An Emerging Open VSX Working Group!&lt;/a&gt; - Based on discussions with various stakeholders, we have proposed a new working group specifically for the Open VSX Registry. Spoiler alert: it is starting and formal announcement soon.&lt;/p&gt;&lt;div class=&quot;align-center&quot;&gt;
  
  
  &lt;div class=&quot;field field--name-field-media-image field--type-image field--label-visually_hidden&quot;&gt;
    &lt;div class=&quot;field--label sr-only&quot;&gt;Image&lt;/div&gt;
              &lt;div class=&quot;field--item&quot;&gt;  &lt;img alt=&quot;open-vsx.org&quot; class=&quot;img-responsive&quot; height=&quot;289&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/styles/large/public/2023-05/Screenshot%202023-05-19%20at%2012.11.49%20PM.png?itok=iiBuwsOO&quot; width=&quot;480&quot; /&gt;&lt;/div&gt;
          &lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://blogs.eclipse.org/post/john-kellerman/rodrigo-pinto-eclipse-cloud-devtools-contributor-month&quot;&gt;Rodrigo Pinto: Eclipse Cloud DevTools Contributor of the Month!&lt;/a&gt; - The Eclipse Cloud DevTools contributor award for March goes to Rodrigo Pinto of &lt;a href=&quot;https://www.eclipse.org/membership/showMember.php?member_id=682&quot;&gt;Ericsson&lt;/a&gt; for his significant contributions to &lt;a href=&quot;https://github.com/eclipse-cdt-cloud/theia-trace-extension&quot;&gt;Trace Compass Cloud&lt;/a&gt; and the Eclipse Cloud DevTools Ecosystem.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://blogs.eclipse.org/post/john-kellerman/eclipse-cloud-devtools-contributor-award-eclipse-theia-community-release&quot;&gt;Eclipse Cloud DevTools Contributor Award: Eclipse Theia Community Release&lt;/a&gt; - The Eclipse Cloud DevTools contributor award for April goes to &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=800&quot;&gt;STMicroelectronics&lt;/a&gt; for initiating the Theia Community Release. The community release is a new, special type of release done every three months in addition to the monthly releases&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-12&quot;&gt;Eclipse JKube 1.12 is now available!&lt;/a&gt; - Enhancements include cron job controller generation, resource limits through XML/DSL, and concurrent remote development sessions&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2023/04/12/eclipse-theia-1-36-release-news-and-noteworthy/&quot;&gt;Eclipse Theia 1.36 Release: News and Noteworthy&lt;/a&gt; - Enhancements include a terminal view context menu, improved outline view expansion, improved options for debug sessions, and support for VS code extensions to 1.72.2.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2023/03/09/the-eclipse-theia-community-release-2023-02/&quot;&gt;The Eclipse Theia Community Release 2023-02&lt;/a&gt; - Included are detachable web and terminal views, improved VS Code extension API, and improvements to help adopters.&lt;/p&gt;&lt;h3&gt;Cloud Tool Time Webinars&lt;/h3&gt;&lt;p&gt;&lt;img alt=&quot;Cloud Tooltime Webinars&quot; src=&quot;https://lh5.googleusercontent.com/UKY-b4WND1Lgirn3T_B_CuBkGkaMW48WsOCGCJifOOx4lnLRdfVy7oLI-wV-X7P4Nx1USxWIF-ZDZBjIXeWKcFgBl86sq83hP09cVY6U5ed43HvQZj43tryThsjyjKWXwNXZQ78t9z0NO0tAQPWWV6I&quot; width=&quot;255.97222222222226&quot; /&gt;&lt;/p&gt;&lt;p&gt;We are now scheduling Cloud Tool Time webinars for 2023. Be sure to &lt;a href=&quot;https://forms.gle/K8ZuJ26YqoyMC9dD7&quot;&gt;Sign up&lt;/a&gt; now to get on the calendar and let us help tell your story. You can see past sessions on our &lt;a href=&quot;https://www.youtube.com/playlist?list=PLy7t4z5SYNaSBxx8gLh0i9LlN2bZW6H1L&quot;&gt;Youtube channel&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;Eclipse Cloud DevTools Projects&lt;/h3&gt;&lt;p&gt;&lt;img alt=&quot;Eclipse Cloud DevTools&quot; src=&quot;https://lh4.googleusercontent.com/NF_blJTT1qIp49qCS68YUefG-Q6tjbtdanHV3cngR609-XKN63n6yIYFdcIhrPseyCPqoff4Qyu2Gakb3KQ1UwP9nxwbr4k0HS9DOOnntAAvABwDDU_wKNTr6PTriImESgtrB8J3&quot; width=&quot;371&quot; /&gt;&lt;/p&gt;&lt;p&gt;Explore the &lt;a href=&quot;https://ecdtools.eclipse.org/projects/&quot;&gt;Eclipse Cloud DevTools ecosystem&lt;/a&gt;! Check out our projects page to find out more about open source innovation for cloud IDEs, extension marketplaces, frameworks and more.&lt;/p&gt;&lt;h3&gt;Getting Listed on the Cloud DevTools Blog&lt;/h3&gt;&lt;p&gt;If you are working with, or on, anything in the Cloud DevTools space, &lt;a href=&quot;https://blogs.eclipse.org/post/brian-king/getting-listed-cloud-devtools-blog&quot;&gt;learn how to get your writings posted&lt;/a&gt; in our &lt;a href=&quot;https://ecdtools.eclipse.org/resources/blogs/&quot;&gt;blog section&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
      
&lt;span&gt;&lt;span&gt;John Kellerman&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;Wed, 2023-05-17 14:52&lt;/span&gt;

  &lt;div class=&quot;field field--name-field-blog-tags field--type-entity-reference field--label-above&quot;&gt;
    &lt;div class=&quot;field--label&quot;&gt;Tags&lt;/div&gt;
          &lt;div class=&quot;field--items&quot;&gt;
              &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/ecdtools&quot; hreflang=&quot;en&quot;&gt;ECDTools&lt;/a&gt;&lt;/div&gt;
          &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/clouddevtools-0&quot; hreflang=&quot;en&quot;&gt;CloudDevTools&lt;/a&gt;&lt;/div&gt;
          &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/opensource-0&quot; hreflang=&quot;en&quot;&gt;OpenSource&lt;/a&gt;&lt;/div&gt;
              &lt;/div&gt;
      &lt;/div&gt;</description>
	<pubDate>Wed, 17 May 2023 18:52:34 +0000</pubDate>
</item>
<item>
	<title>John Kellerman: Eclipse Cloud DevTools Contributor Award: Yining Wang for Contributions to Open VSX</title>
	<guid isPermaLink="false">7354 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/john-kellerman/eclipse-cloud-devtools-contributor-award-yining-wang-contributions-open-vsx</link>
	<description>&lt;span&gt;Eclipse Cloud DevTools Contributor Award: Yining Wang for Contributions to Open VSX&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;p&gt;The Eclipse Cloud Developer Tools contributor award for this month goes to Yining Wang from &lt;a href=&quot;https://www.eclipse.org/membership/showMember.php?member_id=682&quot;&gt;Ericsson&lt;/a&gt; for her contributions to &lt;a href=&quot;https://github.com/eclipse/openvsx&quot;&gt;github.com/eclipse/openvsx&lt;/a&gt; and &lt;a href=&quot;https://github.com/EclipseFdn/open-vsx.org&quot;&gt;github.com/EclipseFdn/open-vsx.org&lt;/a&gt;, its deployment at &lt;a href=&quot;https://open-vsx.org/&quot;&gt;Open VSX Registry.&lt;/a&gt;&lt;/p&gt;&lt;div class=&quot;align-center&quot;&gt;
  
  
  &lt;div class=&quot;field field--name-field-media-image field--type-image field--label-visually_hidden&quot;&gt;
    &lt;div class=&quot;field--label sr-only&quot;&gt;Image&lt;/div&gt;
              &lt;div class=&quot;field--item&quot;&gt;  &lt;img alt=&quot;open-vsx.org&quot; class=&quot;img-responsive&quot; height=&quot;232&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/styles/large/public/2023-05/open-vsx_0.png?itok=hovEH9pW&quot; width=&quot;480&quot; /&gt;&lt;/div&gt;
          &lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;The Open VSX Registry at &lt;a href=&quot;https://open-vsx.org/&quot;&gt;open-vsx.org&lt;/a&gt; is a vendor-neutral open-source alternative to the &lt;a href=&quot;https://marketplace.visualstudio.com&quot;&gt;Visual Studio Marketplace&lt;/a&gt; for VS Code extensions. A public instance of the Registry is hosted by the Eclipse Foundation, but more instances can be freely deployed in public or private places. The primary purpose of this project is to provide a marketplace for VS Code extensions that can be used with &lt;a href=&quot;https://theia-ide.org&quot;&gt;Eclipse Theia&lt;/a&gt; and other IDEs. Another important goal is to allow self-hosting the Registry, e.g. within a company network. None of this is currently possible with the VS Marketplace, which is proprietary and may be accessed only from Visual Studio products. These projects are part of the Eclipse Cloud DevTool Working Group.&lt;/p&gt;&lt;p&gt;Yining has made a significant impact on the Open VSX project. She works with Ericsson on internal projects as well as directly on the Open VSX’s code base. With her open and supportive work, she already has helped out people around the globe, internal to Ericson and external, in both English and Mandarin. She has been laying the groundwork down for a more stable Open VSX by removing background noise tasks. In addition, as a result of her hard work and contributions, Yining has been nominated to get committer status.&lt;/p&gt;&lt;p&gt;Thanks to Yining for your contributions and congratulations for winning this award!&lt;/p&gt;&lt;p&gt;The &lt;a href=&quot;https://ecdtools.eclipse.org/&quot;&gt;Cloud DevTools Working Group&lt;/a&gt; provides a vendor-neutral ecosystem of open-source projects focused on defining, implementing and promoting best-in-class web and cloud-based development tools. It is hosted at the Eclipse Foundation, current members of the group include &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=848&quot;&gt;AMD&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=823&quot;&gt;Arm&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=690&quot;&gt;EclipseSource&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=682&quot;&gt;Ericsson&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=863&quot;&gt;Obeo&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=731&quot;&gt;RedHat&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=1069&quot;&gt;Renesas&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=800&quot;&gt;STMicroelectronics&lt;/a&gt; and &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=1194&quot;&gt;TypeFox&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;This Eclipse Cloud DevTools contributor award is sponsored by &lt;a href=&quot;https://eclipsesource.com/&quot;&gt;EclipseSource&lt;/a&gt;, providing &lt;a href=&quot;https://eclipsesource.com/services/tools/&quot;&gt;consulting and implementation services&lt;/a&gt; for &lt;a href=&quot;https://eclipsesource.com/web-and-cloud-based-tools/&quot;&gt;web-based tools&lt;/a&gt;, &lt;a href=&quot;https://eclipsesource.com/technology/eclipse-glsp/&quot;&gt;Eclipse GLSP&lt;/a&gt;,  &lt;a href=&quot;https://eclipsesource.com/technology/eclipse-theia/&quot;&gt;Eclipse Theia&lt;/a&gt;, and &lt;a href=&quot;https://eclipsesource.com/technology/vs-code/&quot;&gt;VS Code&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
      
&lt;span&gt;&lt;span&gt;John Kellerman&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;Wed, 2023-05-17 13:03&lt;/span&gt;

  &lt;div class=&quot;field field--name-field-blog-tags field--type-entity-reference field--label-above&quot;&gt;
    &lt;div class=&quot;field--label&quot;&gt;Tags&lt;/div&gt;
          &lt;div class=&quot;field--items&quot;&gt;
              &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/ecdtools&quot; hreflang=&quot;en&quot;&gt;ECDTools&lt;/a&gt;&lt;/div&gt;
          &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/clouddevtools-0&quot; hreflang=&quot;en&quot;&gt;CloudDevTools&lt;/a&gt;&lt;/div&gt;
          &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/theia&quot; hreflang=&quot;en&quot;&gt;Theia&lt;/a&gt;&lt;/div&gt;
          &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/theia-contributor-award&quot; hreflang=&quot;en&quot;&gt;Theia Contributor Award&lt;/a&gt;&lt;/div&gt;
              &lt;/div&gt;
      &lt;/div&gt;</description>
	<pubDate>Wed, 17 May 2023 17:03:25 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: CDT Cloud Blueprint: Getting started</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2023/05/16/cdt-cloud-blueprint-getting-started/</guid>
	<link>https://eclipsesource.com/blogs/2023/05/16/cdt-cloud-blueprint-getting-started/</link>
	<description>&lt;p&gt;Are you looking for a modern, web-based IDE for C/C++ development? Do you want to build a custom, domain specific C/C++ IDE or tool? Then read on. In this article, we&amp;amp;rsquo;ll show you how to get...&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2023/05/16/cdt-cloud-blueprint-getting-started/&quot; rel=&quot;nofollow&quot;&gt; CDT Cloud Blueprint: Getting started&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Tue, 16 May 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>N4JS: OpenAPI Generator supports N4JS</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-7569987920628430132.post-5760439443559530981</guid>
	<link>https://n4js.blogspot.com/2023/05/openapi-generator-supports-n4js.html</link>
	<description>&lt;p style=&quot;text-align: left;&quot;&gt;&lt;b&gt;We are happy to announce that the OpenAPI Generator (version &amp;gt;= 6.6.0) supports N4JS client generation. This enables N4JS users to generate n4jsd files from OpenAPI specifications.&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Our extension to the OpenAPI Generator supports the generation of client APIs and provides several command line options:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;For api and model files a target path can be specified. For api files a file prefix can be specified.&lt;/li&gt;&lt;li&gt;Api files can be generated including calls to check methods whether mandatory parameters are missing.&lt;/li&gt;&lt;li&gt;Additionally, generated api files can also contain checks whether the given objects might contain more fields than necessary. This could prevent sending superfluous data to the server.&lt;/li&gt;&lt;li&gt;A default implementation for the actual REST calls is part of the generated file set.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Detailed specifications of the N4JS OpenAPI Generator and its command line options can be found at the official &lt;a href=&quot;https://openapi-generator.tech/docs/generators/n4js&quot; target=&quot;_blank&quot;&gt;OpenAPI Generator website&lt;/a&gt;.  &lt;/p&gt;&lt;p style=&quot;text-align: right;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;by Marcus Mews&lt;/span&gt;&lt;/p&gt;</description>
	<pubDate>Mon, 15 May 2023 10:10:59 +0000</pubDate>
	<author>noreply@blogger.com (n4js dev)</author>
</item>
<item>
	<title>Jonas, Maximilian and Philip: Eclipse Theia 1.37 Release: News and Noteworthy</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2023/05/08/eclipse-theia-1-37-release-news-and-noteworthy/</guid>
	<link>https://eclipsesource.com/blogs/2023/05/08/eclipse-theia-1-37-release-news-and-noteworthy/</link>
	<description>&lt;p&gt;We are happy to announce the Eclipse Theia 1.37 release! The release contains 39 merged pull requests and we welcome one new contributor. In this article we will highlight some selected improvements...&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2023/05/08/eclipse-theia-1-37-release-news-and-noteworthy/&quot; rel=&quot;nofollow&quot;&gt; Eclipse Theia 1.37 Release: News and Noteworthy&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Mon, 08 May 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Manoj N Palat: Eclipse IDE – What the future Holds!</title>
	<guid isPermaLink="false">http://eclipseide100.wordpress.com/?p=9</guid>
	<link>https://eclipseide100.wordpress.com/2023/04/20/eclipse-ide-what-the-future-holds/</link>
	<description>&lt;p&gt;The Eclipse IDE Working Group Steering Committee recently discussed the&lt;a href=&quot;https://www.linkedin.com/posts/eclipse-foundation_eclipseide-eclipse-software-activity-7049022504144621568-hC5U?utm_source=share&amp;amp;utm_medium=member_desktop&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt; future of the Eclipse IDE&lt;/a&gt; — Many of you must have seen this&lt;a href=&quot;https://www.linkedin.com/posts/eclipse-foundation_eclipseide-eclipse-software-activity-7049022504144621568-hC5U?utm_source=share&amp;amp;utm_medium=member_desktop&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt; LinkedIn post&lt;/a&gt;. Stakeholders from different companies met in Frankfurt to discuss the way forward for the Eclipse IDE&lt;/p&gt;



&lt;figure class=&quot;wp-block-image&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://eclipseide100.files.wordpress.com/2023/04/caba2-0tn-rhz9xnq6xnrwj.png&quot; /&gt;&lt;figcaption class=&quot;wp-element-caption&quot;&gt;Eclipse IDE WG stakeholders at Yatta&lt;/figcaption&gt;&lt;/figure&gt;



&lt;p&gt;The stakeholders included a variety of roles — customers, partners, developers, founders, evangelists and more. This was not just a discussion,they came prepared with ideas on how the Eclipse IDE could evolve in the near and far future — and brainstormed how to get there.&lt;/p&gt;



&lt;figure class=&quot;wp-block-image&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://eclipseide100.files.wordpress.com/2023/04/98fae-0o4e1bunkh9nqwyfl.png&quot; /&gt;&lt;figcaption class=&quot;wp-element-caption&quot;&gt;Eclipse IDE Splash Screen 2023–06&lt;/figcaption&gt;&lt;/figure&gt;



&lt;p&gt;Aren’t you curious to find out what happened in that room? What did they discuss? What is the vision of the &lt;strong&gt;Eclipse IDE Working Group&lt;/strong&gt;?&lt;/p&gt;



&lt;p&gt;They are planning to let you in on all of it.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;On April 26th, 12:00 UTC — Come be a part of Eclipse!&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;Join Zoom Meeting&lt;br /&gt;&lt;a href=&quot;https://eclipse.zoom.us/j/82041269789?pwd=M1Jpaysrd1Y2R3RQOFZtTnk3bGtjUT09&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;https://eclipse.zoom.us/j/82041269789?pwd=M1Jpaysrd1Y2R3RQOFZtTnk3bGtjUT09&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Meeting ID: 820 4126 9789&lt;br /&gt;Passcode: 875753&lt;/p&gt;



&lt;p&gt;&lt;a href=&quot;https://medium.com/tag/eclipse-ide?source=post_page-----4d9686ecc688---------------eclipse_ide-----------------&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Thu, 20 Apr 2023 04:45:41 +0000</pubDate>
</item>
<item>
	<title>John Kellerman: Eclipse Cloud DevTools Contributor Award: Eclipse Theia Community Release</title>
	<guid isPermaLink="false">7337 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/john-kellerman/eclipse-cloud-devtools-contributor-award-eclipse-theia-community-release</link>
	<description>&lt;span&gt;Eclipse Cloud DevTools Contributor Award: Eclipse Theia Community Release&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;p&gt;The Eclipse Cloud DevTools contributor award for this month goes to &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=800&quot;&gt;STMicroelectronics&lt;/a&gt; for initiating the Theia Community Release. The community release is a new, special type of release done every three months in addition to the monthly releases.&lt;/p&gt;

&lt;p&gt;Selecting the right release cycle is crucial for software projects, including open source projects. The general trend is towards short release cycles, allowing fast deployment of innovations and fixes. Eclipse Theia takes this approach with a monthly release schedule by default. However, Theia is very often used as a platform for custom products. For many of these adopters, a monthly update of the base technology is often not the best fit. Furthermore, several other technologies provide integrations with Theia and are looking for a good point in time to ensure compatibility.&lt;/p&gt;

&lt;p class=&quot;rtecenter&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;center-block&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/users/user750/devops-g2ad9f65b2_1920.jpg&quot; style=&quot;width: 600px; height: 268px;&quot; /&gt;&lt;br /&gt;
Source: Pixabay&lt;/p&gt;

&lt;p&gt;To solve the balancing act between different release cycles, STMicroelectronics initiated the community release for the Eclipse Theia project. Community releases are published every three months and are derived from the monthly releases. Community releases have a longer consolidation period, allowing integrators to ensure compatibility with the new version.&lt;/p&gt;

&lt;p&gt;Theia has recently completed its second community release (2023-02), and the process was well received by adopters and contributors. Initiating the idea of a community release is a nice example for the openness of the Eclipse Theia ecosystem. Not only can contributors influence the technical direction of a project, the community can also influence and improve the underlying development processes and the project’s governance.&lt;/p&gt;

&lt;p&gt;Thanks to STMicroelectronics for this great initiative!&lt;/p&gt;

&lt;p&gt;The Cloud DevTools Working Group provides a vendor-neutral ecosystem of open-source projects focused on defining, implementing and promoting best-in-class web and cloud-based development tools. It is hosted at the Eclipse Foundation, current members of the group include &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=848&quot;&gt;AMD&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=823&quot;&gt;Arm&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=690&quot;&gt;EclipseSource&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=682&quot;&gt;Ericsson&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=863&quot;&gt;Obeo&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=731&quot;&gt;RedHat&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=1069&quot;&gt;Renesas&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=800&quot;&gt;STMicroelectronics&lt;/a&gt; and &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=1194&quot;&gt;TypeFox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This Eclipse Cloud DevTools contributor award is sponsored by &lt;a href=&quot;https://eclipsesource.com/&quot;&gt;EclipseSource&lt;/a&gt;, providing &lt;a href=&quot;https://eclipsesource.com/services/tools/&quot;&gt;consulting and implementation services&lt;/a&gt; for &lt;a href=&quot;https://eclipsesource.com/web-and-cloud-based-tools/&quot;&gt;web-based tools&lt;/a&gt;, &lt;a href=&quot;https://eclipsesource.com/technology/eclipse-glsp/&quot;&gt;Eclipse GLSP&lt;/a&gt;,  &lt;a href=&quot;https://eclipsesource.com/technology/eclipse-theia/&quot;&gt;Eclipse Theia&lt;/a&gt;, and &lt;a href=&quot;https://eclipsesource.com/technology/vs-code/&quot;&gt;VS Code&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
      
&lt;span&gt;&lt;span&gt;John Kellerman&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;Wed, 2023-04-12 10:31&lt;/span&gt;

  &lt;div class=&quot;field field--name-field-blog-tags field--type-entity-reference field--label-above&quot;&gt;
    &lt;div class=&quot;field--label&quot;&gt;Tags&lt;/div&gt;
          &lt;div class=&quot;field--items&quot;&gt;
              &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/ecdtools&quot; hreflang=&quot;en&quot;&gt;ECDTools&lt;/a&gt;&lt;/div&gt;
          &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/clouddevtools-0&quot; hreflang=&quot;en&quot;&gt;CloudDevTools&lt;/a&gt;&lt;/div&gt;
          &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/theia&quot; hreflang=&quot;en&quot;&gt;Theia&lt;/a&gt;&lt;/div&gt;
          &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/theia-contributor-award&quot; hreflang=&quot;en&quot;&gt;Theia Contributor Award&lt;/a&gt;&lt;/div&gt;
              &lt;/div&gt;
      &lt;/div&gt;</description>
	<pubDate>Wed, 12 Apr 2023 14:31:19 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: Eclipse Theia 1.36 Release: News and Noteworthy</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2023/04/12/eclipse-theia-1-36-release-news-and-noteworthy/</guid>
	<link>https://eclipsesource.com/blogs/2023/04/12/eclipse-theia-1-36-release-news-and-noteworthy/</link>
	<description>&lt;p&gt;We are happy to announce the Eclipse Theia 1.36 release! The release contains 50 merged pull requests and we welcome two new contributors. In this article, we will highlight some selected improvements...&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2023/04/12/eclipse-theia-1-36-release-news-and-noteworthy/&quot; rel=&quot;nofollow&quot;&gt; Eclipse Theia 1.36 Release: News and Noteworthy&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Wed, 12 Apr 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: Welcome to our new website!</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2023/04/11/welcome-to-our-new-website/</guid>
	<link>https://eclipsesource.com/blogs/2023/04/11/welcome-to-our-new-website/</link>
	<description>&lt;p&gt;We&amp;amp;rsquo;re excited to welcome you to the new EclipseSource website! We have rebuilt it from the ground up utilizing the latest trends in website technology. We are very happy with the result and hope...&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2023/04/11/welcome-to-our-new-website/&quot; rel=&quot;nofollow&quot;&gt; Welcome to our new website!&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Tue, 11 Apr 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Marc Nuri: Eclipse JKube 1.12 is now available!</title>
	<guid isPermaLink="true">https://blog.marcnuri.com/eclipse-jkube-1-12</guid>
	<link>https://blog.marcnuri.com/eclipse-jkube-1-12</link>
	<description>&lt;div&gt;&lt;a href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-12&quot;&gt;Original post&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;alert &quot;&gt;A newer version of Eclipse JKube is available, jump to &lt;a class=&quot;post-link &quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-14&quot; title=&quot;Eclipse JKube 1.14 is now available!&quot;&gt;Eclipse JKube 1.14 announcement&lt;/a&gt;.&lt;/div&gt;
&lt;p&gt;On behalf of the &lt;a class=&quot;post-link &quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-introduction-kubernetes-openshift#null&quot; title=&quot;Eclipse JKube introduction: Java tools and plugins for Kubernetes and OpenShift&quot;&gt;Eclipse JKube&lt;/a&gt;
team and everyone who has contributed, I'm happy to announce that Eclipse JKube &lt;code&gt;1.12.0&lt;/code&gt; has been
&lt;a href=&quot;https://github.com/eclipse/jkube/releases/tag/v1.12.0&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://github.com/eclipse/jkube/releases/tag/v1.12.0&quot;&gt;released&lt;/a&gt; and is now available from
&lt;a href=&quot;https://repo1.maven.org/maven2/org/eclipse/jkube/kubernetes-maven-plugin/1.12.0/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://repo1.maven.org/maven2/org/eclipse/jkube/kubernetes-maven-plugin/1.12.0/&quot;&gt;Maven Central&lt;/a&gt; ğŸ�‰.&lt;/p&gt;
&lt;p&gt;Thanks to all of you who have contributed with issue reports, pull requests, feedback, and spreading the word
with blogs, videos, comments, and so on.
We really appreciate your help, keep it up!&lt;/p&gt;
&lt;h2 class=&quot;heading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-12/#whats-new&quot;&gt;&lt;i class=&quot;anchor__link fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;span id=&quot;whats-new&quot;&gt;&lt;/span&gt;What's new?&lt;/h2&gt;
&lt;p&gt;Without further ado, let's have a look at the most significant updates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Support for &lt;code&gt;CronJob&lt;/code&gt; controller generation&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;post-link &quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-12#resource-limits-xml&quot; title=&quot;Link to the Setting resource limits through XML/DSL configuration section&quot;&gt;Setting resource limits through XML/DSL configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Concurrent Remote Dev sessions&lt;/li&gt;
&lt;li&gt;ğŸ�› Many other bug-fixes and minor improvements&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;heading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-12/#resource-limits-xml&quot;&gt;&lt;i class=&quot;anchor__link fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;span id=&quot;resource-limits-xml&quot;&gt;&lt;/span&gt;Setting resource limits through XML/DSL configuration&lt;/h3&gt;
&lt;p&gt;You can now set resource limits for your containers through XML/DSL configuration.
The following code snippet shows how you can leverage this new feature in your &lt;code&gt;pom.xml&lt;/code&gt; configuration:&lt;/p&gt;
&lt;div class=&quot;code&quot; style=&quot;background: #232323;&quot;&gt;&lt;pre style=&quot;display: block; padding: 0.5em; background: #232323; color: #e6e1dc;&quot;&gt;&lt;code class=&quot;language-xml&quot; style=&quot;white-space: pre;&quot;&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;plugin&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;groupId&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;org.eclipse.jkube&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;groupId&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;artifactId&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;kubernetes-maven-plugin&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;artifactId&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;configuration&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;resources&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;controller&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;containerResources&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;requests&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;cpu&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;1337m&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;cpu&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;memory&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;42Gi&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;memory&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;requests&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;limits&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;cpu&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;1337m&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;cpu&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;memory&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;42Gi&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;memory&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;          &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;limits&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;containerResources&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;controller&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;resources&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;configuration&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;plugin&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 class=&quot;heading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-12/#using-this-release&quot;&gt;&lt;i class=&quot;anchor__link fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;span id=&quot;using-this-release&quot;&gt;&lt;/span&gt;Using this release&lt;/h2&gt;
&lt;p&gt;If your project is based on Maven, you just need to add the Kubernetes Maven plugin or the OpenShift Maven
plugin to your plugin dependencies:&lt;/p&gt;
&lt;div class=&quot;code&quot; style=&quot;background: #232323;&quot;&gt;&lt;pre style=&quot;display: block; padding: 0.5em; background: #232323; color: #e6e1dc;&quot;&gt;&lt;code class=&quot;language-xml&quot; style=&quot;white-space: pre;&quot;&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;plugin&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;groupId&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;org.eclipse.jkube&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;groupId&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;artifactId&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;kubernetes-maven-plugin&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;artifactId&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;version&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;1.12.0&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;version&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;plugin&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If your project is based on Gradle, you just need to add the Kubernetes Gradle plugin or the OpenShift Gradle
plugin to your plugin dependencies:&lt;/p&gt;
&lt;div class=&quot;code&quot; style=&quot;background: #232323;&quot;&gt;&lt;pre style=&quot;display: block; padding: 0.5em; background: #232323; color: #e6e1dc;&quot;&gt;&lt;code class=&quot;language-groovy&quot; style=&quot;white-space: pre;&quot;&gt;&lt;span&gt;plugins {
&lt;/span&gt;&lt;span&gt;  id &lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;'org.eclipse.jkube.kubernetes'&lt;/span&gt;&lt;span&gt; version &lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;'1.12.0'&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 class=&quot;heading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-12/#how-can-you-help&quot;&gt;&lt;i class=&quot;anchor__link fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;span id=&quot;how-can-you-help&quot;&gt;&lt;/span&gt;How can you help?&lt;/h2&gt;
&lt;p&gt;If you're interested in helping out and are a first-time contributor, check out the
&lt;a href=&quot;https://github.com/eclipse/jkube/labels/first-timers-only&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://github.com/eclipse/jkube/labels/first-timers-only&quot;&gt;&quot;first-timers-only&quot;&lt;/a&gt;
tag in the issue repository.
We've tagged extremely easy issues so that you can get started contributing to Open Source and the Eclipse organization.&lt;/p&gt;
&lt;p&gt;If you are a more experienced developer or have already contributed to JKube, check the
&lt;a href=&quot;https://github.com/eclipse/jkube/labels/help%20wanted&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://github.com/eclipse/jkube/labels/help%20wanted&quot;&gt;&quot;help wanted&quot;&lt;/a&gt; tag.&lt;/p&gt;
&lt;p&gt;We're also excited to read articles and posts mentioning our project and sharing the user experience.
Feedback is the only way to improve.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.eclipse.org/jkube&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://www.eclipse.org/jkube&quot;&gt;Project Page&lt;/a&gt; |
&lt;a href=&quot;https://github.com/eclipse/jkube&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://github.com/eclipse/jkube&quot;&gt;GitHub&lt;/a&gt; |
&lt;a href=&quot;https://github.com/eclipse/jkube/issues&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://github.com/eclipse/jkube/issues&quot;&gt;Issues&lt;/a&gt; |
&lt;a href=&quot;https://gitter.im/eclipse/jkube&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://gitter.im/eclipse/jkube&quot;&gt;Gitter&lt;/a&gt; |
&lt;a href=&quot;https://accounts.eclipse.org/mailing-list/jkube-dev&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://accounts.eclipse.org/mailing-list/jkube-dev&quot;&gt;Mailing list&lt;/a&gt; |
&lt;a href=&quot;https://stackoverflow.com/questions/tagged/jkube&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://stackoverflow.com/questions/tagged/jkube&quot;&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;span style=&quot;text-align: center;&quot;&gt;&lt;span class=&quot;post-image__pusher &quot;&gt;&lt;/span&gt;&lt;figure class=&quot;post-image &quot;&gt;&lt;span class=&quot;post-image__scrim&quot;&gt;&lt;/span&gt;&lt;a class=&quot;post-image__link&quot; href=&quot;https://blog.marcnuri.com/static/af6673438e09cd98812665335c800cbf/e5189/JKube-blog-banner.jpg&quot; title=&quot;The logo of Eclipse JKube&quot;&gt;&lt;span class=&quot;post-image__image-container&quot;&gt;&lt;div class=&quot;gatsby-image-wrapper gatsby-image-wrapper-constrained post-image__image &quot;&gt;&lt;source type=&quot;image/webp&quot; /&gt;&lt;img alt=&quot;The logo of Eclipse JKube&quot; src=&quot;https://blog.marcnuri.com/static/af6673438e09cd98812665335c800cbf/e5189/JKube-blog-banner.jpg&quot; /&gt;&lt;/div&gt;&lt;/span&gt;&lt;/a&gt;&lt;/figure&gt;&lt;/span&gt;</description>
	<pubDate>Mon, 03 Apr 2023 15:45:00 +0000</pubDate>
        <enclosure url="https://blog.marcnuri.com/static/af6673438e09cd98812665335c800cbf/e5189/JKube-blog-banner.jpg" length="0" type="image/jpg"/>
</item>
<item>
	<title>John Kellerman: An Emerging Open VSX Working Group!</title>
	<guid isPermaLink="false">7331 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/john-kellerman/emerging-open-vsx-working-group</link>
	<description>&lt;span&gt;An Emerging Open VSX Working Group!&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;p&gt;A little over a month ago, I wrote a &lt;a href=&quot;https://blogs.eclipse.org/post/john-kellerman/help-us-sustain-open-vsxorg&quot;&gt;blog&lt;/a&gt; about the need for us in the Eclipse Community to establish a sustainable, long term funding and operational model for the Open VSX Registry at open-vsx.org. The current deployment hosts over 2,600 extensions from over 1,600 different publishers and is a critical, vendor-neutral resource for development environments consuming VSX extensions, including those based on &lt;a href=&quot;https://theia-ide.org/&quot;&gt;Eclipse Theia&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;center-block&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/users/user750/open-vsx_1.png&quot; style=&quot;width: 600px; height: 402px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Based on discussions with various stakeholders, we proposed a new working group specifically for the Open VSX Registry and began looking for interested organizations. I'm pleased to say that we have had a great deal of interest and are nearing critical mass to start the working group. As part of the &lt;a href=&quot;http://www.eclipse.org/org/workinggroups/process.php&quot;&gt;Eclipse Foundation Working Group Process&lt;/a&gt;, one of our first steps will be a meeting of interested organizations. We will be hosting a Zoom call, open to all, on Tuesday, April 4, at 11:00 AM EDT. If you would like to be added to the calendar entry, email us at &lt;a href=&quot;mailto:collaborations@eclipse-foundation.org?subject=Open%20VSX%20Call%20for%20Interested%20Organizations&amp;amp;body=Please%20add%20me%20to%20the%20call%20on%20Tuesday%2C%20April%204%2C%20at%2011%3A00%20AM%20EDT.&quot;&gt;collaborations@eclipse-foundation.org&lt;/a&gt;, or simply join using the following coordinates.&lt;/p&gt;

&lt;p&gt;Join Zoom Meeting&lt;br /&gt;
https://eclipse.zoom.us/j/83676771936?pwd=SElaa1J3eXB3UWxkTkZYNTU2eXR6QT09&lt;/p&gt;

&lt;p&gt;Meeting ID: 836 7677 1936&lt;br /&gt;
Passcode: 812536&lt;br /&gt;
One tap mobile&lt;br /&gt;
+13017158592,,83676771936#,,,,*812536# US&lt;br /&gt;
Find your local number: https://eclipse.zoom.us/u/keq9zOLgD4&lt;/p&gt;

&lt;p&gt;We’ll have a mailing list for the working group on line soon. This call will be recorded and posted to that mailing list, which will be our main communication venue for the working group.&lt;/p&gt;

&lt;p&gt;Thanks and we're looking forward to seeing you.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;/div&gt;
      
&lt;span&gt;&lt;span&gt;John Kellerman&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;Thu, 2023-03-30 12:26&lt;/span&gt;

  &lt;div class=&quot;field field--name-field-blog-tags field--type-entity-reference field--label-above&quot;&gt;
    &lt;div class=&quot;field--label&quot;&gt;Tags&lt;/div&gt;
          &lt;div class=&quot;field--items&quot;&gt;
              &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/ecdtools&quot; hreflang=&quot;en&quot;&gt;ECDTools&lt;/a&gt;&lt;/div&gt;
          &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/clouddevtools-0&quot; hreflang=&quot;en&quot;&gt;CloudDevTools&lt;/a&gt;&lt;/div&gt;
          &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/opensource-0&quot; hreflang=&quot;en&quot;&gt;OpenSource&lt;/a&gt;&lt;/div&gt;
              &lt;/div&gt;
      &lt;/div&gt;</description>
	<pubDate>Thu, 30 Mar 2023 16:26:37 +0000</pubDate>
</item>
<item>
	<title>Tanja Obradovic: The Jakarta EE 2023 Developer Survey is now open!</title>
	<guid isPermaLink="false">7332 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/tanja-obradovic/jakarta-ee-2023-developer-survey-now-open</link>
	<description>&lt;span&gt;The Jakarta EE 2023 Developer Survey is now open!&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;header&gt;&lt;p&gt;It is that time of the year: the &lt;strong&gt;&lt;a href=&quot;https://www.surveymonkey.com/r/6357RSW&quot;&gt;Jakarta EE 2023 Developer Survey&lt;/a&gt;&lt;/strong&gt; open for your input! The survey will stay open until May 25st.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
I would like to invite you to take this year six-minute survey, and have the chance to share your thoughts and ideas for future Jakarta EE releases, and help us discover uptake of the Jakarta EE latest versions and trends that inform industry decision-makers.&lt;br /&gt;&lt;br /&gt;
Please share the survey link and to reach out to your contacts: Java developers, architects and stakeholders on the enterprise Java ecosystem and invite them to participate in the 2023 Jakarta EE Developer Survey!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;/header&gt;&lt;p&gt;&lt;a href=&quot;https://www.surveymonkey.com/r/6357RSW&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;576&quot; src=&quot;https://www.agilejava.eu/wp-content/uploads/2023/03/2023-Jakarta-EE-Developer-Survey-1-1024x576.png&quot; width=&quot;1024&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
      
&lt;span&gt;&lt;span&gt;Tanja Obradovic&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;Wed, 2023-03-29 17:24&lt;/span&gt;</description>
	<pubDate>Wed, 29 Mar 2023 21:24:11 +0000</pubDate>
</item>
<item>
	<title>Wayne Beaton: Organising Your Eclipse Open Source Project Team</title>
	<guid isPermaLink="true">http://blog.waynebeaton.ca/posts/edp/organising-project-team/</guid>
	<link>http://blog.waynebeaton.ca/posts/edp/organising-project-team/</link>
	<description>Originally posted on January 27, 2020
The Eclipse Foundation Development Process (EDP) says nothing about how teams should organise.
The EDP defines a committer role: committers are those developers who have the ability to make decisions for the project (e.g., push commits to project Git repositories and configure build servers). We often say that the committers are the ones with the real power: theyâ€™re the ones that hold all of the keys to all of the project resources.</description>
	<pubDate>Tue, 21 Mar 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: Diagram Editors in Theia with Eclipse GLSP</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2023/03/16/diagram-editors-in-theia-with-eclipse-glsp/</guid>
	<link>https://eclipsesource.com/blogs/2023/03/16/diagram-editors-in-theia-with-eclipse-glsp/</link>
	<description>&lt;p&gt;Eclipse GLSP became the default solution for diagram editors for many web-based tool projects. Although GLSP can be used independently, Eclipse Theia is the reference target for GLSP. We recently gave...&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2023/03/16/diagram-editors-in-theia-with-eclipse-glsp/&quot; rel=&quot;nofollow&quot;&gt; Diagram Editors in Theia with Eclipse GLSP&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Thu, 16 Mar 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Webtools News: WTP 3.29 Released!</title>
	<guid isPermaLink="false">http://eclipse.dev/webtools/news.php#permalink203</guid>
	<link>https://eclipse.org/webtools/releases/3.29</link>
	<description>&lt;div&gt;
      The Eclipse Web Tools Platform 3.29 has been released!
      &lt;a href=&quot;https://wiki.eclipse.org/WTP_FAQ#How_do_I_install_WTP.3F&quot;&gt;Installation&lt;/a&gt;
      and updates can be performed using the Eclipse IDE 2023-03
      &lt;a href=&quot;http://download.eclipse.org/releases/2023-03/&quot;&gt;Update Site&lt;/a&gt;
      or through any of the related
      &lt;a href=&quot;https://marketplace.eclipse.org/user/nitind/listings&quot;&gt;Eclipse Marketplace&lt;/a&gt;
      .
      Release 3.29 is included in the 2023-03
      &lt;a href=&quot;https://www.eclipse.org/downloads/packages/release/2023-03/r/eclipse-ide-enterprise-java-and-web-developers&quot;&gt;
        Eclipse IDE for Enterprise Java and Web Developers
      &lt;/a&gt;
      , with selected portions also included in several
      &lt;a href=&quot;https://www.eclipse.org/downloads/compare.php&quot;&gt;other packages&lt;/a&gt;
      . Adopters can download
      &lt;a href=&quot;https://download.eclipse.org/webtools/downloads/drops/R3.29.0/R-3.29.0-20230303230236/repository/&quot;&gt;the R3.29 p2 repository&lt;/a&gt;
      directly and combine it with the necessary dependencies.&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;http://eclipse.dev/webtools/news.php#permalink203&quot;&gt;More news&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 15 Mar 2023 22:59:00 +0000</pubDate>
</item>
<item>
	<title>Mikael Barbero: New SLSA++ Survey Reveals Real-World Developer Approaches to Software Supply Chain Security</title>
	<guid isPermaLink="true">https://mikael.barbero.tech/blog/post/2023-03-15-slsa-pp-survey/</guid>
	<link>https://mikael.barbero.tech/blog/post/2023-03-15-slsa-pp-survey/</link>
	<description>&lt;p&gt;Answering even basic questions about software supply chain security has been surprisingly hard. For instance, how widespread are the different practices associated with software supply chain security? And do software professionals view these practices as useful or not? Easy or hard? To help answer these and related questions, Chainguard, the &lt;a href=&quot;https://www.eclipse.org/org/foundation/&quot;&gt;Eclipse Foundation&lt;/a&gt;, the &lt;a href=&quot;https://foundation.rust-lang.org/&quot;&gt;Rust Foundation&lt;/a&gt;, and the &lt;a href=&quot;https://openssf.org/&quot;&gt;Open Source Security Foundation&lt;/a&gt; (OpenSSF) partnered to field a &lt;a href=&quot;https://outreach.eclipse.foundation/slsa-supply-chain-security-survey&quot;&gt;software supply chain security survey&lt;/a&gt;. The questions were primarily, but not exclusively, derived from the security requirements associated with the &lt;a href=&quot;https://slsa.dev/&quot;&gt;Supply-chain Levels for Software Artifacts&lt;/a&gt; (SLSA) supply chain integrity framework version 0.1 (the version when the survey was conducted), hence SLSA++.&lt;/p&gt;
&lt;p&gt;In light of the recent &lt;a href=&quot;https://www.whitehouse.gov/briefing-room/statements-releases/2023/03/02/fact-sheet-biden-harris-administration-announces-national-cybersecurity-strategy/&quot;&gt;White House National Cybersecurity Strategy&lt;/a&gt;, which emphasizes organizations use best practices and frameworks for secure software development, it’s important to understand how individual contributors responsible for this work–like developers, open source maintainers and security practitioners–are adopting software supply chain security practices and guidelines. The new SLSA++ survey provides insights into these trends, what’s working and what’s not working.&lt;/p&gt;
&lt;p&gt;The survey, conducted in the summer and fall of 2022, includes data from nearly 170 respondents at a wide range of organizations, large and small, some security-focused in their role and others not. All respondents answered a series of questions for ten different software supply chain security practices. Three key findings stand out:&lt;/p&gt;
&lt;h2 id=&quot;some-software-supply-chain-security-practices-are-already-widely-adopted&quot;&gt;Some software supply chain security practices are already widely adopted.&lt;/h2&gt;
&lt;p&gt;Many practices already have strong or moderate adoption. For instance, over half of the respondents report always using a centralized build service. Other practices, such as digital signatures, were practiced less often: only 25% of respondents reported that their team always signs built artifacts. These findings are consistent with &lt;a href=&quot;https://cloud.google.com/blog/products/devops-sre/dora-2022-accelerate-state-of-devops-report-now-out&quot;&gt;Google’s 2022 State of DevOps report&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;figure&gt;
&lt;img alt=&quot;Prevalence of Selected Software Supply Chain Security Practices&quot; src=&quot;https://mikael.barbero.tech/blog/post/2023-03-15-slsa-pp-survey/slsapp.jpg&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;most-practices-are-considered-helpful-though-there-is-surprisingly-little-variation-in-the-perceived-level-of-helpfulness&quot;&gt;Most practices are considered helpful though there is surprisingly little variation in the perceived level of helpfulness.&lt;/h2&gt;
&lt;p&gt;For each software supply chain security practice in the survey, at least 50% of the respondents labeled the practice as either extremely helpful or very helpful. Surprisingly though, the perceived helpfulness varies only slightly from practice to practice among the practices surveyed. Finally, the extent to which a participant views a particular practice as helpful is positively correlated with the likelihood that the participant’s organization adopts that practice. Whether these practices are viewed as helpful and then used or whether used practices are used and then viewed as helpful can’t be determined from the survey data.&lt;/p&gt;
&lt;h2 id=&quot;some-slsa-practices-are-considered-substantially-more-difficult-than-others&quot;&gt;Some SLSA practices are considered substantially more difficult than others.&lt;/h2&gt;
&lt;p&gt;Hermetic builds and reproducible builds were considered much more difficult than the other practices. Over 50% of respondents stated that those practices were either extremely difficult or very difficult. Other practices, such as scanning container images, were considered relatively easy. Additionally, the perceived difficulty of these practices had no statistically significant relationship with adoption.&lt;/p&gt;
&lt;p&gt;In summary, the survey results suggest that software supply chain security practices are not an unattainable ideal. Some software supply chain security practices already enjoy widespread adoption. Also importantly, because perceived usefulness, not difficulty, appears to currently explain trends in adoption of these practices, parties interested in promoting these practices should consider explaining the benefits of these different practices rather than simply focusing on better tools.&lt;/p&gt;
&lt;p&gt;A report detailing the survey, including its methodology, can be found &lt;a href=&quot;https://outreach.eclipse.foundation/slsa-supply-chain-security-survey&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If interested in learning more about the findings and how organizations can implement the SLSA framework join Chainguard, OpenSSF, Rust Foundation and Eclipse Foundation for a virtual discussion on March 22, 2023 from 11-12 PM ET / 8-9 AM PT. Sign up for a calendar reminder &lt;a href=&quot;https://www.crowdcast.io/c/slsa-practice&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Authors: David A. Wheeler, The Linux Foundation; John Speed Meyers, Chainguard; Mikaël Barbero, Eclipse Foundation; and Rebecca Rumbul, Rust Foundation&lt;/strong&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 15 Mar 2023 12:00:00 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: JBoss Tools for Eclipse 2023-03M3</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/4.27.0.am1.html</guid>
	<link>https://tools.jboss.org/blog/4.27.0.am1.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Happy to announce 4.27.0.AM1 (Developer Milestone 1) build for Eclipse 2023-03M3.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Downloads available at &lt;a href=&quot;https://tools.jboss.org/downloads/jbosstools/2023-03/4.27.0.AM1.html&quot;&gt;JBoss Tools 4.27.0 AM1&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#what-is-new&quot;&gt;&lt;/a&gt;What is New?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Full info is at &lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.27.0.AM1.html&quot;&gt;this page&lt;/a&gt;. Some highlights are below.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;general&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#general&quot;&gt;&lt;/a&gt;General&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;components-depreciation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#components-depreciation&quot;&gt;&lt;/a&gt;Components Depreciation&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As previously announced &lt;a href=&quot;https://issues.redhat.com/browse/JBIDE-28678&quot;&gt;here&lt;/a&gt;, we’re in the process to remove the Central / update tab from JBossTools in next release. This work can be followed &lt;a href=&quot;https://issues.redhat.com/browse/JBIDE-28852&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;That means that all the current extra features that can be installed via this tab needs to be available through a new channel. This channel already exists as p2 repo, but using &lt;a href=&quot;https://www.eclipse.org/mpc/&quot;&gt;Eclipse Marketplace Client&lt;/a&gt; is more close to what’s existing right now.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Most of those additional features are already present in the &lt;a href=&quot;https://marketplace.eclipse.org/content/jboss-tools&quot;&gt;Jboss marketplace entry&lt;/a&gt;, so it’s just a matter of use it to install your favorite feature.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;openshift&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#openshift&quot;&gt;&lt;/a&gt;OpenShift&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;openshift-application-explorer-view-service-creation-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#openshift-application-explorer-view-service-creation-support&quot;&gt;&lt;/a&gt;OpenShift Application Explorer view service creation support&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The missing create service feature that was available with odo 2.X is now back in this release.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.21.0.AM1.html#operator-based-services&quot;&gt;See the previous annoucement&lt;/a&gt; on this feature&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;openshift-application-explorer-view-service-binding-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#openshift-application-explorer-view-service-binding-support&quot;&gt;&lt;/a&gt;OpenShift Application Explorer view service binding support&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Once you have created a service, you can link it to a component using a binding.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;link service&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/link-service.gif&quot; width=&quot;80%&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;hibernate-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#hibernate-tools&quot;&gt;&lt;/a&gt;Hibernate Tools&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;runtime-provider-updates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#runtime-provider-updates&quot;&gt;&lt;/a&gt;Runtime Provider Updates&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A new Hibernate 6.2 runtime provider incorporates Hibernate Core version 6.2.0.CR2, Hibernate Ant version 6.2.0.CR2 and Hibernate Tools version 6.2.0.CR2.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Hibernate 6.1 runtime provider now incorporates Hibernate Core version 6.1.7.Final, Hibernate Ant version 6.1.7.Final and Hibernate Tools version 6.1.7.Final.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Hibernate 5.6 runtime provider now incorporates Hibernate Core version 5.6.15.Final and Hibernate Tools version 5.6.15.Final.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;and-more&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#and-more&quot;&gt;&lt;/a&gt;And more…​&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can find more noteworthy updates in on &lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.27.0.AM1.html&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enjoy!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Stéphane Bouchet&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Sat, 11 Mar 2023 12:06:25 +0000</pubDate>
</item>
<item>
	<title>Mike Milinkovich: Product Liability Directive: More Bad News for Open Source</title>
	<guid isPermaLink="false">http://eclipse-foundation.blog/?p=1732</guid>
	<link>https://eclipse-foundation.blog/2023/03/10/product-liability-directive-more-bad-news-for-open-source/</link>
	<description>&lt;p&gt;In my previous two &lt;a href=&quot;https://eclipse-foundation.blog/2023/02/23/cyber-resilience-act-good-intentions-and-unintended-consequences/&quot;&gt;blog posts&lt;/a&gt; I discussed concerns with the European Cyber Resilience Act (“CRA”) which we believe will harm both the open source community and the innovation economy in Europe. But the CRA needs to be understood as part of a larger legislative framework. In this post we will examine the potential impact of the proposed changes to the European &lt;a href=&quot;https://ec.europa.eu/transparency/documents-register/detail?ref=COM(2022)495&amp;amp;lang=en&quot;&gt;Product Liability Directive&lt;/a&gt; (“PLD”) on the open source community and ecosystem. &lt;/p&gt;



&lt;p&gt;As in previous discussions I think it is important to note that the intentions of the PLD are good. No one can argue that the time has come to protect consumers from poor software. But at the same time, it is important to ensure that the consumer liability obligations are borne by the economic actors who deliver products and services to consumers, and not by the open source community which enables so much benefit to society by providing free software but does not share in the profits of the delivery. &lt;/p&gt;



&lt;p&gt;As I understand it, the purpose of the CRA is to establish which parties are &lt;em&gt;responsible &lt;/em&gt;for ensuring the quality of software products, particularly as it relates to cybersecurity. The purpose of the PLD is to establish which parties are &lt;em&gt;liable&lt;/em&gt; for defects which cause harm to individuals or their property. So strictly speaking, my assertion in my previous blog posts that the CRA will break the limited liability obligations that underpins free software was incorrect. It is the PLD which is doing that. &lt;/p&gt;



&lt;p&gt;The European Commission presented a draft of the revisions to the PLD last September, and it is going through the process of being adopted by the European Parliament and the Council of the European Union. As a Directive, the PLD will be interpreted by each member state of the European Union and applied to updates of the local laws in each country. The specific intent of these revisions are to update the PLD of 1985 to address issues related to the modern digital economy. One of the key features of the PLD is its “no fault liability” model where injured parties can seek redress without demonstrating any error or fault on the part of the product manufacturer. The proposed revision explicitly expands the scope of no fault liability to cover software and artificial intelligence, and adds “loss or corruption of data” as a harm that could be suffered by a consumer. &lt;/p&gt;



&lt;p&gt;There are numerous legal summaries of the PLD available, but &lt;a href=&quot;https://insightplus.bakermckenzie.com/bm/consumer-goods-retail_1/eu-modernised-product-liability-directive-proposal-finally-arrives&quot;&gt;this one&lt;/a&gt; from the law firm Baker Mackenzie provides a nice overview, as does &lt;a href=&quot;https://products.cooley.com/2022/10/06/radical-reform-of-eu-product-liability-laws-long-awaited-proposals-published/&quot;&gt;this one&lt;/a&gt; from the law firm Cooley. &lt;/p&gt;



&lt;p&gt;It has long been understood that product liability could not be completely waived by open source licenses in Europe. Hence, the “…to the extent permissible by law…” statements you see in many licenses. Since at least 1985, there have been strict provisions in Europe that you were always liable for harm caused to natural persons or their personal property as a result of using a defective product. From the perspective of an open source developer, the PLD extends and modernizes this legal framework in the following important ways:&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;It explicitly extends the definition of product to include software and artificial intelligence;&lt;/li&gt;



&lt;li&gt;It explicitly extends the definition of harm to include loss or corruption of data;&lt;/li&gt;



&lt;li&gt;The definition of manufacturer (formerly producer) has been extended to cover developers, providers of software, providers of digital services, and online marketplaces;&lt;/li&gt;



&lt;li&gt;It makes it clear that a cybersecurity vulnerability is a product defect, and that failure to update a product to protect against a vulnerability may result in liability;&lt;/li&gt;



&lt;li&gt;It makes it clear that if a component is defective, liability may extend to the manufacturer of the component (e.g. the developer of the open source software), in addition to the manufacturer of the end product;&lt;/li&gt;



&lt;li&gt;Distribution of a product or component in Europe explicitly incurs liability obligations on the part of the distributor, unless they can identify a responsible economic actor in Europe; and&lt;/li&gt;



&lt;li&gt;There is an attempt to exclude open source from the provisions of the Directive, but as &lt;a href=&quot;https://eclipse-foundation.blog/2023/01/15/european-cyber-resiliency-act-potential-impact-on-the-eclipse-foundation/&quot;&gt;previously discussed&lt;/a&gt; the “…outside the course of a commercial activity…” language means that the exclusion is not helpful in practice. &lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Article 7 of the PLD goes to great lengths to identify the economic operators who can be held liable for a defective product, with a particular emphasis on identifying an entity in Europe who can bear the responsibility for a defective product made available in the single market. If you parse Article 7, who get something like the following to determine the party in Europe liable for a defective product:&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;If the manufacturer is European, then the manufacturer is liable.&lt;/li&gt;



&lt;li&gt;Otherwise, if the importer or manufacturer’s authorized representative are European, then the importer and/or manufacturer’s authorized representative are liable.&lt;/li&gt;



&lt;li&gt;If none of the above conditions apply, each distributor is liable (each distributor is given 1 month to identify one of the above economic operators to hold the bag)&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Note that the manufacturer of a defective component also becomes liable.&lt;/p&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;Should Open Source Developers be Worried?&lt;/h3&gt;



&lt;p&gt;I think they should. Particularly if they are located in Europe. &lt;/p&gt;



&lt;p&gt;Huge caveat here. I’ve been studying the PLD for a couple of weeks now, and every time I read it I think of more corner cases and more scenarios. If anyone finds fault in my analysis or logic, do please let me know!&lt;/p&gt;



&lt;h4 class=&quot;wp-block-heading&quot;&gt;Scenario One&lt;/h4&gt;



&lt;p&gt;Imagine a scenario where a year ago or so a consumer in Europe lost data as a result of using the Wizbang product from BigCo GmbH. The vulnerability in Wizbang was caused by the famous Log4shell bug. As part of its normal build process, BigCo downloaded the Apache Log4j jar file from Maven Central. Under the PLD framework, the Apache Software Foundation  (“ASF”) is the manufacturer of the Apache Log4j jar file and Sonatype (the company controlling Maven Central) is the distributor of the Log4j component as they made the Log4j software available to the European market. (The relevant definition reads “…‘making available on the market’ means any supply of a product for distribution, consumption or use on the Union market in the course of a commercial activity, whether in return for payment or free of charge”). Both the ASF and Sonatype are US based organizations.&lt;/p&gt;



&lt;p&gt;Under the PLD, BigCo, the ASF, and Sonatype are all ‘economic operators’ involved in the development of the Wizbang defective product. As mentioned above, Article 7 of the PLD lays out the liability obligations for each of the various types of economic operators. &lt;/p&gt;



&lt;p&gt;My read of the PLD is that as the European manufacturer of Wizbang and the importer of the Log4j component, BigCo GmbH would be liable to consumers of the defective product. I &lt;strong&gt;think&lt;/strong&gt; the ASF would not be held liable for the defect in Log4j because it does not meet the definition of an economic operator in Europe. I.e. the ASF has no legal presence in Europe. Similarly, Maven Central is a distributor in this context, but the algorithm in Article 7 puts the importer ahead of the distributor in the queue for liability obligations. &lt;/p&gt;



&lt;h4 class=&quot;wp-block-heading&quot;&gt;Scenario Two&lt;/h4&gt;



&lt;p&gt;Same as above, but instead the defective open source component is (say) the Eclipse Modeling Framework (EMF), so the component manufacturer is the Eclipse Foundation AISBL, a European-based open source foundation. &lt;/p&gt;



&lt;p&gt;My read of the PLD is that as the European manufacturers of the Wizbang product and the EMF component, BigCo GmbH and the Eclipse Foundation would both be jointly and severally liable to consumers of the defective product. If I am correct, this scenario puts European open source projects, communities, and foundations at a disadvantage relative to their international peers. &lt;/p&gt;



&lt;h4 class=&quot;wp-block-heading&quot;&gt;Summary&lt;/h4&gt;



&lt;p&gt;The good news is that I can’t think of a scenario where Maven Central, or services like it, become liable as a distributor under the PLD. The components they distribute would be used by a manufacturer and there are several layers of economic operators in front of a component distributor before liability results. The same seems to be true for open source foundations based outside of Europe. &lt;/p&gt;



&lt;p&gt;The bad news is that it does appear that the PLD as currently worded would expose European-based open source projects to product liability. I have to assume that this was an unintended consequence.&lt;/p&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;Proposed Enhancements&lt;/h3&gt;



&lt;p&gt;I hypothesize that when some people think of open source software components and the open source supply chain, they think of something like a braking system module that is assembled into a passenger car. After all, terminology like “component” and “supply chain” lends itself perfectly to that interpretation. I believe that a closer analogy would be inputs to a chemical process. Don’t think of a “braking component”, think acetate or sulphuric acid. I think this analogy is correct because beyond the sheer malleability of software, it is important to recall that open source software is by definition not restricted to any field of use. Every piece of open source software can (and is) used for any purpose that anyone can find for it. To give just one example, the Eclipse IDE platform was designed to implement desktop developer tools. But over the years it has ended up being used in scientific instruments on the International Space Station, to control medical imaging devices, mission planning for the Mars Rover, operations control of major railway networks, and ground station control software for space satellites. The adopters of open source have rich imaginations indeed.&lt;/p&gt;



&lt;p&gt;The point of the above is that it is essential that open source software be excluded from the strict, no-fault liability obligations of the PLD. Not because open source developers are entitled to special treatment, but because the liability truly rests with the organization that placed the open source software into a product, and placed that product into the hands of a consumer. It is the act of using open source software that makes it critical, not the act of publishing or distributing it. &lt;/p&gt;



&lt;p&gt;To that end, I feel that the correct enhancement is to strengthen the exclusion of open source in the PLD to make it much clearer than it currently is.&lt;/p&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;The Gory Details&lt;/h3&gt;



&lt;p&gt;For those who want to look into the language of the PLD, here are what I noticed as the relevant sections and what they mean. (Emphasis added by me in a few places.)&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;(12) Products in the digital age can be tangible or intangible. Software, such as operating systems, firmware, computer programs, applications or AI systems, is increasingly common on the market and plays an increasingly important role for product safety. Software is capable of being placed on the market as a standalone product and may subsequently be integrated into other products as a component, and is capable of causing damage through its execution. In the interest of legal certainty it should therefore be clarified that software is a product for the purposes of applying no-fault liability, irrespective of the mode of its supply or usage, and therefore irrespective of whether the software is stored on a device or accessed through cloud technologies. The source code of software, however, is not to be considered as a product for the purposes of this Directive as this is pure information. &lt;strong&gt;The developer or producer of software, &lt;/strong&gt;including AI system providers within the meaning of [Regulation (EU) …/… (AI Act)],&lt;strong&gt; should be treated as a manufacturer.&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;So Recital 12 makes it clear that software is a product under the PLD and that the developer is the manufacturer. &lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;(13) In order not to hamper innovation or research, &lt;strong&gt;this Directive should not apply to free and open-source software developed or supplied outside the course of a commercial activity.&lt;/strong&gt; This is in particular the case for software, including its source code and modified versions, that is openly shared and freely accessible, usable, modifiable and redistributable. However where software is supplied in exchange for a price or personal data is used other than exclusively for improving the security, compatibility or interoperability of the software, and is therefore supplied in the course of a commercial activity, the Directive should apply.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Recital 13 provides a carve out for open source. However, it retains the same fatal flaw as the CRA in that the carve out applies only to “software developed or supplied outside the course of a commercial activity”, which is woefully misplaced if it is intended to provide any protection of the open source ecosystem from the scope of this legislation. To see why, please see Maarten Aertsen’s &lt;a href=&quot;https://blog.nlnetlabs.nl/open-source-software-vs-the-cyber-resilience-act/&quot;&gt;blog post&lt;/a&gt;. &lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;(23) In order to reflect the increasing prevalence of inter-connected products, the assessment of a product’s safety should also take into account the effects of other products on the product in question. The effect on a product’s safety of its ability to learn after deployment should also be taken into account, to reflect the legitimate expectation that a product’s software and underlying algorithms are designed in such a way as to prevent hazardous product behaviour. In order to reflect that in the digital age many products remain within the manufacturer’s control beyond the moment at which they are placed on the market, the moment in time at which a product leaves the manufacturer’s control should also be taken into account in the assessment of a product’s safety. &lt;strong&gt;A product can also be found to be defective on account of its cybersecurity vulnerability.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Recital 23 makes it clear that a cybersecurity vulnerability can be considered a product defect, and hence explicitly incur liability. &lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;(26) The protection of the consumer requires that any manufacturer involved in the production process can be made liable, in so far as their product or a component supplied by them is defective. &lt;strong&gt;Where a manufacturer integrates a defective component from another manufacturer into a product, an injured person should be able to seek compensation for the same damage from either the manufacturer of the product or from the manufacturer of the component.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Recital 26 makes it clear that if an open source component is integrated into a product, and that open source component is found to be defective, the developer of that open source component may be liable. &lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;(38) The possibility for economic operators to avoid liability by proving that a defect came into being after they placed the product on the market or put it into service should also be restricted when a product’s defectiveness consists in the lack of software updates or upgrades necessary to address cybersecurity vulnerabilities and maintain the product’s safety. Such vulnerabilities can affect the product in such a way that it causes damage within the meaning of this Directive. In recognition of manufacturers’ responsibilities under Union law for the safety of products throughout their lifecycle, such as under Regulation (EU) 2017/745 of the European Parliament and of the Council,&lt;strong&gt; manufacturers should also be liable for damage caused by their failure to supply software security updates or upgrades that are necessary to address the product’s vulnerabilities in response to evolving cybersecurity risks. &lt;/strong&gt;Such liability should not apply where the supply or installation of such software is beyond the manufacturer’s control, for example where the owner of the product does not install an update or upgrade supplied for the purpose of ensuring or maintaining the level of safety of the product.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Recital 38 makes it clear that a failure to properly update a product to protect any security vulnerabilities is considered a defect and incur liability on the part of the manufacturer. &lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;(40) Situations may arise in which two or more parties are liable for the same damage, in particular where a defective component is integrated into a product that causes damage. In such a case,&lt;strong&gt; the injured person should be able to seek compensation both from the manufacturer that integrated the defective component into its product and from the manufacturer of the defective component itself.&lt;/strong&gt; In order to ensure consumer protection, all parties should be held liable jointly and severally in such situations. &lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Recital 40 makes it clear that the manufacturer of a defective component is liable to the consumer, as well as the manufacturer of the end product. &lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;(42) &lt;strong&gt;The objective of consumer protection would be undermined if it were possible to limit or exclude an economic operator’s liability through contractual provisions. Therefore no contractual derogations should be permitted.&lt;/strong&gt; For the same reason, it should not be possible for provisions of national law to limit or exclude liability, such as by setting financial ceilings on an economic operator’s liability.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Recital 42 makes it clear that the limitations of liability and no warranty clauses in open source licenses are superseded by the PLD.&lt;/p&gt;</description>
	<pubDate>Fri, 10 Mar 2023 13:49:50 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: The Eclipse Theia Community Release 2023-02</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2023/03/09/the-eclipse-theia-community-release-2023-02/</guid>
	<link>https://eclipsesource.com/blogs/2023/03/09/the-eclipse-theia-community-release-2023-02/</link>
	<description>&lt;p&gt;We are happy to announce the second Eclipse Theia community release “2023-02”, version 1.34.x!
Don’t know about Eclipse Theia, yet? It is the next-generation platform for building IDEs and tools for...&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2023/03/09/the-eclipse-theia-community-release-2023-02/&quot; rel=&quot;nofollow&quot;&gt; The Eclipse Theia Community Release 2023-02&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Ditto: Announcing Eclipse Ditto Release 3.2.0</title>
	<guid isPermaLink="true">https://www.eclipse.dev/ditto/2023-03-08-release-announcement-320.html</guid>
	<link>https://www.eclipse.dev/ditto/2023-03-08-release-announcement-320.html</link>
	<description>&lt;p&gt;The Eclipse Ditto teams is proud to announce the availability of Eclipse Ditto 
&lt;a href=&quot;https://projects.eclipse.org/projects/iot.ditto/releases/3.2.0&quot;&gt;3.2.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Version 3.2.0 brings a new &lt;strong&gt;History API&lt;/strong&gt;, &lt;strong&gt;Eclipse Hono&lt;/strong&gt; connection type, &lt;strong&gt;case-insensitive searches&lt;/strong&gt; and
other smaller improvements, e.g. on the Ditto UI and in the JS client.&lt;/p&gt;

&lt;h2 id=&quot;adoption&quot;&gt;Adoption&lt;/h2&gt;

&lt;p&gt;Companies are willing to show their adoption of Eclipse Ditto publicly: 
&lt;a href=&quot;https://iot.eclipse.org/adopters/#iot.ditto&quot;&gt;https://iot.eclipse.org/adopters/?#iot.ditto&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you use Eclipse Ditto it would be great to support the project by putting your logo there.&lt;/p&gt;

&lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

&lt;p&gt;The main improvements and additions of Ditto 3.2.0 are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New &lt;strong&gt;History API&lt;/strong&gt; in order to be able to:
    &lt;ul&gt;
      &lt;li&gt;access historical state of things/policies/connections (with either given revision number or timestamp)&lt;/li&gt;
      &lt;li&gt;stream persisted events of things/policies via async APIs (WebSocket, Connections) and things also via existing SSE (Server-Sent-Events) API&lt;/li&gt;
      &lt;li&gt;configure deletion retention of events in the database for each entity&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Addition of new &lt;strong&gt;Eclipse Hono&lt;/strong&gt; connection type for Ditto managed connections&lt;/li&gt;
  &lt;li&gt;Option to do &lt;strong&gt;case-insensitive searches&lt;/strong&gt; and addition of a new RQL operator to declare case-insensitive like: &lt;code class=&quot;highlighter-rouge&quot;&gt;ilike&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;UI enhancements:
    &lt;ul&gt;
      &lt;li&gt;Push notifications on the Ditto UI using SSE (Server-Sent-Events), e.g. on thing updates&lt;/li&gt;
      &lt;li&gt;Autocomplete functionality for the search slot&lt;/li&gt;
      &lt;li&gt;Added configuring &lt;code class=&quot;highlighter-rouge&quot;&gt;Bearer&lt;/code&gt; auth type for the “devops” authentication&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;JavaScript client:
    &lt;ul&gt;
      &lt;li&gt;Support for &lt;strong&gt;“merge” / “patch”&lt;/strong&gt; functionality in the &lt;strong&gt;JS client&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following non-functional enhancements are also included:&lt;/p&gt;

&lt;p&gt;None in this release.&lt;/p&gt;

&lt;p&gt;The following notable fixes are included:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Undo creating implicitly created policy as part of thing creation if creation of thing failed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please have a look at the &lt;a href=&quot;https://eclipse.dev/ditto/release_notes_320.html&quot;&gt;3.2.0 release notes&lt;/a&gt; for a more detailed information on the release.&lt;/p&gt;

&lt;h2 id=&quot;artifacts&quot;&gt;Artifacts&lt;/h2&gt;

&lt;p&gt;The new Java artifacts have been published at the &lt;a href=&quot;https://repo.eclipse.org/content/repositories/ditto/&quot;&gt;Eclipse Maven repository&lt;/a&gt;
as well as &lt;a href=&quot;https://repo1.maven.org/maven2/org/eclipse/ditto/&quot;&gt;Maven central&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Ditto JavaScript client release was published on &lt;a href=&quot;https://www.npmjs.com/~eclipse_ditto&quot;&gt;npmjs.com&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/@eclipse-ditto/ditto-javascript-client-dom&quot;&gt;@eclipse-ditto/ditto-javascript-client-dom&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/@eclipse-ditto/ditto-javascript-client-node&quot;&gt;@eclipse-ditto/ditto-javascript-client-node&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Docker images have been pushed to Docker Hub:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-policies/&quot;&gt;eclipse/ditto-policies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things/&quot;&gt;eclipse/ditto-things&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things-search/&quot;&gt;eclipse/ditto-things-search&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-gateway/&quot;&gt;eclipse/ditto-gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-connectivity/&quot;&gt;eclipse/ditto-connectivity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;Ditto&quot; class=&quot;docimage&quot; src=&quot;https://eclipse.dev/ditto/images/ditto.svg&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;–&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;</description>
	<pubDate>Wed, 08 Mar 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>John Kellerman: Rodrigo Pinto: Eclipse Cloud DevTools Contributor of the Month!</title>
	<guid isPermaLink="false">7322 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/john-kellerman/rodrigo-pinto-eclipse-cloud-devtools-contributor-month</link>
	<description>&lt;span&gt;Rodrigo Pinto: Eclipse Cloud DevTools Contributor of the Month!&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;p&gt;The Eclipse Cloud DevTools contributor award for this month goes to Rodrigo Pinto of &lt;a href=&quot;https://www.eclipse.org/membership/showMember.php?member_id=682&quot;&gt;Ericsson&lt;/a&gt; for his significant contributions to &lt;a href=&quot;https://github.com/eclipse-cdt-cloud/theia-trace-extension&quot;&gt;Trace Compass Cloud&lt;/a&gt; and the Eclipse Cloud DevTools Ecosystem. He is a committer on Trace Compass’s UI components based on Eclipse Theia. To hear him, check out his &lt;a href=&quot;https://youtu.be/KHuIv6JVo2Q&quot;&gt;talk at TheiaCon 2022&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;center-block&quot; src=&quot;https://www.rodrigoplp.com/static/1f44aac2f9831cf21499cdb713bbe8c8/bba09/Eu.webp&quot; style=&quot;height: 247px; width: 200px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Rodrigo has worked on the Trace Compass project and innovated it in many positive ways. To start, he has helped make the UI faster and more responsive. One of his key contributions was progressive loading in Eclipse Trace Compass. When loading a multi-gigabyte or terabyte sized trace, now the user can see the progress in an intuitive way. Rodrigo’s focus on making data more digestible brings great value to the project. He is working on porting trace compass to a VS Code extension.&lt;br /&gt;&lt;img alt=&quot;&quot; class=&quot;center-block&quot; src=&quot;https://www.eclipse.org/tracecompass/img/tc_icon_256x256.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Rodrigo is the ideal open source engineer, as he balances strong empathy, a curiosity towards new platforms and techniques as well as a drive for improvements. He has worked diligently on many aspects of his own volition, such as improving documentation and training videos. These items are not in the git log of a project, but contribute to them in an equal way. He is proof that a project is more than its code. Rodrigo has always driven to make Trace Compass a more inclusive environment by ramping up new talent whenever he could.&lt;br /&gt;
He has also collaborated with UX developers and universities to help build the community.&lt;/p&gt;

&lt;p&gt;These and many more reasons are why this Eclipse Cloud DevTools contributor award is very well deserved, congratulations Rodrigo!&lt;/p&gt;

&lt;p&gt;The Cloud DevTools Working Group provides a vendor-neutral ecosystem of open-source projects focused on defining, implementing and promoting best-in-class web and cloud-based development tools. It is hosted at the Eclipse Foundation, current members of the group include &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=682&quot;&gt;Ericsson&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=656&quot;&gt;IBM&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=863&quot;&gt;Obeo&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=731&quot;&gt;RedHat&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=665&quot;&gt;SAP&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=848&quot;&gt;AMD&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=823&quot;&gt;Arm&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=690&quot;&gt;EclipseSource&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=1069&quot;&gt;Renesas&lt;/a&gt;, &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=800&quot;&gt;STMicroelectronics&lt;/a&gt; and &lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=1194&quot;&gt;TypeFox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This Eclipse Cloud DevTools contributor award is sponsored by &lt;a href=&quot;https://eclipsesource.com/&quot;&gt;EclipseSource&lt;/a&gt;, providing &lt;a href=&quot;https://eclipsesource.com/services/tools/&quot;&gt;consulting and implementation services&lt;/a&gt; for &lt;a href=&quot;https://eclipsesource.com/web-and-cloud-based-tools/&quot;&gt;web-based tools&lt;/a&gt;, &lt;a href=&quot;https://eclipsesource.com/technology/eclipse-glsp/&quot;&gt;Eclipse GLSP&lt;/a&gt;,  &lt;a href=&quot;https://eclipsesource.com/technology/eclipse-theia/&quot;&gt;Eclipse Theia&lt;/a&gt;, and &lt;a href=&quot;https://eclipsesource.com/technology/vs-code/&quot;&gt;VS Code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;/div&gt;
      
&lt;span&gt;&lt;span&gt;John Kellerman&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;Mon, 2023-03-06 14:11&lt;/span&gt;

  &lt;div class=&quot;field field--name-field-blog-tags field--type-entity-reference field--label-above&quot;&gt;
    &lt;div class=&quot;field--label&quot;&gt;Tags&lt;/div&gt;
          &lt;div class=&quot;field--items&quot;&gt;
              &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/ecdtools&quot; hreflang=&quot;en&quot;&gt;ECDTools&lt;/a&gt;&lt;/div&gt;
          &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/clouddevtools-0&quot; hreflang=&quot;en&quot;&gt;CloudDevTools&lt;/a&gt;&lt;/div&gt;
          &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/theia&quot; hreflang=&quot;en&quot;&gt;Theia&lt;/a&gt;&lt;/div&gt;
          &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/theia-contributor-award&quot; hreflang=&quot;en&quot;&gt;Theia Contributor Award&lt;/a&gt;&lt;/div&gt;
              &lt;/div&gt;
      &lt;/div&gt;</description>
	<pubDate>Mon, 06 Mar 2023 19:11:35 +0000</pubDate>
</item>
<item>
	<title>Mikael Barbero: March 2023 Update on Security improvements at the Eclipse Foundation</title>
	<guid isPermaLink="true">https://mikael.barbero.tech/blog/post/2023-03-03-update-security-improvemets/</guid>
	<link>https://mikael.barbero.tech/blog/post/2023-03-03-update-security-improvemets/</link>
	<description>&lt;p&gt;Thanks to &lt;a href=&quot;https://blogs.eclipse.org/post/mike-milinkovich/open-source-security-eclipse-foundation&quot;&gt;financial support&lt;/a&gt; from the &lt;a href=&quot;https://openssf.org/community/alpha-omega/&quot;&gt;OpenSSF’s Alpha-Omega project&lt;/a&gt;, the Eclipse Foundation is glad to have made significant improvements in the last couple of months.&lt;/p&gt;
&lt;h2 id=&quot;two-factor-authentication&quot;&gt;Two Factor Authentication&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse-tycho&quot;&gt;Eclipse Tycho&lt;/a&gt;, &lt;a href=&quot;https://github.com/eclipse-m2e&quot;&gt;Eclipse m2e&lt;/a&gt;, and &lt;a href=&quot;https://github.com/eclipse-rap&quot;&gt;Eclipse RAP&lt;/a&gt; have all enforced 2FA for all their committers on GitHub:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gitlab.eclipse.org/eclipsefdn/helpdesk/-/issues/2701&quot;&gt;https://gitlab.eclipse.org/eclipsefdn/helpdesk/-/issues/2701&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gitlab.eclipse.org/eclipsefdn/helpdesk/-/issues/2702&quot;&gt;https://gitlab.eclipse.org/eclipsefdn/helpdesk/-/issues/2702&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gitlab.eclipse.org/eclipsefdn/helpdesk/-/issues/2611&quot;&gt;https://gitlab.eclipse.org/eclipsefdn/helpdesk/-/issues/2611&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Meanwhile, we’ve seen an increase of adoption of 2FA globally on all Eclipse Projects at Github, increasing from 63.7% to &lt;strong&gt;67%&lt;/strong&gt; since the begining of the year. We are now starting to actively enforce 2FA for projects with a dedicated GitHub organization.&lt;/p&gt;
&lt;h2 id=&quot;security-audits&quot;&gt;Security Audits&lt;/h2&gt;
&lt;p&gt;We have successfully initiated the 3 security audits that will all be performed by &lt;a href=&quot;https://www.trailofbits.com/&quot;&gt;Trail of Bits&lt;/a&gt; in collaboration with &lt;a href=&quot;https://ostif.org/&quot;&gt;OSTIF&lt;/a&gt;. The projects that will be covered in these audits are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/jetty/&quot;&gt;Eclipse Jetty&lt;/a&gt;: an open-source Java-based web server that provides a HTTP server and servlet container.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/jkube/&quot;&gt;Eclipse JKube&lt;/a&gt;: a toolkit for building container images and deploying them to Kubernetes.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mosquitto.org/&quot;&gt;Eclipse Mosquito&lt;/a&gt;: an open-source IoT platform that enables the development and management of connected devices.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Threat modeling for one out of the three audits have been completed. Code review is underway. The timeline has been locked in for threat modeling and code review for the second security audit. The schedule of the third one is still a work in progress, but will likely be delayed due to project’s constraint. This last one will likely complete in May.&lt;/p&gt;
&lt;h2 id=&quot;hiring&quot;&gt;Hiring&lt;/h2&gt;
&lt;p&gt;We have build capacity since the beginning of the year, &lt;a href=&quot;https://www.eclipse.org/org/foundation/staff.php&quot;&gt;hiring 3 talented people&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Marta Rybczynska&lt;/strong&gt;, Technical Program Manager. They bring a wealth of experience and knowledge to the team. She initially focusing on improving security / vulnerability policies, procedures, and guidelines that adhere to industry best practices. She started early January.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Thomas Neidhart&lt;/strong&gt;, Software Engineer. He is initially focusing on SLSA attestation generation and GitHub management tooling. He started mid-January.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Francisco Perez&lt;/strong&gt;, Software Engineer. He will work closely with Eclipse Foundation Projects to enhance their software supply chain security. He started begining of March.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’re also in talks with a SecOps professional to improve the security of our infrastructure and introduce new tools and services, such as a self-hosted &lt;a href=&quot;https://www.sigstore.dev&quot;&gt;sigstore&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;rework-of-the-cve-process&quot;&gt;Rework of the CVE process&lt;/h2&gt;
&lt;p&gt;We have started gathering feedback from projects about Eclipse’s security processes. We are performing interviews with committers and project leads, starting with projects selected for the audit or having a recent security vulnerability. We have contacted six projects, conducted four interviews, and gathered helpful feedback.&lt;/p&gt;
&lt;p&gt;The common outcome is a request for more detailed documentation and clarification of the process. Proposals for updated documentations are currently under review. More interviews are planned. We’ve extended the experimentation of GitHub security advisories. We have also worked on a SECURITY.md template for all Eclipse Foundation projects.&lt;/p&gt;
&lt;h2 id=&quot;github-organizations-and-repositories-management&quot;&gt;GitHub organizations and repositories management&lt;/h2&gt;
&lt;p&gt;We have re-started the work on a custom tool to enforce and create security related configurations of organizations and their associated repositories on GitHub. The tool is codenamed &lt;a href=&quot;https://gitlab.eclipse.org/eclipsefdn/security/otterdog/&quot;&gt;OtterDog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What is currently supported:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;descriptive definition of required organization settings / webhooks, repositories and associated branch protection rules&lt;/li&gt;
&lt;li&gt;mechanism to fetch the current configuration from an organization hosted on GitHub&lt;/li&gt;
&lt;li&gt;verification on how the required configuration differs from the current live configuration hosted on GitHub&lt;/li&gt;
&lt;li&gt;update mechanism to enforce the required configuration on GitHub&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some work has been done in order to improve the usability of the tool. The tool will output in a concise way what settings / resources will be changed / created prior to applying the configuration to GitHub by comparing the current live settings on GitHub to the intended configuration.&lt;/p&gt;
&lt;p&gt;A credential provider for &lt;a href=&quot;https://www.passwordstore.org&quot;&gt;pass&lt;/a&gt; (in addition to existing one for &lt;a href=&quot;https://bitwarden.com&quot;&gt;Bitwarden&lt;/a&gt;) has been added to support using the tool for our first organization: &lt;a href=&quot;https://github.com/eclipse-cbi/&quot;&gt;Eclipse CBI&lt;/a&gt; which hosts various tools and projects for common build infrastructure at the Eclipse Foundation.&lt;/p&gt;
&lt;h2 id=&quot;slsa-tools&quot;&gt;SLSA tools&lt;/h2&gt;
&lt;p&gt;We started to work on &lt;a href=&quot;https://gitlab.eclipse.org/netomi/slsa-tools&quot;&gt;slsa-tools&lt;/a&gt; which is a collection of tools written in Java to operate on SLSA provenance files. The idea behind this project is to have a rich set of tools to verify / generate provenance files for the Java ecosystem.&lt;/p&gt;
&lt;p&gt;Existing SLSA tools are implemented in Go which make it somewhat cumbersome to use them in certain settings, e.g. to develop a Jenkins plugin to generate provenance files for builds.&lt;/p&gt;
&lt;p&gt;The medium-term goal is to develop such a Jenkins plugin with features similar to the existing &lt;a href=&quot;https://github.com/slsa-framework/slsa-github-generator/&quot;&gt;slsa-github-generator&lt;/a&gt; action for GitHub.&lt;/p&gt;</description>
	<pubDate>Fri, 03 Mar 2023 09:00:00 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: Eclipse Theia 1.35 Release: News and Noteworthy</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2023/03/02/eclipse-theia-1-35-release-news-and-noteworthy/</guid>
	<link>https://eclipsesource.com/blogs/2023/03/02/eclipse-theia-1-35-release-news-and-noteworthy/</link>
	<description>&lt;p&gt;We are happy to announce the Eclipse Theia 1.35 release! The release contains 45 merged pull requests and we welcome two new contributors. In this article we will highlight some selected improvements...&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2023/03/02/eclipse-theia-1-35-release-news-and-noteworthy/&quot; rel=&quot;nofollow&quot;&gt; Eclipse Theia 1.35 Release: News and Noteworthy&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Mikael Barbero: Shell Hole: How Advanced Prompts are Putting Software Developers at Risk</title>
	<guid isPermaLink="true">https://mikael.barbero.tech/blog/post/2023-03-01-shell-shock/</guid>
	<link>https://mikael.barbero.tech/blog/post/2023-03-01-shell-shock/</link>
	<description>&lt;p&gt;Advanced shell prompts, such as those provided by theme engines like &lt;a href=&quot;https://ohmyz.sh&quot;&gt;oh-my-zsh&lt;/a&gt; and &lt;a href=&quot;https://ohmyposh.dev&quot;&gt;oh-my-posh&lt;/a&gt;, have become increasingly popular among software developers due to their convenience, versatility, and customizability. However, the use of plugins that are executed outside of any sandbox and have full access to the developer shell environment, presents significant security risks, especially for Open Source Software developers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Open Source Software (OSS) developers are primary targets for software supply chain attacks&lt;/strong&gt; because they often have access to a wide range of sensitive information and powerful tools that can be used to amplify the impact of a successful attack. OSS developers often have access not only to source code, but also access keys and credentials, which can be exfiltrated and used for malicious purposes. By compromising a single OSS developer, attackers can potentially gain access to the sensitive information and powerful tools of many other developers and users. This can enable them to launch more sophisticated and damaging attacks, potentially affecting a large number of individuals, organizations, and even whole industries.&lt;/p&gt;
&lt;p&gt;For these reasons, OSS developers are primary targets for software supply chain attacks, and it’s crucial for them to be aware of the risks and to take steps to protect themselves and their users. &lt;strong&gt;This includes verifying the authenticity and security of any software they use, keeping software up to date, and being vigilant for signs of compromise&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;figure&gt;
&lt;img alt=&quot;&amp;gt;&amp;gt;Oh My ZSH!&quot; src=&quot;https://mikael.barbero.tech/blog/post/2023-03-01-shell-shock/ohmyzsh.jpg&quot; /&gt;
&lt;figcaption&gt;&lt;a href=&quot;https://ohmyz.sh&quot;&gt;Oh My ZSH!&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Shell theme engines and other advanced shell prompts is an example of the tools that have gain in popularity in the last couple of years and does not seem to considered as much as a threat as some others like projects dependencies or IDE plugins. &lt;strong&gt;A compromised shell prompt plugin can steal valuable information and credentials&lt;/strong&gt; in several ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Keylogging&lt;/strong&gt;: The plugin can capture keystrokes, including sensitive information such as passwords, credit card numbers, and access tokens.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;: The plugin can take screenshots of the user’s screen, potentially capturing sensitive information displayed on the screen.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data exfiltration&lt;/strong&gt;: The plugin can exfiltrate data from the user’s system, such as sensitive files, source code, or even access tokens.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Remote access&lt;/strong&gt;: The plugin can open a remote connection to an attacker-controlled system, allowing the attacker to gain access to the user’s system and steal sensitive information.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Credentials harvesting&lt;/strong&gt;: The plugin can harvest sensitive information such as passwords, access tokens, and private keys from the user’s system, such as:
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;System keychain&lt;/em&gt;: Windows Credential Manager, macOS Keychain, Gnome Keyring or KDE KWallet. If misconfigured, they don’t require systematic authorization to read entries.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;User’s configuration files&lt;/em&gt; which are sometime used to store sensitive information.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Shell history&lt;/em&gt; may contain sensitive information passed as arguments to commands (e.g., `curl -H ‘Authorization: Bearer xxxxxx’).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Environment variables&lt;/em&gt;: environment variables are sometimes used to share credentials with applications without having to pass explicit parameters.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Browser Cookies&lt;/em&gt; file store can be inspected to steal session tokens.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network reconnaissance&lt;/strong&gt;: The plugin can gather information about the user’s network, such as IP addresses, hostnames, and open ports, which can be used to launch more targeted attacks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It’s worth noting that these are just a few examples of how a compromised shell prompt plugin can steal valuable information and credentials. The actual methods used by attackers may vary and will depend on the attacker’s goals.&lt;/p&gt;
&lt;p&gt;To mitigate these risks, it is important for software developers to properly configure and secure their advanced shell prompts. This includes verifying the authenticity and security of any plugins before use, regularly patching and updating systems, and monitoring for suspicious activity. Additionally, it is also important to educate developers on the proper use of advanced shell prompts, and the risks associated with them.&lt;/p&gt;
&lt;p&gt;In conclusion, advanced shell prompts like &lt;a href=&quot;https://ohmyz.sh&quot;&gt;oh-my-zsh&lt;/a&gt; and &lt;a href=&quot;https://ohmyposh.dev&quot;&gt;oh-my-posh&lt;/a&gt; are powerful tools that can greatly enhance productivity and automation for software developers. However, the use of plugins that are executed outside of any sandbox and have full access to the user shell environment, presents significant security risks. &lt;strong&gt;Software developers are particularly vulnerable to software supply chain attacks, which can have serious consequences for their software development environments&lt;/strong&gt;. It is important for organizations to take appropriate measures to secure their command-line interfaces and educate their users on the risks associated with them, especially when it comes to using plugins from untrusted sources.&lt;/p&gt;</description>
	<pubDate>Wed, 01 Mar 2023 08:00:00 +0000</pubDate>
</item>

</channel>
</rss>
